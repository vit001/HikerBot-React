//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.HAMPErrorCode = {
  'UNKNOWN' : 1,
  'BAD_DATA_FORMAT' : 2,
  'PERMISSION_DENIED' : 3,
  'INTERNAL_ERROR' : 4,
  'DATA_REQUIRED' : 5,
  'LIMIT_REACHED' : 6,
  'QUOTA_REACHED' : 7,
  'INVALID_AUTH' : 8,
  'AUTH_EXPIRED' : 9,
  'DATA_CONFLICT' : 10,
  'MIME_VALIDATION' : 11,
  'LEN_TOO_SHORT' : 12,
  'LEN_TOO_LONG' : 13,
  'TOO_FEW' : 14,
  'TOO_MANY' : 15,
  'UNSUPPORTED_OPERATION' : 16,
  'RATE_LIMIT_REACHED' : 17,
  'PUT_WITH_NO_CHANGE' : 18,
  'NOT_CURRENT_VERSION' : 19,
  'CLIENT_VERSION_TOO_OLD' : 20
};
var HAMPUserException = module.exports.HAMPUserException = function(args) {
  Thrift.TException.call(this, "HAMPUserException");
  this.name = "HAMPUserException";
  this.errorCode = null;
  this.parameter = null;
  if (args) {
    if (args.errorCode !== undefined && args.errorCode !== null) {
      this.errorCode = args.errorCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field errorCode is unset!');
    }
    if (args.parameter !== undefined && args.parameter !== null) {
      this.parameter = args.parameter;
    }
  }
};
Thrift.inherits(HAMPUserException, Thrift.TException);
HAMPUserException.prototype.name = 'HAMPUserException';
HAMPUserException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.errorCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.parameter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HAMPUserException.prototype.write = function(output) {
  output.writeStructBegin('HAMPUserException');
  if (this.errorCode !== null && this.errorCode !== undefined) {
    output.writeFieldBegin('errorCode', Thrift.Type.I32, 1);
    output.writeI32(this.errorCode);
    output.writeFieldEnd();
  }
  if (this.parameter !== null && this.parameter !== undefined) {
    output.writeFieldBegin('parameter', Thrift.Type.STRING, 2);
    output.writeString(this.parameter);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var HAMPSystemException = module.exports.HAMPSystemException = function(args) {
  Thrift.TException.call(this, "HAMPSystemException");
  this.name = "HAMPSystemException";
  this.errorCode = null;
  this.message = null;
  this.rateLimitDuration = null;
  if (args) {
    if (args.errorCode !== undefined && args.errorCode !== null) {
      this.errorCode = args.errorCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field errorCode is unset!');
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.rateLimitDuration !== undefined && args.rateLimitDuration !== null) {
      this.rateLimitDuration = args.rateLimitDuration;
    }
  }
};
Thrift.inherits(HAMPSystemException, Thrift.TException);
HAMPSystemException.prototype.name = 'HAMPSystemException';
HAMPSystemException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.errorCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.rateLimitDuration = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HAMPSystemException.prototype.write = function(output) {
  output.writeStructBegin('HAMPSystemException');
  if (this.errorCode !== null && this.errorCode !== undefined) {
    output.writeFieldBegin('errorCode', Thrift.Type.I32, 1);
    output.writeI32(this.errorCode);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.rateLimitDuration !== null && this.rateLimitDuration !== undefined) {
    output.writeFieldBegin('rateLimitDuration', Thrift.Type.I32, 3);
    output.writeI32(this.rateLimitDuration);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var HAMPNotFoundException = module.exports.HAMPNotFoundException = function(args) {
  Thrift.TException.call(this, "HAMPNotFoundException");
  this.name = "HAMPNotFoundException";
  this.identifier = null;
  this.key = null;
  if (args) {
    if (args.identifier !== undefined && args.identifier !== null) {
      this.identifier = args.identifier;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
  }
};
Thrift.inherits(HAMPNotFoundException, Thrift.TException);
HAMPNotFoundException.prototype.name = 'HAMPNotFoundException';
HAMPNotFoundException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HAMPNotFoundException.prototype.write = function(output) {
  output.writeStructBegin('HAMPNotFoundException');
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 1);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

