//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Limits_ttypes = require('./Limits_types')
var Errors_ttypes = require('./Errors_types')
var Types_ttypes = require('./Types_types')
var Authentication_ttypes = require('./Authentication_types')


var ttypes = require('./DataStore_types');
//HELPER FUNCTIONS AND STRUCTURES

DataStore_checkVersion_args = function(args) {
  this.clientName = null;
  this.hampVersionMajor = 4;
  this.hampVersionMinor = 1;
  if (args) {
    if (args.clientName !== undefined && args.clientName !== null) {
      this.clientName = args.clientName;
    }
    if (args.hampVersionMajor !== undefined && args.hampVersionMajor !== null) {
      this.hampVersionMajor = args.hampVersionMajor;
    }
    if (args.hampVersionMinor !== undefined && args.hampVersionMinor !== null) {
      this.hampVersionMinor = args.hampVersionMinor;
    }
  }
};
DataStore_checkVersion_args.prototype = {};
DataStore_checkVersion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clientName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.hampVersionMajor = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.hampVersionMinor = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_checkVersion_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_checkVersion_args');
  if (this.clientName !== null && this.clientName !== undefined) {
    output.writeFieldBegin('clientName', Thrift.Type.STRING, 1);
    output.writeString(this.clientName);
    output.writeFieldEnd();
  }
  if (this.hampVersionMajor !== null && this.hampVersionMajor !== undefined) {
    output.writeFieldBegin('hampVersionMajor', Thrift.Type.I16, 2);
    output.writeI16(this.hampVersionMajor);
    output.writeFieldEnd();
  }
  if (this.hampVersionMinor !== null && this.hampVersionMinor !== undefined) {
    output.writeFieldBegin('hampVersionMinor', Thrift.Type.I16, 3);
    output.writeI16(this.hampVersionMinor);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataStore_checkVersion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
DataStore_checkVersion_result.prototype = {};
DataStore_checkVersion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_checkVersion_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_checkVersion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataStore_putUser_args = function(args) {
  this.authenticationToken = null;
  this.user = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.user !== undefined && args.user !== null) {
      this.user = new Types_ttypes.User(args.user);
    }
  }
};
DataStore_putUser_args.prototype = {};
DataStore_putUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new Types_ttypes.User();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_putUser_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_putUser_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 2);
    this.user.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataStore_putUser_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Response(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_putUser_result.prototype = {};
DataStore_putUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Response();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_putUser_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_putUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataStore_putPoint_args = function(args) {
  this.authenticationToken = null;
  this.point = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.point !== undefined && args.point !== null) {
      this.point = new Types_ttypes.Point(args.point);
    }
  }
};
DataStore_putPoint_args.prototype = {};
DataStore_putPoint_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.point = new Types_ttypes.Point();
        this.point.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_putPoint_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_putPoint_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.point !== null && this.point !== undefined) {
    output.writeFieldBegin('point', Thrift.Type.STRUCT, 2);
    this.point.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataStore_putPoint_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Response(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_putPoint_result.prototype = {};
DataStore_putPoint_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Response();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_putPoint_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_putPoint_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataStore_putTrack_args = function(args) {
  this.authenticationToken = null;
  this.track = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.track !== undefined && args.track !== null) {
      this.track = new Types_ttypes.Track(args.track);
    }
  }
};
DataStore_putTrack_args.prototype = {};
DataStore_putTrack_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.track = new Types_ttypes.Track();
        this.track.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_putTrack_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_putTrack_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.track !== null && this.track !== undefined) {
    output.writeFieldBegin('track', Thrift.Type.STRUCT, 2);
    this.track.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataStore_putTrack_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Response(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_putTrack_result.prototype = {};
DataStore_putTrack_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Response();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_putTrack_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_putTrack_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataStore_putRelation_args = function(args) {
  this.authenticationToken = null;
  this.relation = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.relation !== undefined && args.relation !== null) {
      this.relation = new Types_ttypes.Relation(args.relation);
    }
  }
};
DataStore_putRelation_args.prototype = {};
DataStore_putRelation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.relation = new Types_ttypes.Relation();
        this.relation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_putRelation_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_putRelation_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.relation !== null && this.relation !== undefined) {
    output.writeFieldBegin('relation', Thrift.Type.STRUCT, 2);
    this.relation.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataStore_putRelation_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Response(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_putRelation_result.prototype = {};
DataStore_putRelation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Response();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_putRelation_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_putRelation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataStore_putAnalytics_args = function(args) {
  this.authenticationToken = null;
  this.analyticsSubmitList = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.analyticsSubmitList !== undefined && args.analyticsSubmitList !== null) {
      this.analyticsSubmitList = Thrift.copyList(args.analyticsSubmitList, [Types_ttypes.AnalyticsSubmit]);
    }
  }
};
DataStore_putAnalytics_args.prototype = {};
DataStore_putAnalytics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.analyticsSubmitList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new Types_ttypes.AnalyticsSubmit();
          elem6.read(input);
          this.analyticsSubmitList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_putAnalytics_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_putAnalytics_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.analyticsSubmitList !== null && this.analyticsSubmitList !== undefined) {
    output.writeFieldBegin('analyticsSubmitList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.analyticsSubmitList.length);
    for (var iter7 in this.analyticsSubmitList)
    {
      if (this.analyticsSubmitList.hasOwnProperty(iter7))
      {
        iter7 = this.analyticsSubmitList[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataStore_putAnalytics_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Response(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_putAnalytics_result.prototype = {};
DataStore_putAnalytics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Response();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_putAnalytics_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_putAnalytics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataStore_getNextModifiedRecordChunk_args = function(args) {
  this.authenticationToken = null;
  this.selector_id = null;
  this.changeset_id = null;
  this.withPreviewResourcesData = null;
  this.withFullResourcesData = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.selector_id !== undefined && args.selector_id !== null) {
      this.selector_id = args.selector_id;
    }
    if (args.changeset_id !== undefined && args.changeset_id !== null) {
      this.changeset_id = args.changeset_id;
    }
    if (args.withPreviewResourcesData !== undefined && args.withPreviewResourcesData !== null) {
      this.withPreviewResourcesData = args.withPreviewResourcesData;
    }
    if (args.withFullResourcesData !== undefined && args.withFullResourcesData !== null) {
      this.withFullResourcesData = args.withFullResourcesData;
    }
  }
};
DataStore_getNextModifiedRecordChunk_args.prototype = {};
DataStore_getNextModifiedRecordChunk_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.selector_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.changeset_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.withPreviewResourcesData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.withFullResourcesData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getNextModifiedRecordChunk_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getNextModifiedRecordChunk_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.selector_id !== null && this.selector_id !== undefined) {
    output.writeFieldBegin('selector_id', Thrift.Type.I64, 2);
    output.writeI64(this.selector_id);
    output.writeFieldEnd();
  }
  if (this.changeset_id !== null && this.changeset_id !== undefined) {
    output.writeFieldBegin('changeset_id', Thrift.Type.I64, 3);
    output.writeI64(this.changeset_id);
    output.writeFieldEnd();
  }
  if (this.withPreviewResourcesData !== null && this.withPreviewResourcesData !== undefined) {
    output.writeFieldBegin('withPreviewResourcesData', Thrift.Type.BOOL, 4);
    output.writeBool(this.withPreviewResourcesData);
    output.writeFieldEnd();
  }
  if (this.withFullResourcesData !== null && this.withFullResourcesData !== undefined) {
    output.writeFieldBegin('withFullResourcesData', Thrift.Type.BOOL, 5);
    output.writeBool(this.withFullResourcesData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataStore_getNextModifiedRecordChunk_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Types_ttypes.Response]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_getNextModifiedRecordChunk_result.prototype = {};
DataStore_getNextModifiedRecordChunk_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.success = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new Types_ttypes.Response();
          elem14.read(input);
          this.success.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getNextModifiedRecordChunk_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getNextModifiedRecordChunk_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter15 in this.success)
    {
      if (this.success.hasOwnProperty(iter15))
      {
        iter15 = this.success[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataStore_getDatastatus_args = function(args) {
  this.authenticationToken = null;
  this.ids = null;
  this.hwms = null;
  this.selector = null;
  this.withPreviewResourcesData = null;
  this.withFullResourcesData = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.ids !== undefined && args.ids !== null) {
      this.ids = Thrift.copyList(args.ids, [null]);
    }
    if (args.hwms !== undefined && args.hwms !== null) {
      this.hwms = Thrift.copyList(args.hwms, [null]);
    }
    if (args.selector !== undefined && args.selector !== null) {
      this.selector = new Types_ttypes.Selector(args.selector);
    }
    if (args.withPreviewResourcesData !== undefined && args.withPreviewResourcesData !== null) {
      this.withPreviewResourcesData = args.withPreviewResourcesData;
    }
    if (args.withFullResourcesData !== undefined && args.withFullResourcesData !== null) {
      this.withFullResourcesData = args.withFullResourcesData;
    }
  }
};
DataStore_getDatastatus_args.prototype = {};
DataStore_getDatastatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.ids = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readI64();
          this.ids.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size23 = 0;
        var _rtmp327;
        this.hwms = [];
        var _etype26 = 0;
        _rtmp327 = input.readListBegin();
        _etype26 = _rtmp327.etype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          var elem29 = null;
          elem29 = input.readI64();
          this.hwms.push(elem29);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.selector = new Types_ttypes.Selector();
        this.selector.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.withPreviewResourcesData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.withFullResourcesData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getDatastatus_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getDatastatus_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.ids.length);
    for (var iter30 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter30))
      {
        iter30 = this.ids[iter30];
        output.writeI64(iter30);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.hwms !== null && this.hwms !== undefined) {
    output.writeFieldBegin('hwms', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I64, this.hwms.length);
    for (var iter31 in this.hwms)
    {
      if (this.hwms.hasOwnProperty(iter31))
      {
        iter31 = this.hwms[iter31];
        output.writeI64(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.selector !== null && this.selector !== undefined) {
    output.writeFieldBegin('selector', Thrift.Type.STRUCT, 4);
    this.selector.write(output);
    output.writeFieldEnd();
  }
  if (this.withPreviewResourcesData !== null && this.withPreviewResourcesData !== undefined) {
    output.writeFieldBegin('withPreviewResourcesData', Thrift.Type.BOOL, 5);
    output.writeBool(this.withPreviewResourcesData);
    output.writeFieldEnd();
  }
  if (this.withFullResourcesData !== null && this.withFullResourcesData !== undefined) {
    output.writeFieldBegin('withFullResourcesData', Thrift.Type.BOOL, 6);
    output.writeBool(this.withFullResourcesData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataStore_getDatastatus_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Types_ttypes.Datastatus]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_getDatastatus_result.prototype = {};
DataStore_getDatastatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.success = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new Types_ttypes.Datastatus();
          elem38.read(input);
          this.success.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getDatastatus_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getDatastatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter39 in this.success)
    {
      if (this.success.hasOwnProperty(iter39))
      {
        iter39 = this.success[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataStore_getSelectors_args = function(args) {
  this.authenticationToken = null;
  this.changeset_id = null;
  this.withPreviewResourcesData = null;
  this.withFullResourcesData = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.changeset_id !== undefined && args.changeset_id !== null) {
      this.changeset_id = args.changeset_id;
    }
    if (args.withPreviewResourcesData !== undefined && args.withPreviewResourcesData !== null) {
      this.withPreviewResourcesData = args.withPreviewResourcesData;
    }
    if (args.withFullResourcesData !== undefined && args.withFullResourcesData !== null) {
      this.withFullResourcesData = args.withFullResourcesData;
    }
  }
};
DataStore_getSelectors_args.prototype = {};
DataStore_getSelectors_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.changeset_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.withPreviewResourcesData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.withFullResourcesData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getSelectors_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getSelectors_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.changeset_id !== null && this.changeset_id !== undefined) {
    output.writeFieldBegin('changeset_id', Thrift.Type.I64, 2);
    output.writeI64(this.changeset_id);
    output.writeFieldEnd();
  }
  if (this.withPreviewResourcesData !== null && this.withPreviewResourcesData !== undefined) {
    output.writeFieldBegin('withPreviewResourcesData', Thrift.Type.BOOL, 3);
    output.writeBool(this.withPreviewResourcesData);
    output.writeFieldEnd();
  }
  if (this.withFullResourcesData !== null && this.withFullResourcesData !== undefined) {
    output.writeFieldBegin('withFullResourcesData', Thrift.Type.BOOL, 4);
    output.writeBool(this.withFullResourcesData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataStore_getSelectors_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Types_ttypes.Selector]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_getSelectors_result.prototype = {};
DataStore_getSelectors_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.success = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new Types_ttypes.Selector();
          elem46.read(input);
          this.success.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getSelectors_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getSelectors_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter47 in this.success)
    {
      if (this.success.hasOwnProperty(iter47))
      {
        iter47 = this.success[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataStore_createSelector_args = function(args) {
  this.authenticationToken = null;
  this.selector = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.selector !== undefined && args.selector !== null) {
      this.selector = new Types_ttypes.Selector(args.selector);
    }
  }
};
DataStore_createSelector_args.prototype = {};
DataStore_createSelector_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.selector = new Types_ttypes.Selector();
        this.selector.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_createSelector_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_createSelector_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.selector !== null && this.selector !== undefined) {
    output.writeFieldBegin('selector', Thrift.Type.STRUCT, 2);
    this.selector.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataStore_createSelector_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Selector(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_createSelector_result.prototype = {};
DataStore_createSelector_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Selector();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_createSelector_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_createSelector_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataStore_createDatastatus_args = function(args) {
  this.authenticationToken = null;
  this.datastatus = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.datastatus !== undefined && args.datastatus !== null) {
      this.datastatus = new Types_ttypes.Datastatus(args.datastatus);
    }
  }
};
DataStore_createDatastatus_args.prototype = {};
DataStore_createDatastatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.datastatus = new Types_ttypes.Datastatus();
        this.datastatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_createDatastatus_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_createDatastatus_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.datastatus !== null && this.datastatus !== undefined) {
    output.writeFieldBegin('datastatus', Thrift.Type.STRUCT, 2);
    this.datastatus.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataStore_createDatastatus_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Datastatus(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_createDatastatus_result.prototype = {};
DataStore_createDatastatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Datastatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_createDatastatus_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_createDatastatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataStore_getAllPointsInBounds_args = function(args) {
  this.selector_id = null;
  this.swlate6 = null;
  this.swlone6 = null;
  this.nelate6 = null;
  this.nelone6 = null;
  if (args) {
    if (args.selector_id !== undefined && args.selector_id !== null) {
      this.selector_id = args.selector_id;
    }
    if (args.swlate6 !== undefined && args.swlate6 !== null) {
      this.swlate6 = args.swlate6;
    }
    if (args.swlone6 !== undefined && args.swlone6 !== null) {
      this.swlone6 = args.swlone6;
    }
    if (args.nelate6 !== undefined && args.nelate6 !== null) {
      this.nelate6 = args.nelate6;
    }
    if (args.nelone6 !== undefined && args.nelone6 !== null) {
      this.nelone6 = args.nelone6;
    }
  }
};
DataStore_getAllPointsInBounds_args.prototype = {};
DataStore_getAllPointsInBounds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.selector_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.swlate6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.swlone6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.nelate6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.nelone6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getAllPointsInBounds_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getAllPointsInBounds_args');
  if (this.selector_id !== null && this.selector_id !== undefined) {
    output.writeFieldBegin('selector_id', Thrift.Type.I64, 1);
    output.writeI64(this.selector_id);
    output.writeFieldEnd();
  }
  if (this.swlate6 !== null && this.swlate6 !== undefined) {
    output.writeFieldBegin('swlate6', Thrift.Type.I32, 2);
    output.writeI32(this.swlate6);
    output.writeFieldEnd();
  }
  if (this.swlone6 !== null && this.swlone6 !== undefined) {
    output.writeFieldBegin('swlone6', Thrift.Type.I32, 3);
    output.writeI32(this.swlone6);
    output.writeFieldEnd();
  }
  if (this.nelate6 !== null && this.nelate6 !== undefined) {
    output.writeFieldBegin('nelate6', Thrift.Type.I32, 4);
    output.writeI32(this.nelate6);
    output.writeFieldEnd();
  }
  if (this.nelone6 !== null && this.nelone6 !== undefined) {
    output.writeFieldBegin('nelone6', Thrift.Type.I32, 5);
    output.writeI32(this.nelone6);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataStore_getAllPointsInBounds_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Types_ttypes.Point]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_getAllPointsInBounds_result.prototype = {};
DataStore_getAllPointsInBounds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.success = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new Types_ttypes.Point();
          elem54.read(input);
          this.success.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getAllPointsInBounds_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getAllPointsInBounds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter55 in this.success)
    {
      if (this.success.hasOwnProperty(iter55))
      {
        iter55 = this.success[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataStoreClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
DataStoreClient.prototype = {};
DataStoreClient.prototype.seqid = function() { return this._seqid; }
DataStoreClient.prototype.new_seqid = function() { return this._seqid += 1; }
DataStoreClient.prototype.checkVersion = function(clientName, hampVersionMajor, hampVersionMinor, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_checkVersion(clientName, hampVersionMajor, hampVersionMinor);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_checkVersion(clientName, hampVersionMajor, hampVersionMinor);
  }
};

DataStoreClient.prototype.send_checkVersion = function(clientName, hampVersionMajor, hampVersionMinor) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkVersion', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_checkVersion_args();
  args.clientName = clientName;
  args.hampVersionMajor = hampVersionMajor;
  args.hampVersionMinor = hampVersionMinor;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_checkVersion = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_checkVersion_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('checkVersion failed: unknown result');
};
DataStoreClient.prototype.putUser = function(authenticationToken, user, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_putUser(authenticationToken, user);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_putUser(authenticationToken, user);
  }
};

DataStoreClient.prototype.send_putUser = function(authenticationToken, user) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('putUser', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_putUser_args();
  args.authenticationToken = authenticationToken;
  args.user = user;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_putUser = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_putUser_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('putUser failed: unknown result');
};
DataStoreClient.prototype.putPoint = function(authenticationToken, point, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_putPoint(authenticationToken, point);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_putPoint(authenticationToken, point);
  }
};

DataStoreClient.prototype.send_putPoint = function(authenticationToken, point) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('putPoint', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_putPoint_args();
  args.authenticationToken = authenticationToken;
  args.point = point;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_putPoint = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_putPoint_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('putPoint failed: unknown result');
};
DataStoreClient.prototype.putTrack = function(authenticationToken, track, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_putTrack(authenticationToken, track);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_putTrack(authenticationToken, track);
  }
};

DataStoreClient.prototype.send_putTrack = function(authenticationToken, track) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('putTrack', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_putTrack_args();
  args.authenticationToken = authenticationToken;
  args.track = track;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_putTrack = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_putTrack_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('putTrack failed: unknown result');
};
DataStoreClient.prototype.putRelation = function(authenticationToken, relation, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_putRelation(authenticationToken, relation);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_putRelation(authenticationToken, relation);
  }
};

DataStoreClient.prototype.send_putRelation = function(authenticationToken, relation) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('putRelation', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_putRelation_args();
  args.authenticationToken = authenticationToken;
  args.relation = relation;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_putRelation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_putRelation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('putRelation failed: unknown result');
};
DataStoreClient.prototype.putAnalytics = function(authenticationToken, analyticsSubmitList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_putAnalytics(authenticationToken, analyticsSubmitList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_putAnalytics(authenticationToken, analyticsSubmitList);
  }
};

DataStoreClient.prototype.send_putAnalytics = function(authenticationToken, analyticsSubmitList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('putAnalytics', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_putAnalytics_args();
  args.authenticationToken = authenticationToken;
  args.analyticsSubmitList = analyticsSubmitList;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_putAnalytics = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_putAnalytics_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('putAnalytics failed: unknown result');
};
DataStoreClient.prototype.getNextModifiedRecordChunk = function(authenticationToken, selector_id, changeset_id, withPreviewResourcesData, withFullResourcesData, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getNextModifiedRecordChunk(authenticationToken, selector_id, changeset_id, withPreviewResourcesData, withFullResourcesData);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getNextModifiedRecordChunk(authenticationToken, selector_id, changeset_id, withPreviewResourcesData, withFullResourcesData);
  }
};

DataStoreClient.prototype.send_getNextModifiedRecordChunk = function(authenticationToken, selector_id, changeset_id, withPreviewResourcesData, withFullResourcesData) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getNextModifiedRecordChunk', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_getNextModifiedRecordChunk_args();
  args.authenticationToken = authenticationToken;
  args.selector_id = selector_id;
  args.changeset_id = changeset_id;
  args.withPreviewResourcesData = withPreviewResourcesData;
  args.withFullResourcesData = withFullResourcesData;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_getNextModifiedRecordChunk = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_getNextModifiedRecordChunk_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getNextModifiedRecordChunk failed: unknown result');
};
DataStoreClient.prototype.getDatastatus = function(authenticationToken, ids, hwms, selector, withPreviewResourcesData, withFullResourcesData, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDatastatus(authenticationToken, ids, hwms, selector, withPreviewResourcesData, withFullResourcesData);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDatastatus(authenticationToken, ids, hwms, selector, withPreviewResourcesData, withFullResourcesData);
  }
};

DataStoreClient.prototype.send_getDatastatus = function(authenticationToken, ids, hwms, selector, withPreviewResourcesData, withFullResourcesData) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDatastatus', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_getDatastatus_args();
  args.authenticationToken = authenticationToken;
  args.ids = ids;
  args.hwms = hwms;
  args.selector = selector;
  args.withPreviewResourcesData = withPreviewResourcesData;
  args.withFullResourcesData = withFullResourcesData;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_getDatastatus = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_getDatastatus_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDatastatus failed: unknown result');
};
DataStoreClient.prototype.getSelectors = function(authenticationToken, changeset_id, withPreviewResourcesData, withFullResourcesData, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSelectors(authenticationToken, changeset_id, withPreviewResourcesData, withFullResourcesData);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSelectors(authenticationToken, changeset_id, withPreviewResourcesData, withFullResourcesData);
  }
};

DataStoreClient.prototype.send_getSelectors = function(authenticationToken, changeset_id, withPreviewResourcesData, withFullResourcesData) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSelectors', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_getSelectors_args();
  args.authenticationToken = authenticationToken;
  args.changeset_id = changeset_id;
  args.withPreviewResourcesData = withPreviewResourcesData;
  args.withFullResourcesData = withFullResourcesData;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_getSelectors = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_getSelectors_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSelectors failed: unknown result');
};
DataStoreClient.prototype.createSelector = function(authenticationToken, selector, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createSelector(authenticationToken, selector);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createSelector(authenticationToken, selector);
  }
};

DataStoreClient.prototype.send_createSelector = function(authenticationToken, selector) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createSelector', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_createSelector_args();
  args.authenticationToken = authenticationToken;
  args.selector = selector;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_createSelector = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_createSelector_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createSelector failed: unknown result');
};
DataStoreClient.prototype.createDatastatus = function(authenticationToken, datastatus, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createDatastatus(authenticationToken, datastatus);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createDatastatus(authenticationToken, datastatus);
  }
};

DataStoreClient.prototype.send_createDatastatus = function(authenticationToken, datastatus) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createDatastatus', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_createDatastatus_args();
  args.authenticationToken = authenticationToken;
  args.datastatus = datastatus;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_createDatastatus = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_createDatastatus_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createDatastatus failed: unknown result');
};
DataStoreClient.prototype.getAllPointsInBounds = function(selector_id, swlate6, swlone6, nelate6, nelone6, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAllPointsInBounds(selector_id, swlate6, swlone6, nelate6, nelone6);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAllPointsInBounds(selector_id, swlate6, swlone6, nelate6, nelone6);
  }
};

DataStoreClient.prototype.send_getAllPointsInBounds = function(selector_id, swlate6, swlone6, nelate6, nelone6) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAllPointsInBounds', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_getAllPointsInBounds_args();
  args.selector_id = selector_id;
  args.swlate6 = swlate6;
  args.swlone6 = swlone6;
  args.nelate6 = nelate6;
  args.nelone6 = nelone6;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_getAllPointsInBounds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_getAllPointsInBounds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAllPointsInBounds failed: unknown result');
};
DataStoreProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
DataStoreProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

DataStoreProcessor.prototype.process_checkVersion = function(seqid, input, output) {
  var args = new DataStore_checkVersion_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.checkVersion.length === 3) {
    Q.fcall(this._handler.checkVersion, args.clientName, args.hampVersionMajor, args.hampVersionMinor)
      .then(function(result) {
        var result = new DataStore_checkVersion_result({success: result});
        output.writeMessageBegin("checkVersion", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkVersion", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.checkVersion(args.clientName, args.hampVersionMajor, args.hampVersionMinor, function (err, result) {
      if (err == null) {
        var result = new DataStore_checkVersion_result((err != null ? err : {success: result}));
        output.writeMessageBegin("checkVersion", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkVersion", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

DataStoreProcessor.prototype.process_putUser = function(seqid, input, output) {
  var args = new DataStore_putUser_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.putUser.length === 2) {
    Q.fcall(this._handler.putUser, args.authenticationToken, args.user)
      .then(function(result) {
        var result = new DataStore_putUser_result({success: result});
        output.writeMessageBegin("putUser", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          var result = new DataStore_putUser_result(err);
          output.writeMessageBegin("putUser", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("putUser", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.putUser(args.authenticationToken, args.user, function (err, result) {
      if (err == null || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        var result = new DataStore_putUser_result((err != null ? err : {success: result}));
        output.writeMessageBegin("putUser", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("putUser", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

DataStoreProcessor.prototype.process_putPoint = function(seqid, input, output) {
  var args = new DataStore_putPoint_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.putPoint.length === 2) {
    Q.fcall(this._handler.putPoint, args.authenticationToken, args.point)
      .then(function(result) {
        var result = new DataStore_putPoint_result({success: result});
        output.writeMessageBegin("putPoint", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          var result = new DataStore_putPoint_result(err);
          output.writeMessageBegin("putPoint", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("putPoint", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.putPoint(args.authenticationToken, args.point, function (err, result) {
      if (err == null || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        var result = new DataStore_putPoint_result((err != null ? err : {success: result}));
        output.writeMessageBegin("putPoint", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("putPoint", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

DataStoreProcessor.prototype.process_putTrack = function(seqid, input, output) {
  var args = new DataStore_putTrack_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.putTrack.length === 2) {
    Q.fcall(this._handler.putTrack, args.authenticationToken, args.track)
      .then(function(result) {
        var result = new DataStore_putTrack_result({success: result});
        output.writeMessageBegin("putTrack", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          var result = new DataStore_putTrack_result(err);
          output.writeMessageBegin("putTrack", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("putTrack", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.putTrack(args.authenticationToken, args.track, function (err, result) {
      if (err == null || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        var result = new DataStore_putTrack_result((err != null ? err : {success: result}));
        output.writeMessageBegin("putTrack", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("putTrack", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

DataStoreProcessor.prototype.process_putRelation = function(seqid, input, output) {
  var args = new DataStore_putRelation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.putRelation.length === 2) {
    Q.fcall(this._handler.putRelation, args.authenticationToken, args.relation)
      .then(function(result) {
        var result = new DataStore_putRelation_result({success: result});
        output.writeMessageBegin("putRelation", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          var result = new DataStore_putRelation_result(err);
          output.writeMessageBegin("putRelation", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("putRelation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.putRelation(args.authenticationToken, args.relation, function (err, result) {
      if (err == null || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        var result = new DataStore_putRelation_result((err != null ? err : {success: result}));
        output.writeMessageBegin("putRelation", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("putRelation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

DataStoreProcessor.prototype.process_putAnalytics = function(seqid, input, output) {
  var args = new DataStore_putAnalytics_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.putAnalytics.length === 2) {
    Q.fcall(this._handler.putAnalytics, args.authenticationToken, args.analyticsSubmitList)
      .then(function(result) {
        var result = new DataStore_putAnalytics_result({success: result});
        output.writeMessageBegin("putAnalytics", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          var result = new DataStore_putAnalytics_result(err);
          output.writeMessageBegin("putAnalytics", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("putAnalytics", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.putAnalytics(args.authenticationToken, args.analyticsSubmitList, function (err, result) {
      if (err == null || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        var result = new DataStore_putAnalytics_result((err != null ? err : {success: result}));
        output.writeMessageBegin("putAnalytics", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("putAnalytics", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

DataStoreProcessor.prototype.process_getNextModifiedRecordChunk = function(seqid, input, output) {
  var args = new DataStore_getNextModifiedRecordChunk_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getNextModifiedRecordChunk.length === 5) {
    Q.fcall(this._handler.getNextModifiedRecordChunk, args.authenticationToken, args.selector_id, args.changeset_id, args.withPreviewResourcesData, args.withFullResourcesData)
      .then(function(result) {
        var result = new DataStore_getNextModifiedRecordChunk_result({success: result});
        output.writeMessageBegin("getNextModifiedRecordChunk", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          var result = new DataStore_getNextModifiedRecordChunk_result(err);
          output.writeMessageBegin("getNextModifiedRecordChunk", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getNextModifiedRecordChunk", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getNextModifiedRecordChunk(args.authenticationToken, args.selector_id, args.changeset_id, args.withPreviewResourcesData, args.withFullResourcesData, function (err, result) {
      if (err == null || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        var result = new DataStore_getNextModifiedRecordChunk_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getNextModifiedRecordChunk", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNextModifiedRecordChunk", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

DataStoreProcessor.prototype.process_getDatastatus = function(seqid, input, output) {
  var args = new DataStore_getDatastatus_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDatastatus.length === 6) {
    Q.fcall(this._handler.getDatastatus, args.authenticationToken, args.ids, args.hwms, args.selector, args.withPreviewResourcesData, args.withFullResourcesData)
      .then(function(result) {
        var result = new DataStore_getDatastatus_result({success: result});
        output.writeMessageBegin("getDatastatus", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          var result = new DataStore_getDatastatus_result(err);
          output.writeMessageBegin("getDatastatus", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDatastatus", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDatastatus(args.authenticationToken, args.ids, args.hwms, args.selector, args.withPreviewResourcesData, args.withFullResourcesData, function (err, result) {
      if (err == null || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        var result = new DataStore_getDatastatus_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getDatastatus", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDatastatus", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

DataStoreProcessor.prototype.process_getSelectors = function(seqid, input, output) {
  var args = new DataStore_getSelectors_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSelectors.length === 4) {
    Q.fcall(this._handler.getSelectors, args.authenticationToken, args.changeset_id, args.withPreviewResourcesData, args.withFullResourcesData)
      .then(function(result) {
        var result = new DataStore_getSelectors_result({success: result});
        output.writeMessageBegin("getSelectors", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          var result = new DataStore_getSelectors_result(err);
          output.writeMessageBegin("getSelectors", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSelectors", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSelectors(args.authenticationToken, args.changeset_id, args.withPreviewResourcesData, args.withFullResourcesData, function (err, result) {
      if (err == null || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        var result = new DataStore_getSelectors_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getSelectors", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSelectors", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

DataStoreProcessor.prototype.process_createSelector = function(seqid, input, output) {
  var args = new DataStore_createSelector_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createSelector.length === 2) {
    Q.fcall(this._handler.createSelector, args.authenticationToken, args.selector)
      .then(function(result) {
        var result = new DataStore_createSelector_result({success: result});
        output.writeMessageBegin("createSelector", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          var result = new DataStore_createSelector_result(err);
          output.writeMessageBegin("createSelector", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("createSelector", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createSelector(args.authenticationToken, args.selector, function (err, result) {
      if (err == null || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        var result = new DataStore_createSelector_result((err != null ? err : {success: result}));
        output.writeMessageBegin("createSelector", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createSelector", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

DataStoreProcessor.prototype.process_createDatastatus = function(seqid, input, output) {
  var args = new DataStore_createDatastatus_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createDatastatus.length === 2) {
    Q.fcall(this._handler.createDatastatus, args.authenticationToken, args.datastatus)
      .then(function(result) {
        var result = new DataStore_createDatastatus_result({success: result});
        output.writeMessageBegin("createDatastatus", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          var result = new DataStore_createDatastatus_result(err);
          output.writeMessageBegin("createDatastatus", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("createDatastatus", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createDatastatus(args.authenticationToken, args.datastatus, function (err, result) {
      if (err == null || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        var result = new DataStore_createDatastatus_result((err != null ? err : {success: result}));
        output.writeMessageBegin("createDatastatus", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createDatastatus", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

DataStoreProcessor.prototype.process_getAllPointsInBounds = function(seqid, input, output) {
  var args = new DataStore_getAllPointsInBounds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAllPointsInBounds.length === 5) {
    Q.fcall(this._handler.getAllPointsInBounds, args.selector_id, args.swlate6, args.swlone6, args.nelate6, args.nelone6)
      .then(function(result) {
        var result = new DataStore_getAllPointsInBounds_result({success: result});
        output.writeMessageBegin("getAllPointsInBounds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          var result = new DataStore_getAllPointsInBounds_result(err);
          output.writeMessageBegin("getAllPointsInBounds", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getAllPointsInBounds", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAllPointsInBounds(args.selector_id, args.swlate6, args.swlone6, args.nelate6, args.nelone6, function (err, result) {
      if (err == null || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        var result = new DataStore_getAllPointsInBounds_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getAllPointsInBounds", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllPointsInBounds", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

