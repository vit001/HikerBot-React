//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Limits_ttypes = require('./Limits_types');
var Errors_ttypes = require('./Errors_types');
var Types_ttypes = require('./Types_types');
var Authentication_ttypes = require('./Authentication_types');


var ttypes = require('./DataStore_types');
//HELPER FUNCTIONS AND STRUCTURES

var DataStore_checkVersion_args = function(args) {
  this.clientName = null;
  this.hampVersionMajor = 20;
  this.hampVersionMinor = 1;
  if (args) {
    if (args.clientName !== undefined && args.clientName !== null) {
      this.clientName = args.clientName;
    }
    if (args.hampVersionMajor !== undefined && args.hampVersionMajor !== null) {
      this.hampVersionMajor = args.hampVersionMajor;
    }
    if (args.hampVersionMinor !== undefined && args.hampVersionMinor !== null) {
      this.hampVersionMinor = args.hampVersionMinor;
    }
  }
};
DataStore_checkVersion_args.prototype = {};
DataStore_checkVersion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clientName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.hampVersionMajor = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.hampVersionMinor = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_checkVersion_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_checkVersion_args');
  if (this.clientName !== null && this.clientName !== undefined) {
    output.writeFieldBegin('clientName', Thrift.Type.STRING, 1);
    output.writeString(this.clientName);
    output.writeFieldEnd();
  }
  if (this.hampVersionMajor !== null && this.hampVersionMajor !== undefined) {
    output.writeFieldBegin('hampVersionMajor', Thrift.Type.I16, 2);
    output.writeI16(this.hampVersionMajor);
    output.writeFieldEnd();
  }
  if (this.hampVersionMinor !== null && this.hampVersionMinor !== undefined) {
    output.writeFieldBegin('hampVersionMinor', Thrift.Type.I16, 3);
    output.writeI16(this.hampVersionMinor);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_checkVersion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
DataStore_checkVersion_result.prototype = {};
DataStore_checkVersion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_checkVersion_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_checkVersion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_putUser_args = function(args) {
  this.authenticationToken = null;
  this.user = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.user !== undefined && args.user !== null) {
      this.user = new Types_ttypes.User(args.user);
    }
  }
};
DataStore_putUser_args.prototype = {};
DataStore_putUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new Types_ttypes.User();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_putUser_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_putUser_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 2);
    this.user.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_putUser_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Response(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_putUser_result.prototype = {};
DataStore_putUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Response();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_putUser_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_putUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_putPoint_args = function(args) {
  this.authenticationToken = null;
  this.point = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.point !== undefined && args.point !== null) {
      this.point = new Types_ttypes.Point(args.point);
    }
  }
};
DataStore_putPoint_args.prototype = {};
DataStore_putPoint_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.point = new Types_ttypes.Point();
        this.point.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_putPoint_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_putPoint_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.point !== null && this.point !== undefined) {
    output.writeFieldBegin('point', Thrift.Type.STRUCT, 2);
    this.point.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_putPoint_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Response(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_putPoint_result.prototype = {};
DataStore_putPoint_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Response();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_putPoint_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_putPoint_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_putTrack_args = function(args) {
  this.authenticationToken = null;
  this.track = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.track !== undefined && args.track !== null) {
      this.track = new Types_ttypes.Track(args.track);
    }
  }
};
DataStore_putTrack_args.prototype = {};
DataStore_putTrack_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.track = new Types_ttypes.Track();
        this.track.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_putTrack_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_putTrack_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.track !== null && this.track !== undefined) {
    output.writeFieldBegin('track', Thrift.Type.STRUCT, 2);
    this.track.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_putTrack_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Response(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_putTrack_result.prototype = {};
DataStore_putTrack_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Response();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_putTrack_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_putTrack_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_putRelation_args = function(args) {
  this.authenticationToken = null;
  this.relation = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.relation !== undefined && args.relation !== null) {
      this.relation = new Types_ttypes.Relation(args.relation);
    }
  }
};
DataStore_putRelation_args.prototype = {};
DataStore_putRelation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.relation = new Types_ttypes.Relation();
        this.relation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_putRelation_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_putRelation_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.relation !== null && this.relation !== undefined) {
    output.writeFieldBegin('relation', Thrift.Type.STRUCT, 2);
    this.relation.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_putRelation_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Response(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_putRelation_result.prototype = {};
DataStore_putRelation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Response();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_putRelation_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_putRelation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_putAnalytics_args = function(args) {
  this.authenticationToken = null;
  this.analyticsSubmitList = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.analyticsSubmitList !== undefined && args.analyticsSubmitList !== null) {
      this.analyticsSubmitList = Thrift.copyList(args.analyticsSubmitList, [Types_ttypes.AnalyticsSubmit]);
    }
  }
};
DataStore_putAnalytics_args.prototype = {};
DataStore_putAnalytics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.analyticsSubmitList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new Types_ttypes.AnalyticsSubmit();
          elem6.read(input);
          this.analyticsSubmitList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_putAnalytics_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_putAnalytics_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.analyticsSubmitList !== null && this.analyticsSubmitList !== undefined) {
    output.writeFieldBegin('analyticsSubmitList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.analyticsSubmitList.length);
    for (var iter7 in this.analyticsSubmitList)
    {
      if (this.analyticsSubmitList.hasOwnProperty(iter7))
      {
        iter7 = this.analyticsSubmitList[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_putAnalytics_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Response(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_putAnalytics_result.prototype = {};
DataStore_putAnalytics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Response();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_putAnalytics_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_putAnalytics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_putSignalStrength_args = function(args) {
  this.authenticationToken = null;
  this.signalStrengthSubmitList = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.signalStrengthSubmitList !== undefined && args.signalStrengthSubmitList !== null) {
      this.signalStrengthSubmitList = Thrift.copyList(args.signalStrengthSubmitList, [Types_ttypes.SignalStrengthSubmit]);
    }
  }
};
DataStore_putSignalStrength_args.prototype = {};
DataStore_putSignalStrength_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.signalStrengthSubmitList = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new Types_ttypes.SignalStrengthSubmit();
          elem14.read(input);
          this.signalStrengthSubmitList.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_putSignalStrength_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_putSignalStrength_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.signalStrengthSubmitList !== null && this.signalStrengthSubmitList !== undefined) {
    output.writeFieldBegin('signalStrengthSubmitList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.signalStrengthSubmitList.length);
    for (var iter15 in this.signalStrengthSubmitList)
    {
      if (this.signalStrengthSubmitList.hasOwnProperty(iter15))
      {
        iter15 = this.signalStrengthSubmitList[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_putSignalStrength_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Response(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_putSignalStrength_result.prototype = {};
DataStore_putSignalStrength_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Response();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_putSignalStrength_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_putSignalStrength_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_putContestSet_args = function(args) {
  this.authenticationToken = null;
  this.contestSet = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.contestSet !== undefined && args.contestSet !== null) {
      this.contestSet = Thrift.copyList(args.contestSet, [Types_ttypes.Contest]);
    }
  }
};
DataStore_putContestSet_args.prototype = {};
DataStore_putContestSet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size16 = 0;
        var _rtmp320;
        this.contestSet = [];
        var _etype19 = 0;
        _rtmp320 = input.readSetBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new Types_ttypes.Contest();
          elem22.read(input);
          this.contestSet.push(elem22);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_putContestSet_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_putContestSet_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.contestSet !== null && this.contestSet !== undefined) {
    output.writeFieldBegin('contestSet', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRUCT, this.contestSet.length);
    for (var iter23 in this.contestSet)
    {
      if (this.contestSet.hasOwnProperty(iter23))
      {
        iter23 = this.contestSet[iter23];
        iter23.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_putContestSet_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Response(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_putContestSet_result.prototype = {};
DataStore_putContestSet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Response();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_putContestSet_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_putContestSet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_putNotificationSet_args = function(args) {
  this.authenticationToken = null;
  this.notificationSet = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.notificationSet !== undefined && args.notificationSet !== null) {
      this.notificationSet = Thrift.copyList(args.notificationSet, [Types_ttypes.Notification]);
    }
  }
};
DataStore_putNotificationSet_args.prototype = {};
DataStore_putNotificationSet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.SET) {
        var _size24 = 0;
        var _rtmp328;
        this.notificationSet = [];
        var _etype27 = 0;
        _rtmp328 = input.readSetBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new Types_ttypes.Notification();
          elem30.read(input);
          this.notificationSet.push(elem30);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_putNotificationSet_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_putNotificationSet_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.notificationSet !== null && this.notificationSet !== undefined) {
    output.writeFieldBegin('notificationSet', Thrift.Type.SET, 2);
    output.writeSetBegin(Thrift.Type.STRUCT, this.notificationSet.length);
    for (var iter31 in this.notificationSet)
    {
      if (this.notificationSet.hasOwnProperty(iter31))
      {
        iter31 = this.notificationSet[iter31];
        iter31.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_putNotificationSet_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Response(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_putNotificationSet_result.prototype = {};
DataStore_putNotificationSet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Response();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_putNotificationSet_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_putNotificationSet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_putSelector_args = function(args) {
  this.authenticationToken = null;
  this.selector = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.selector !== undefined && args.selector !== null) {
      this.selector = new Types_ttypes.Selector(args.selector);
    }
  }
};
DataStore_putSelector_args.prototype = {};
DataStore_putSelector_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.selector = new Types_ttypes.Selector();
        this.selector.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_putSelector_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_putSelector_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.selector !== null && this.selector !== undefined) {
    output.writeFieldBegin('selector', Thrift.Type.STRUCT, 2);
    this.selector.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_putSelector_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Response(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_putSelector_result.prototype = {};
DataStore_putSelector_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Response();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_putSelector_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_putSelector_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_getNextModifiedRecordChunk_args = function(args) {
  this.authenticationToken = null;
  this.selector_id = null;
  this.changeset_id = null;
  this.withPreviewResourcesData = null;
  this.withFullResourcesData = null;
  this.isInitialSync = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.selector_id !== undefined && args.selector_id !== null) {
      this.selector_id = args.selector_id;
    }
    if (args.changeset_id !== undefined && args.changeset_id !== null) {
      this.changeset_id = args.changeset_id;
    }
    if (args.withPreviewResourcesData !== undefined && args.withPreviewResourcesData !== null) {
      this.withPreviewResourcesData = args.withPreviewResourcesData;
    }
    if (args.withFullResourcesData !== undefined && args.withFullResourcesData !== null) {
      this.withFullResourcesData = args.withFullResourcesData;
    }
    if (args.isInitialSync !== undefined && args.isInitialSync !== null) {
      this.isInitialSync = args.isInitialSync;
    }
  }
};
DataStore_getNextModifiedRecordChunk_args.prototype = {};
DataStore_getNextModifiedRecordChunk_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.selector_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.changeset_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.withPreviewResourcesData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.withFullResourcesData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.isInitialSync = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getNextModifiedRecordChunk_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getNextModifiedRecordChunk_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.selector_id !== null && this.selector_id !== undefined) {
    output.writeFieldBegin('selector_id', Thrift.Type.I64, 2);
    output.writeI64(this.selector_id);
    output.writeFieldEnd();
  }
  if (this.changeset_id !== null && this.changeset_id !== undefined) {
    output.writeFieldBegin('changeset_id', Thrift.Type.I64, 3);
    output.writeI64(this.changeset_id);
    output.writeFieldEnd();
  }
  if (this.withPreviewResourcesData !== null && this.withPreviewResourcesData !== undefined) {
    output.writeFieldBegin('withPreviewResourcesData', Thrift.Type.BOOL, 4);
    output.writeBool(this.withPreviewResourcesData);
    output.writeFieldEnd();
  }
  if (this.withFullResourcesData !== null && this.withFullResourcesData !== undefined) {
    output.writeFieldBegin('withFullResourcesData', Thrift.Type.BOOL, 5);
    output.writeBool(this.withFullResourcesData);
    output.writeFieldEnd();
  }
  if (this.isInitialSync !== null && this.isInitialSync !== undefined) {
    output.writeFieldBegin('isInitialSync', Thrift.Type.BOOL, 6);
    output.writeBool(this.isInitialSync);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_getNextModifiedRecordChunk_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Types_ttypes.Response]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_getNextModifiedRecordChunk_result.prototype = {};
DataStore_getNextModifiedRecordChunk_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.success = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new Types_ttypes.Response();
          elem38.read(input);
          this.success.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getNextModifiedRecordChunk_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getNextModifiedRecordChunk_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter39 in this.success)
    {
      if (this.success.hasOwnProperty(iter39))
      {
        iter39 = this.success[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_getNextModifiedRecordChunkLastVerOnly_args = function(args) {
  this.authenticationToken = null;
  this.selector_id = null;
  this.datatypes = null;
  this.changeset_id = null;
  this.withPreviewResourcesData = null;
  this.withFullResourcesData = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.selector_id !== undefined && args.selector_id !== null) {
      this.selector_id = args.selector_id;
    }
    if (args.datatypes !== undefined && args.datatypes !== null) {
      this.datatypes = Thrift.copyList(args.datatypes, [null]);
    }
    if (args.changeset_id !== undefined && args.changeset_id !== null) {
      this.changeset_id = args.changeset_id;
    }
    if (args.withPreviewResourcesData !== undefined && args.withPreviewResourcesData !== null) {
      this.withPreviewResourcesData = args.withPreviewResourcesData;
    }
    if (args.withFullResourcesData !== undefined && args.withFullResourcesData !== null) {
      this.withFullResourcesData = args.withFullResourcesData;
    }
  }
};
DataStore_getNextModifiedRecordChunkLastVerOnly_args.prototype = {};
DataStore_getNextModifiedRecordChunkLastVerOnly_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.selector_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size40 = 0;
        var _rtmp344;
        this.datatypes = [];
        var _etype43 = 0;
        _rtmp344 = input.readSetBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = input.readI32();
          this.datatypes.push(elem46);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.changeset_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.withPreviewResourcesData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.withFullResourcesData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getNextModifiedRecordChunkLastVerOnly_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getNextModifiedRecordChunkLastVerOnly_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.selector_id !== null && this.selector_id !== undefined) {
    output.writeFieldBegin('selector_id', Thrift.Type.I64, 2);
    output.writeI64(this.selector_id);
    output.writeFieldEnd();
  }
  if (this.datatypes !== null && this.datatypes !== undefined) {
    output.writeFieldBegin('datatypes', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.I32, this.datatypes.length);
    for (var iter47 in this.datatypes)
    {
      if (this.datatypes.hasOwnProperty(iter47))
      {
        iter47 = this.datatypes[iter47];
        output.writeI32(iter47);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.changeset_id !== null && this.changeset_id !== undefined) {
    output.writeFieldBegin('changeset_id', Thrift.Type.I64, 4);
    output.writeI64(this.changeset_id);
    output.writeFieldEnd();
  }
  if (this.withPreviewResourcesData !== null && this.withPreviewResourcesData !== undefined) {
    output.writeFieldBegin('withPreviewResourcesData', Thrift.Type.BOOL, 5);
    output.writeBool(this.withPreviewResourcesData);
    output.writeFieldEnd();
  }
  if (this.withFullResourcesData !== null && this.withFullResourcesData !== undefined) {
    output.writeFieldBegin('withFullResourcesData', Thrift.Type.BOOL, 6);
    output.writeBool(this.withFullResourcesData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_getNextModifiedRecordChunkLastVerOnly_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Types_ttypes.Response]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_getNextModifiedRecordChunkLastVerOnly_result.prototype = {};
DataStore_getNextModifiedRecordChunkLastVerOnly_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.success = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new Types_ttypes.Response();
          elem54.read(input);
          this.success.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getNextModifiedRecordChunkLastVerOnly_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getNextModifiedRecordChunkLastVerOnly_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter55 in this.success)
    {
      if (this.success.hasOwnProperty(iter55))
      {
        iter55 = this.success[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_getNextModifiedRecordChunkTracksLastVerOnly_args = function(args) {
  this.authenticationToken = null;
  this.selector_id = null;
  this.datatypes = null;
  this.changeset_id = null;
  this.withPreviewResourcesData = null;
  this.withFullResourcesData = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.selector_id !== undefined && args.selector_id !== null) {
      this.selector_id = args.selector_id;
    }
    if (args.datatypes !== undefined && args.datatypes !== null) {
      this.datatypes = Thrift.copyList(args.datatypes, [null]);
    }
    if (args.changeset_id !== undefined && args.changeset_id !== null) {
      this.changeset_id = args.changeset_id;
    }
    if (args.withPreviewResourcesData !== undefined && args.withPreviewResourcesData !== null) {
      this.withPreviewResourcesData = args.withPreviewResourcesData;
    }
    if (args.withFullResourcesData !== undefined && args.withFullResourcesData !== null) {
      this.withFullResourcesData = args.withFullResourcesData;
    }
  }
};
DataStore_getNextModifiedRecordChunkTracksLastVerOnly_args.prototype = {};
DataStore_getNextModifiedRecordChunkTracksLastVerOnly_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.selector_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size56 = 0;
        var _rtmp360;
        this.datatypes = [];
        var _etype59 = 0;
        _rtmp360 = input.readSetBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = input.readI32();
          this.datatypes.push(elem62);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.changeset_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.withPreviewResourcesData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.withFullResourcesData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getNextModifiedRecordChunkTracksLastVerOnly_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getNextModifiedRecordChunkTracksLastVerOnly_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.selector_id !== null && this.selector_id !== undefined) {
    output.writeFieldBegin('selector_id', Thrift.Type.I64, 2);
    output.writeI64(this.selector_id);
    output.writeFieldEnd();
  }
  if (this.datatypes !== null && this.datatypes !== undefined) {
    output.writeFieldBegin('datatypes', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.I32, this.datatypes.length);
    for (var iter63 in this.datatypes)
    {
      if (this.datatypes.hasOwnProperty(iter63))
      {
        iter63 = this.datatypes[iter63];
        output.writeI32(iter63);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.changeset_id !== null && this.changeset_id !== undefined) {
    output.writeFieldBegin('changeset_id', Thrift.Type.I64, 4);
    output.writeI64(this.changeset_id);
    output.writeFieldEnd();
  }
  if (this.withPreviewResourcesData !== null && this.withPreviewResourcesData !== undefined) {
    output.writeFieldBegin('withPreviewResourcesData', Thrift.Type.BOOL, 5);
    output.writeBool(this.withPreviewResourcesData);
    output.writeFieldEnd();
  }
  if (this.withFullResourcesData !== null && this.withFullResourcesData !== undefined) {
    output.writeFieldBegin('withFullResourcesData', Thrift.Type.BOOL, 6);
    output.writeBool(this.withFullResourcesData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_getNextModifiedRecordChunkTracksLastVerOnly_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Types_ttypes.Response]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_getNextModifiedRecordChunkTracksLastVerOnly_result.prototype = {};
DataStore_getNextModifiedRecordChunkTracksLastVerOnly_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.success = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new Types_ttypes.Response();
          elem70.read(input);
          this.success.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getNextModifiedRecordChunkTracksLastVerOnly_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getNextModifiedRecordChunkTracksLastVerOnly_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter71 in this.success)
    {
      if (this.success.hasOwnProperty(iter71))
      {
        iter71 = this.success[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_getUser_args = function(args) {
  this.authenticationToken = null;
  this.user_id = null;
  this.withPreviewResourcesData = null;
  this.withFullResourcesData = null;
  this.withAllCrumbs = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.user_id !== undefined && args.user_id !== null) {
      this.user_id = args.user_id;
    }
    if (args.withPreviewResourcesData !== undefined && args.withPreviewResourcesData !== null) {
      this.withPreviewResourcesData = args.withPreviewResourcesData;
    }
    if (args.withFullResourcesData !== undefined && args.withFullResourcesData !== null) {
      this.withFullResourcesData = args.withFullResourcesData;
    }
    if (args.withAllCrumbs !== undefined && args.withAllCrumbs !== null) {
      this.withAllCrumbs = args.withAllCrumbs;
    }
  }
};
DataStore_getUser_args.prototype = {};
DataStore_getUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.user_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.withPreviewResourcesData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.withFullResourcesData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.withAllCrumbs = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getUser_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getUser_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.user_id !== null && this.user_id !== undefined) {
    output.writeFieldBegin('user_id', Thrift.Type.I64, 2);
    output.writeI64(this.user_id);
    output.writeFieldEnd();
  }
  if (this.withPreviewResourcesData !== null && this.withPreviewResourcesData !== undefined) {
    output.writeFieldBegin('withPreviewResourcesData', Thrift.Type.BOOL, 3);
    output.writeBool(this.withPreviewResourcesData);
    output.writeFieldEnd();
  }
  if (this.withFullResourcesData !== null && this.withFullResourcesData !== undefined) {
    output.writeFieldBegin('withFullResourcesData', Thrift.Type.BOOL, 4);
    output.writeBool(this.withFullResourcesData);
    output.writeFieldEnd();
  }
  if (this.withAllCrumbs !== null && this.withAllCrumbs !== undefined) {
    output.writeFieldBegin('withAllCrumbs', Thrift.Type.BOOL, 5);
    output.writeBool(this.withAllCrumbs);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_getUser_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Response(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_getUser_result.prototype = {};
DataStore_getUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Response();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getUser_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_getDatastatus_args = function(args) {
  this.authenticationToken = null;
  this.ids = null;
  this.hwms = null;
  this.selector = null;
  this.withPreviewResourcesData = null;
  this.withFullResourcesData = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.ids !== undefined && args.ids !== null) {
      this.ids = Thrift.copyList(args.ids, [null]);
    }
    if (args.hwms !== undefined && args.hwms !== null) {
      this.hwms = Thrift.copyList(args.hwms, [null]);
    }
    if (args.selector !== undefined && args.selector !== null) {
      this.selector = new Types_ttypes.Selector(args.selector);
    }
    if (args.withPreviewResourcesData !== undefined && args.withPreviewResourcesData !== null) {
      this.withPreviewResourcesData = args.withPreviewResourcesData;
    }
    if (args.withFullResourcesData !== undefined && args.withFullResourcesData !== null) {
      this.withFullResourcesData = args.withFullResourcesData;
    }
  }
};
DataStore_getDatastatus_args.prototype = {};
DataStore_getDatastatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.ids = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = input.readI64();
          this.ids.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size79 = 0;
        var _rtmp383;
        this.hwms = [];
        var _etype82 = 0;
        _rtmp383 = input.readListBegin();
        _etype82 = _rtmp383.etype;
        _size79 = _rtmp383.size;
        for (var _i84 = 0; _i84 < _size79; ++_i84)
        {
          var elem85 = null;
          elem85 = input.readI64();
          this.hwms.push(elem85);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.selector = new Types_ttypes.Selector();
        this.selector.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.withPreviewResourcesData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.withFullResourcesData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getDatastatus_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getDatastatus_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.ids.length);
    for (var iter86 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter86))
      {
        iter86 = this.ids[iter86];
        output.writeI64(iter86);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.hwms !== null && this.hwms !== undefined) {
    output.writeFieldBegin('hwms', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I64, this.hwms.length);
    for (var iter87 in this.hwms)
    {
      if (this.hwms.hasOwnProperty(iter87))
      {
        iter87 = this.hwms[iter87];
        output.writeI64(iter87);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.selector !== null && this.selector !== undefined) {
    output.writeFieldBegin('selector', Thrift.Type.STRUCT, 4);
    this.selector.write(output);
    output.writeFieldEnd();
  }
  if (this.withPreviewResourcesData !== null && this.withPreviewResourcesData !== undefined) {
    output.writeFieldBegin('withPreviewResourcesData', Thrift.Type.BOOL, 5);
    output.writeBool(this.withPreviewResourcesData);
    output.writeFieldEnd();
  }
  if (this.withFullResourcesData !== null && this.withFullResourcesData !== undefined) {
    output.writeFieldBegin('withFullResourcesData', Thrift.Type.BOOL, 6);
    output.writeBool(this.withFullResourcesData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_getDatastatus_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Types_ttypes.Datastatus]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_getDatastatus_result.prototype = {};
DataStore_getDatastatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.success = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = new Types_ttypes.Datastatus();
          elem94.read(input);
          this.success.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getDatastatus_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getDatastatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter95 in this.success)
    {
      if (this.success.hasOwnProperty(iter95))
      {
        iter95 = this.success[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_getSelectors_args = function(args) {
  this.authenticationToken = null;
  this.changeset_id = null;
  this.withPreviewResourcesData = null;
  this.withFullResourcesData = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.changeset_id !== undefined && args.changeset_id !== null) {
      this.changeset_id = args.changeset_id;
    }
    if (args.withPreviewResourcesData !== undefined && args.withPreviewResourcesData !== null) {
      this.withPreviewResourcesData = args.withPreviewResourcesData;
    }
    if (args.withFullResourcesData !== undefined && args.withFullResourcesData !== null) {
      this.withFullResourcesData = args.withFullResourcesData;
    }
  }
};
DataStore_getSelectors_args.prototype = {};
DataStore_getSelectors_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.changeset_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.withPreviewResourcesData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.withFullResourcesData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getSelectors_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getSelectors_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.changeset_id !== null && this.changeset_id !== undefined) {
    output.writeFieldBegin('changeset_id', Thrift.Type.I64, 2);
    output.writeI64(this.changeset_id);
    output.writeFieldEnd();
  }
  if (this.withPreviewResourcesData !== null && this.withPreviewResourcesData !== undefined) {
    output.writeFieldBegin('withPreviewResourcesData', Thrift.Type.BOOL, 3);
    output.writeBool(this.withPreviewResourcesData);
    output.writeFieldEnd();
  }
  if (this.withFullResourcesData !== null && this.withFullResourcesData !== undefined) {
    output.writeFieldBegin('withFullResourcesData', Thrift.Type.BOOL, 4);
    output.writeBool(this.withFullResourcesData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_getSelectors_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Types_ttypes.Response]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_getSelectors_result.prototype = {};
DataStore_getSelectors_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.success = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = new Types_ttypes.Response();
          elem102.read(input);
          this.success.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getSelectors_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getSelectors_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter103 in this.success)
    {
      if (this.success.hasOwnProperty(iter103))
      {
        iter103 = this.success[iter103];
        iter103.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_getOriginalResource_args = function(args) {
  this.authenticationToken = null;
  this.id = null;
  this.version = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
  }
};
DataStore_getOriginalResource_args.prototype = {};
DataStore_getOriginalResource_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getOriginalResource_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getOriginalResource_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 2);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 3);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_getOriginalResource_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Resource(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_getOriginalResource_result.prototype = {};
DataStore_getOriginalResource_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Resource();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getOriginalResource_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getOriginalResource_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_createDatastatus_args = function(args) {
  this.authenticationToken = null;
  this.datastatus = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.datastatus !== undefined && args.datastatus !== null) {
      this.datastatus = new Types_ttypes.Datastatus(args.datastatus);
    }
  }
};
DataStore_createDatastatus_args.prototype = {};
DataStore_createDatastatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.datastatus = new Types_ttypes.Datastatus();
        this.datastatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_createDatastatus_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_createDatastatus_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.datastatus !== null && this.datastatus !== undefined) {
    output.writeFieldBegin('datastatus', Thrift.Type.STRUCT, 2);
    this.datastatus.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_createDatastatus_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Datastatus(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_createDatastatus_result.prototype = {};
DataStore_createDatastatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Datastatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_createDatastatus_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_createDatastatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_getAllMarkersInBounds_args = function(args) {
  this.selector_id = null;
  this.zoom = null;
  this.swlate6 = null;
  this.swlone6 = null;
  this.nelate6 = null;
  this.nelone6 = null;
  if (args) {
    if (args.selector_id !== undefined && args.selector_id !== null) {
      this.selector_id = args.selector_id;
    }
    if (args.zoom !== undefined && args.zoom !== null) {
      this.zoom = args.zoom;
    }
    if (args.swlate6 !== undefined && args.swlate6 !== null) {
      this.swlate6 = args.swlate6;
    }
    if (args.swlone6 !== undefined && args.swlone6 !== null) {
      this.swlone6 = args.swlone6;
    }
    if (args.nelate6 !== undefined && args.nelate6 !== null) {
      this.nelate6 = args.nelate6;
    }
    if (args.nelone6 !== undefined && args.nelone6 !== null) {
      this.nelone6 = args.nelone6;
    }
  }
};
DataStore_getAllMarkersInBounds_args.prototype = {};
DataStore_getAllMarkersInBounds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.selector_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.zoom = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.swlate6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.swlone6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.nelate6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.nelone6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getAllMarkersInBounds_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getAllMarkersInBounds_args');
  if (this.selector_id !== null && this.selector_id !== undefined) {
    output.writeFieldBegin('selector_id', Thrift.Type.I64, 1);
    output.writeI64(this.selector_id);
    output.writeFieldEnd();
  }
  if (this.zoom !== null && this.zoom !== undefined) {
    output.writeFieldBegin('zoom', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.zoom);
    output.writeFieldEnd();
  }
  if (this.swlate6 !== null && this.swlate6 !== undefined) {
    output.writeFieldBegin('swlate6', Thrift.Type.I32, 3);
    output.writeI32(this.swlate6);
    output.writeFieldEnd();
  }
  if (this.swlone6 !== null && this.swlone6 !== undefined) {
    output.writeFieldBegin('swlone6', Thrift.Type.I32, 4);
    output.writeI32(this.swlone6);
    output.writeFieldEnd();
  }
  if (this.nelate6 !== null && this.nelate6 !== undefined) {
    output.writeFieldBegin('nelate6', Thrift.Type.I32, 5);
    output.writeI32(this.nelate6);
    output.writeFieldEnd();
  }
  if (this.nelone6 !== null && this.nelone6 !== undefined) {
    output.writeFieldBegin('nelone6', Thrift.Type.I32, 6);
    output.writeI32(this.nelone6);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_getAllMarkersInBounds_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Types_ttypes.Marker]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_getAllMarkersInBounds_result.prototype = {};
DataStore_getAllMarkersInBounds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.success = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = new Types_ttypes.Marker();
          elem110.read(input);
          this.success.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getAllMarkersInBounds_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getAllMarkersInBounds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter111 in this.success)
    {
      if (this.success.hasOwnProperty(iter111))
      {
        iter111 = this.success[iter111];
        iter111.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_getAllTracksInBounds_args = function(args) {
  this.selector_id = null;
  this.zoom = null;
  this.swlate6 = null;
  this.swlone6 = null;
  this.nelate6 = null;
  this.nelone6 = null;
  if (args) {
    if (args.selector_id !== undefined && args.selector_id !== null) {
      this.selector_id = args.selector_id;
    }
    if (args.zoom !== undefined && args.zoom !== null) {
      this.zoom = args.zoom;
    }
    if (args.swlate6 !== undefined && args.swlate6 !== null) {
      this.swlate6 = args.swlate6;
    }
    if (args.swlone6 !== undefined && args.swlone6 !== null) {
      this.swlone6 = args.swlone6;
    }
    if (args.nelate6 !== undefined && args.nelate6 !== null) {
      this.nelate6 = args.nelate6;
    }
    if (args.nelone6 !== undefined && args.nelone6 !== null) {
      this.nelone6 = args.nelone6;
    }
  }
};
DataStore_getAllTracksInBounds_args.prototype = {};
DataStore_getAllTracksInBounds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.selector_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.zoom = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.swlate6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.swlone6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.nelate6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.nelone6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getAllTracksInBounds_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getAllTracksInBounds_args');
  if (this.selector_id !== null && this.selector_id !== undefined) {
    output.writeFieldBegin('selector_id', Thrift.Type.I64, 1);
    output.writeI64(this.selector_id);
    output.writeFieldEnd();
  }
  if (this.zoom !== null && this.zoom !== undefined) {
    output.writeFieldBegin('zoom', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.zoom);
    output.writeFieldEnd();
  }
  if (this.swlate6 !== null && this.swlate6 !== undefined) {
    output.writeFieldBegin('swlate6', Thrift.Type.I32, 3);
    output.writeI32(this.swlate6);
    output.writeFieldEnd();
  }
  if (this.swlone6 !== null && this.swlone6 !== undefined) {
    output.writeFieldBegin('swlone6', Thrift.Type.I32, 4);
    output.writeI32(this.swlone6);
    output.writeFieldEnd();
  }
  if (this.nelate6 !== null && this.nelate6 !== undefined) {
    output.writeFieldBegin('nelate6', Thrift.Type.I32, 5);
    output.writeI32(this.nelate6);
    output.writeFieldEnd();
  }
  if (this.nelone6 !== null && this.nelone6 !== undefined) {
    output.writeFieldBegin('nelone6', Thrift.Type.I32, 6);
    output.writeI32(this.nelone6);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_getAllTracksInBounds_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Types_ttypes.Track]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_getAllTracksInBounds_result.prototype = {};
DataStore_getAllTracksInBounds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.success = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = new Types_ttypes.Track();
          elem118.read(input);
          this.success.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getAllTracksInBounds_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getAllTracksInBounds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter119 in this.success)
    {
      if (this.success.hasOwnProperty(iter119))
      {
        iter119 = this.success[iter119];
        iter119.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_getPoint_args = function(args) {
  this.authenticationToken = null;
  this.id = null;
  this.version = null;
  this.withPreviewResourcesData = null;
  this.withFullResourcesData = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.withPreviewResourcesData !== undefined && args.withPreviewResourcesData !== null) {
      this.withPreviewResourcesData = args.withPreviewResourcesData;
    }
    if (args.withFullResourcesData !== undefined && args.withFullResourcesData !== null) {
      this.withFullResourcesData = args.withFullResourcesData;
    }
  }
};
DataStore_getPoint_args.prototype = {};
DataStore_getPoint_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.withPreviewResourcesData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.withFullResourcesData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getPoint_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getPoint_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 2);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 3);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.withPreviewResourcesData !== null && this.withPreviewResourcesData !== undefined) {
    output.writeFieldBegin('withPreviewResourcesData', Thrift.Type.BOOL, 4);
    output.writeBool(this.withPreviewResourcesData);
    output.writeFieldEnd();
  }
  if (this.withFullResourcesData !== null && this.withFullResourcesData !== undefined) {
    output.writeFieldBegin('withFullResourcesData', Thrift.Type.BOOL, 5);
    output.writeBool(this.withFullResourcesData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_getPoint_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Point(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_getPoint_result.prototype = {};
DataStore_getPoint_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Point();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getPoint_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getPoint_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_getTrack_args = function(args) {
  this.authenticationToken = null;
  this.id = null;
  this.version = null;
  this.withPreviewResourcesData = null;
  this.withFullResourcesData = null;
  this.withAllPathPoints = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.withPreviewResourcesData !== undefined && args.withPreviewResourcesData !== null) {
      this.withPreviewResourcesData = args.withPreviewResourcesData;
    }
    if (args.withFullResourcesData !== undefined && args.withFullResourcesData !== null) {
      this.withFullResourcesData = args.withFullResourcesData;
    }
    if (args.withAllPathPoints !== undefined && args.withAllPathPoints !== null) {
      this.withAllPathPoints = args.withAllPathPoints;
    }
  }
};
DataStore_getTrack_args.prototype = {};
DataStore_getTrack_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.withPreviewResourcesData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.withFullResourcesData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.withAllPathPoints = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getTrack_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getTrack_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 2);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 3);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.withPreviewResourcesData !== null && this.withPreviewResourcesData !== undefined) {
    output.writeFieldBegin('withPreviewResourcesData', Thrift.Type.BOOL, 4);
    output.writeBool(this.withPreviewResourcesData);
    output.writeFieldEnd();
  }
  if (this.withFullResourcesData !== null && this.withFullResourcesData !== undefined) {
    output.writeFieldBegin('withFullResourcesData', Thrift.Type.BOOL, 5);
    output.writeBool(this.withFullResourcesData);
    output.writeFieldEnd();
  }
  if (this.withAllPathPoints !== null && this.withAllPathPoints !== undefined) {
    output.writeFieldBegin('withAllPathPoints', Thrift.Type.BOOL, 6);
    output.writeBool(this.withAllPathPoints);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_getTrack_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Track(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_getTrack_result.prototype = {};
DataStore_getTrack_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Track();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getTrack_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getTrack_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_getRelation_args = function(args) {
  this.authenticationToken = null;
  this.id = null;
  this.version = null;
  this.withPreviewResourcesData = null;
  this.withFullResourcesData = null;
  if (args) {
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.withPreviewResourcesData !== undefined && args.withPreviewResourcesData !== null) {
      this.withPreviewResourcesData = args.withPreviewResourcesData;
    }
    if (args.withFullResourcesData !== undefined && args.withFullResourcesData !== null) {
      this.withFullResourcesData = args.withFullResourcesData;
    }
  }
};
DataStore_getRelation_args.prototype = {};
DataStore_getRelation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.withPreviewResourcesData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.withFullResourcesData = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getRelation_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getRelation_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 2);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 3);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.withPreviewResourcesData !== null && this.withPreviewResourcesData !== undefined) {
    output.writeFieldBegin('withPreviewResourcesData', Thrift.Type.BOOL, 4);
    output.writeBool(this.withPreviewResourcesData);
    output.writeFieldEnd();
  }
  if (this.withFullResourcesData !== null && this.withFullResourcesData !== undefined) {
    output.writeFieldBegin('withFullResourcesData', Thrift.Type.BOOL, 5);
    output.writeBool(this.withFullResourcesData);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_getRelation_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.Relation(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_getRelation_result.prototype = {};
DataStore_getRelation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.Relation();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getRelation_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getRelation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_getAllPointsInBounds_args = function(args) {
  this.selector_id = null;
  this.swlate6 = null;
  this.swlone6 = null;
  this.nelate6 = null;
  this.nelone6 = null;
  if (args) {
    if (args.selector_id !== undefined && args.selector_id !== null) {
      this.selector_id = args.selector_id;
    }
    if (args.swlate6 !== undefined && args.swlate6 !== null) {
      this.swlate6 = args.swlate6;
    }
    if (args.swlone6 !== undefined && args.swlone6 !== null) {
      this.swlone6 = args.swlone6;
    }
    if (args.nelate6 !== undefined && args.nelate6 !== null) {
      this.nelate6 = args.nelate6;
    }
    if (args.nelone6 !== undefined && args.nelone6 !== null) {
      this.nelone6 = args.nelone6;
    }
  }
};
DataStore_getAllPointsInBounds_args.prototype = {};
DataStore_getAllPointsInBounds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.selector_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.swlate6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.swlone6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.nelate6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.nelone6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getAllPointsInBounds_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getAllPointsInBounds_args');
  if (this.selector_id !== null && this.selector_id !== undefined) {
    output.writeFieldBegin('selector_id', Thrift.Type.I64, 1);
    output.writeI64(this.selector_id);
    output.writeFieldEnd();
  }
  if (this.swlate6 !== null && this.swlate6 !== undefined) {
    output.writeFieldBegin('swlate6', Thrift.Type.I32, 2);
    output.writeI32(this.swlate6);
    output.writeFieldEnd();
  }
  if (this.swlone6 !== null && this.swlone6 !== undefined) {
    output.writeFieldBegin('swlone6', Thrift.Type.I32, 3);
    output.writeI32(this.swlone6);
    output.writeFieldEnd();
  }
  if (this.nelate6 !== null && this.nelate6 !== undefined) {
    output.writeFieldBegin('nelate6', Thrift.Type.I32, 4);
    output.writeI32(this.nelate6);
    output.writeFieldEnd();
  }
  if (this.nelone6 !== null && this.nelone6 !== undefined) {
    output.writeFieldBegin('nelone6', Thrift.Type.I32, 5);
    output.writeI32(this.nelone6);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_getAllPointsInBounds_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [Types_ttypes.Point]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_getAllPointsInBounds_result.prototype = {};
DataStore_getAllPointsInBounds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.success = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = new Types_ttypes.Point();
          elem126.read(input);
          this.success.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getAllPointsInBounds_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getAllPointsInBounds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter127 in this.success)
    {
      if (this.success.hasOwnProperty(iter127))
      {
        iter127 = this.success[iter127];
        iter127.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_getAllObjectsInBounds_args = function(args) {
  this.selector_id = null;
  this.swlate6 = null;
  this.swlone6 = null;
  this.nelate6 = null;
  this.nelone6 = null;
  this.zoom = null;
  if (args) {
    if (args.selector_id !== undefined && args.selector_id !== null) {
      this.selector_id = args.selector_id;
    }
    if (args.swlate6 !== undefined && args.swlate6 !== null) {
      this.swlate6 = args.swlate6;
    }
    if (args.swlone6 !== undefined && args.swlone6 !== null) {
      this.swlone6 = args.swlone6;
    }
    if (args.nelate6 !== undefined && args.nelate6 !== null) {
      this.nelate6 = args.nelate6;
    }
    if (args.nelone6 !== undefined && args.nelone6 !== null) {
      this.nelone6 = args.nelone6;
    }
    if (args.zoom !== undefined && args.zoom !== null) {
      this.zoom = args.zoom;
    }
  }
};
DataStore_getAllObjectsInBounds_args.prototype = {};
DataStore_getAllObjectsInBounds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.selector_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.swlate6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.swlone6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.nelate6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.nelone6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.zoom = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getAllObjectsInBounds_args.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getAllObjectsInBounds_args');
  if (this.selector_id !== null && this.selector_id !== undefined) {
    output.writeFieldBegin('selector_id', Thrift.Type.I64, 1);
    output.writeI64(this.selector_id);
    output.writeFieldEnd();
  }
  if (this.swlate6 !== null && this.swlate6 !== undefined) {
    output.writeFieldBegin('swlate6', Thrift.Type.I32, 2);
    output.writeI32(this.swlate6);
    output.writeFieldEnd();
  }
  if (this.swlone6 !== null && this.swlone6 !== undefined) {
    output.writeFieldBegin('swlone6', Thrift.Type.I32, 3);
    output.writeI32(this.swlone6);
    output.writeFieldEnd();
  }
  if (this.nelate6 !== null && this.nelate6 !== undefined) {
    output.writeFieldBegin('nelate6', Thrift.Type.I32, 4);
    output.writeI32(this.nelate6);
    output.writeFieldEnd();
  }
  if (this.nelone6 !== null && this.nelone6 !== undefined) {
    output.writeFieldBegin('nelone6', Thrift.Type.I32, 5);
    output.writeI32(this.nelone6);
    output.writeFieldEnd();
  }
  if (this.zoom !== null && this.zoom !== undefined) {
    output.writeFieldBegin('zoom', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.zoom);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStore_getAllObjectsInBounds_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.WebMapResponse(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
DataStore_getAllObjectsInBounds_result.prototype = {};
DataStore_getAllObjectsInBounds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.WebMapResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataStore_getAllObjectsInBounds_result.prototype.write = function(output) {
  output.writeStructBegin('DataStore_getAllObjectsInBounds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataStoreClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
DataStoreClient.prototype = {};
DataStoreClient.prototype.seqid = function() { return this._seqid; };
DataStoreClient.prototype.new_seqid = function() { return this._seqid += 1; };
DataStoreClient.prototype.checkVersion = function(clientName, hampVersionMajor, hampVersionMinor, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_checkVersion(clientName, hampVersionMajor, hampVersionMinor);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_checkVersion(clientName, hampVersionMajor, hampVersionMinor);
  }
};

DataStoreClient.prototype.send_checkVersion = function(clientName, hampVersionMajor, hampVersionMinor) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkVersion', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_checkVersion_args();
  args.clientName = clientName;
  args.hampVersionMajor = hampVersionMajor;
  args.hampVersionMinor = hampVersionMinor;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_checkVersion = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_checkVersion_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('checkVersion failed: unknown result');
};
DataStoreClient.prototype.putUser = function(authenticationToken, user, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_putUser(authenticationToken, user);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_putUser(authenticationToken, user);
  }
};

DataStoreClient.prototype.send_putUser = function(authenticationToken, user) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('putUser', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_putUser_args();
  args.authenticationToken = authenticationToken;
  args.user = user;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_putUser = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_putUser_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('putUser failed: unknown result');
};
DataStoreClient.prototype.putPoint = function(authenticationToken, point, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_putPoint(authenticationToken, point);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_putPoint(authenticationToken, point);
  }
};

DataStoreClient.prototype.send_putPoint = function(authenticationToken, point) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('putPoint', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_putPoint_args();
  args.authenticationToken = authenticationToken;
  args.point = point;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_putPoint = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_putPoint_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('putPoint failed: unknown result');
};
DataStoreClient.prototype.putTrack = function(authenticationToken, track, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_putTrack(authenticationToken, track);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_putTrack(authenticationToken, track);
  }
};

DataStoreClient.prototype.send_putTrack = function(authenticationToken, track) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('putTrack', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_putTrack_args();
  args.authenticationToken = authenticationToken;
  args.track = track;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_putTrack = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_putTrack_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('putTrack failed: unknown result');
};
DataStoreClient.prototype.putRelation = function(authenticationToken, relation, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_putRelation(authenticationToken, relation);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_putRelation(authenticationToken, relation);
  }
};

DataStoreClient.prototype.send_putRelation = function(authenticationToken, relation) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('putRelation', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_putRelation_args();
  args.authenticationToken = authenticationToken;
  args.relation = relation;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_putRelation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_putRelation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('putRelation failed: unknown result');
};
DataStoreClient.prototype.putAnalytics = function(authenticationToken, analyticsSubmitList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_putAnalytics(authenticationToken, analyticsSubmitList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_putAnalytics(authenticationToken, analyticsSubmitList);
  }
};

DataStoreClient.prototype.send_putAnalytics = function(authenticationToken, analyticsSubmitList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('putAnalytics', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_putAnalytics_args();
  args.authenticationToken = authenticationToken;
  args.analyticsSubmitList = analyticsSubmitList;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_putAnalytics = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_putAnalytics_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('putAnalytics failed: unknown result');
};
DataStoreClient.prototype.putSignalStrength = function(authenticationToken, signalStrengthSubmitList, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_putSignalStrength(authenticationToken, signalStrengthSubmitList);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_putSignalStrength(authenticationToken, signalStrengthSubmitList);
  }
};

DataStoreClient.prototype.send_putSignalStrength = function(authenticationToken, signalStrengthSubmitList) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('putSignalStrength', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_putSignalStrength_args();
  args.authenticationToken = authenticationToken;
  args.signalStrengthSubmitList = signalStrengthSubmitList;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_putSignalStrength = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_putSignalStrength_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('putSignalStrength failed: unknown result');
};
DataStoreClient.prototype.putContestSet = function(authenticationToken, contestSet, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_putContestSet(authenticationToken, contestSet);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_putContestSet(authenticationToken, contestSet);
  }
};

DataStoreClient.prototype.send_putContestSet = function(authenticationToken, contestSet) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('putContestSet', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_putContestSet_args();
  args.authenticationToken = authenticationToken;
  args.contestSet = contestSet;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_putContestSet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_putContestSet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('putContestSet failed: unknown result');
};
DataStoreClient.prototype.putNotificationSet = function(authenticationToken, notificationSet, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_putNotificationSet(authenticationToken, notificationSet);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_putNotificationSet(authenticationToken, notificationSet);
  }
};

DataStoreClient.prototype.send_putNotificationSet = function(authenticationToken, notificationSet) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('putNotificationSet', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_putNotificationSet_args();
  args.authenticationToken = authenticationToken;
  args.notificationSet = notificationSet;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_putNotificationSet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_putNotificationSet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('putNotificationSet failed: unknown result');
};
DataStoreClient.prototype.putSelector = function(authenticationToken, selector, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_putSelector(authenticationToken, selector);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_putSelector(authenticationToken, selector);
  }
};

DataStoreClient.prototype.send_putSelector = function(authenticationToken, selector) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('putSelector', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_putSelector_args();
  args.authenticationToken = authenticationToken;
  args.selector = selector;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_putSelector = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_putSelector_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('putSelector failed: unknown result');
};
DataStoreClient.prototype.getNextModifiedRecordChunk = function(authenticationToken, selector_id, changeset_id, withPreviewResourcesData, withFullResourcesData, isInitialSync, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getNextModifiedRecordChunk(authenticationToken, selector_id, changeset_id, withPreviewResourcesData, withFullResourcesData, isInitialSync);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getNextModifiedRecordChunk(authenticationToken, selector_id, changeset_id, withPreviewResourcesData, withFullResourcesData, isInitialSync);
  }
};

DataStoreClient.prototype.send_getNextModifiedRecordChunk = function(authenticationToken, selector_id, changeset_id, withPreviewResourcesData, withFullResourcesData, isInitialSync) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getNextModifiedRecordChunk', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_getNextModifiedRecordChunk_args();
  args.authenticationToken = authenticationToken;
  args.selector_id = selector_id;
  args.changeset_id = changeset_id;
  args.withPreviewResourcesData = withPreviewResourcesData;
  args.withFullResourcesData = withFullResourcesData;
  args.isInitialSync = isInitialSync;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_getNextModifiedRecordChunk = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_getNextModifiedRecordChunk_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getNextModifiedRecordChunk failed: unknown result');
};
DataStoreClient.prototype.getNextModifiedRecordChunkLastVerOnly = function(authenticationToken, selector_id, datatypes, changeset_id, withPreviewResourcesData, withFullResourcesData, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getNextModifiedRecordChunkLastVerOnly(authenticationToken, selector_id, datatypes, changeset_id, withPreviewResourcesData, withFullResourcesData);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getNextModifiedRecordChunkLastVerOnly(authenticationToken, selector_id, datatypes, changeset_id, withPreviewResourcesData, withFullResourcesData);
  }
};

DataStoreClient.prototype.send_getNextModifiedRecordChunkLastVerOnly = function(authenticationToken, selector_id, datatypes, changeset_id, withPreviewResourcesData, withFullResourcesData) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getNextModifiedRecordChunkLastVerOnly', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_getNextModifiedRecordChunkLastVerOnly_args();
  args.authenticationToken = authenticationToken;
  args.selector_id = selector_id;
  args.datatypes = datatypes;
  args.changeset_id = changeset_id;
  args.withPreviewResourcesData = withPreviewResourcesData;
  args.withFullResourcesData = withFullResourcesData;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_getNextModifiedRecordChunkLastVerOnly = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_getNextModifiedRecordChunkLastVerOnly_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getNextModifiedRecordChunkLastVerOnly failed: unknown result');
};
DataStoreClient.prototype.getNextModifiedRecordChunkTracksLastVerOnly = function(authenticationToken, selector_id, datatypes, changeset_id, withPreviewResourcesData, withFullResourcesData, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getNextModifiedRecordChunkTracksLastVerOnly(authenticationToken, selector_id, datatypes, changeset_id, withPreviewResourcesData, withFullResourcesData);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getNextModifiedRecordChunkTracksLastVerOnly(authenticationToken, selector_id, datatypes, changeset_id, withPreviewResourcesData, withFullResourcesData);
  }
};

DataStoreClient.prototype.send_getNextModifiedRecordChunkTracksLastVerOnly = function(authenticationToken, selector_id, datatypes, changeset_id, withPreviewResourcesData, withFullResourcesData) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getNextModifiedRecordChunkTracksLastVerOnly', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_getNextModifiedRecordChunkTracksLastVerOnly_args();
  args.authenticationToken = authenticationToken;
  args.selector_id = selector_id;
  args.datatypes = datatypes;
  args.changeset_id = changeset_id;
  args.withPreviewResourcesData = withPreviewResourcesData;
  args.withFullResourcesData = withFullResourcesData;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_getNextModifiedRecordChunkTracksLastVerOnly = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_getNextModifiedRecordChunkTracksLastVerOnly_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getNextModifiedRecordChunkTracksLastVerOnly failed: unknown result');
};
DataStoreClient.prototype.getUser = function(authenticationToken, user_id, withPreviewResourcesData, withFullResourcesData, withAllCrumbs, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUser(authenticationToken, user_id, withPreviewResourcesData, withFullResourcesData, withAllCrumbs);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUser(authenticationToken, user_id, withPreviewResourcesData, withFullResourcesData, withAllCrumbs);
  }
};

DataStoreClient.prototype.send_getUser = function(authenticationToken, user_id, withPreviewResourcesData, withFullResourcesData, withAllCrumbs) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUser', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_getUser_args();
  args.authenticationToken = authenticationToken;
  args.user_id = user_id;
  args.withPreviewResourcesData = withPreviewResourcesData;
  args.withFullResourcesData = withFullResourcesData;
  args.withAllCrumbs = withAllCrumbs;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_getUser = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_getUser_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUser failed: unknown result');
};
DataStoreClient.prototype.getDatastatus = function(authenticationToken, ids, hwms, selector, withPreviewResourcesData, withFullResourcesData, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDatastatus(authenticationToken, ids, hwms, selector, withPreviewResourcesData, withFullResourcesData);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDatastatus(authenticationToken, ids, hwms, selector, withPreviewResourcesData, withFullResourcesData);
  }
};

DataStoreClient.prototype.send_getDatastatus = function(authenticationToken, ids, hwms, selector, withPreviewResourcesData, withFullResourcesData) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDatastatus', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_getDatastatus_args();
  args.authenticationToken = authenticationToken;
  args.ids = ids;
  args.hwms = hwms;
  args.selector = selector;
  args.withPreviewResourcesData = withPreviewResourcesData;
  args.withFullResourcesData = withFullResourcesData;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_getDatastatus = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_getDatastatus_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDatastatus failed: unknown result');
};
DataStoreClient.prototype.getSelectors = function(authenticationToken, changeset_id, withPreviewResourcesData, withFullResourcesData, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSelectors(authenticationToken, changeset_id, withPreviewResourcesData, withFullResourcesData);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSelectors(authenticationToken, changeset_id, withPreviewResourcesData, withFullResourcesData);
  }
};

DataStoreClient.prototype.send_getSelectors = function(authenticationToken, changeset_id, withPreviewResourcesData, withFullResourcesData) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSelectors', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_getSelectors_args();
  args.authenticationToken = authenticationToken;
  args.changeset_id = changeset_id;
  args.withPreviewResourcesData = withPreviewResourcesData;
  args.withFullResourcesData = withFullResourcesData;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_getSelectors = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_getSelectors_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSelectors failed: unknown result');
};
DataStoreClient.prototype.getOriginalResource = function(authenticationToken, id, version, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getOriginalResource(authenticationToken, id, version);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getOriginalResource(authenticationToken, id, version);
  }
};

DataStoreClient.prototype.send_getOriginalResource = function(authenticationToken, id, version) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getOriginalResource', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_getOriginalResource_args();
  args.authenticationToken = authenticationToken;
  args.id = id;
  args.version = version;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_getOriginalResource = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_getOriginalResource_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getOriginalResource failed: unknown result');
};
DataStoreClient.prototype.createDatastatus = function(authenticationToken, datastatus, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createDatastatus(authenticationToken, datastatus);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createDatastatus(authenticationToken, datastatus);
  }
};

DataStoreClient.prototype.send_createDatastatus = function(authenticationToken, datastatus) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createDatastatus', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_createDatastatus_args();
  args.authenticationToken = authenticationToken;
  args.datastatus = datastatus;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_createDatastatus = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_createDatastatus_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createDatastatus failed: unknown result');
};
DataStoreClient.prototype.getAllMarkersInBounds = function(selector_id, zoom, swlate6, swlone6, nelate6, nelone6, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAllMarkersInBounds(selector_id, zoom, swlate6, swlone6, nelate6, nelone6);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAllMarkersInBounds(selector_id, zoom, swlate6, swlone6, nelate6, nelone6);
  }
};

DataStoreClient.prototype.send_getAllMarkersInBounds = function(selector_id, zoom, swlate6, swlone6, nelate6, nelone6) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAllMarkersInBounds', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_getAllMarkersInBounds_args();
  args.selector_id = selector_id;
  args.zoom = zoom;
  args.swlate6 = swlate6;
  args.swlone6 = swlone6;
  args.nelate6 = nelate6;
  args.nelone6 = nelone6;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_getAllMarkersInBounds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_getAllMarkersInBounds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAllMarkersInBounds failed: unknown result');
};
DataStoreClient.prototype.getAllTracksInBounds = function(selector_id, zoom, swlate6, swlone6, nelate6, nelone6, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAllTracksInBounds(selector_id, zoom, swlate6, swlone6, nelate6, nelone6);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAllTracksInBounds(selector_id, zoom, swlate6, swlone6, nelate6, nelone6);
  }
};

DataStoreClient.prototype.send_getAllTracksInBounds = function(selector_id, zoom, swlate6, swlone6, nelate6, nelone6) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAllTracksInBounds', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_getAllTracksInBounds_args();
  args.selector_id = selector_id;
  args.zoom = zoom;
  args.swlate6 = swlate6;
  args.swlone6 = swlone6;
  args.nelate6 = nelate6;
  args.nelone6 = nelone6;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_getAllTracksInBounds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_getAllTracksInBounds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAllTracksInBounds failed: unknown result');
};
DataStoreClient.prototype.getPoint = function(authenticationToken, id, version, withPreviewResourcesData, withFullResourcesData, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPoint(authenticationToken, id, version, withPreviewResourcesData, withFullResourcesData);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPoint(authenticationToken, id, version, withPreviewResourcesData, withFullResourcesData);
  }
};

DataStoreClient.prototype.send_getPoint = function(authenticationToken, id, version, withPreviewResourcesData, withFullResourcesData) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPoint', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_getPoint_args();
  args.authenticationToken = authenticationToken;
  args.id = id;
  args.version = version;
  args.withPreviewResourcesData = withPreviewResourcesData;
  args.withFullResourcesData = withFullResourcesData;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_getPoint = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_getPoint_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPoint failed: unknown result');
};
DataStoreClient.prototype.getTrack = function(authenticationToken, id, version, withPreviewResourcesData, withFullResourcesData, withAllPathPoints, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTrack(authenticationToken, id, version, withPreviewResourcesData, withFullResourcesData, withAllPathPoints);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTrack(authenticationToken, id, version, withPreviewResourcesData, withFullResourcesData, withAllPathPoints);
  }
};

DataStoreClient.prototype.send_getTrack = function(authenticationToken, id, version, withPreviewResourcesData, withFullResourcesData, withAllPathPoints) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTrack', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_getTrack_args();
  args.authenticationToken = authenticationToken;
  args.id = id;
  args.version = version;
  args.withPreviewResourcesData = withPreviewResourcesData;
  args.withFullResourcesData = withFullResourcesData;
  args.withAllPathPoints = withAllPathPoints;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_getTrack = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_getTrack_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTrack failed: unknown result');
};
DataStoreClient.prototype.getRelation = function(authenticationToken, id, version, withPreviewResourcesData, withFullResourcesData, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRelation(authenticationToken, id, version, withPreviewResourcesData, withFullResourcesData);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRelation(authenticationToken, id, version, withPreviewResourcesData, withFullResourcesData);
  }
};

DataStoreClient.prototype.send_getRelation = function(authenticationToken, id, version, withPreviewResourcesData, withFullResourcesData) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRelation', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_getRelation_args();
  args.authenticationToken = authenticationToken;
  args.id = id;
  args.version = version;
  args.withPreviewResourcesData = withPreviewResourcesData;
  args.withFullResourcesData = withFullResourcesData;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_getRelation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_getRelation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRelation failed: unknown result');
};
DataStoreClient.prototype.getAllPointsInBounds = function(selector_id, swlate6, swlone6, nelate6, nelone6, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAllPointsInBounds(selector_id, swlate6, swlone6, nelate6, nelone6);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAllPointsInBounds(selector_id, swlate6, swlone6, nelate6, nelone6);
  }
};

DataStoreClient.prototype.send_getAllPointsInBounds = function(selector_id, swlate6, swlone6, nelate6, nelone6) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAllPointsInBounds', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_getAllPointsInBounds_args();
  args.selector_id = selector_id;
  args.swlate6 = swlate6;
  args.swlone6 = swlone6;
  args.nelate6 = nelate6;
  args.nelone6 = nelone6;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_getAllPointsInBounds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_getAllPointsInBounds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAllPointsInBounds failed: unknown result');
};
DataStoreClient.prototype.getAllObjectsInBounds = function(selector_id, swlate6, swlone6, nelate6, nelone6, zoom, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAllObjectsInBounds(selector_id, swlate6, swlone6, nelate6, nelone6, zoom);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAllObjectsInBounds(selector_id, swlate6, swlone6, nelate6, nelone6, zoom);
  }
};

DataStoreClient.prototype.send_getAllObjectsInBounds = function(selector_id, swlate6, swlone6, nelate6, nelone6, zoom) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAllObjectsInBounds', Thrift.MessageType.CALL, this.seqid());
  var args = new DataStore_getAllObjectsInBounds_args();
  args.selector_id = selector_id;
  args.swlate6 = swlate6;
  args.swlone6 = swlone6;
  args.nelate6 = nelate6;
  args.nelone6 = nelone6;
  args.zoom = zoom;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

DataStoreClient.prototype.recv_getAllObjectsInBounds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new DataStore_getAllObjectsInBounds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAllObjectsInBounds failed: unknown result');
};
var DataStoreProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
DataStoreProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
DataStoreProcessor.prototype.process_checkVersion = function(seqid, input, output) {
  var args = new DataStore_checkVersion_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.checkVersion.length === 3) {
    Q.fcall(this._handler.checkVersion, args.clientName, args.hampVersionMajor, args.hampVersionMinor)
      .then(function(result) {
        var result_obj = new DataStore_checkVersion_result({success: result});
        output.writeMessageBegin("checkVersion", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkVersion", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.checkVersion(args.clientName, args.hampVersionMajor, args.hampVersionMinor, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new DataStore_checkVersion_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("checkVersion", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("checkVersion", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DataStoreProcessor.prototype.process_putUser = function(seqid, input, output) {
  var args = new DataStore_putUser_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.putUser.length === 2) {
    Q.fcall(this._handler.putUser, args.authenticationToken, args.user)
      .then(function(result) {
        var result_obj = new DataStore_putUser_result({success: result});
        output.writeMessageBegin("putUser", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          result = new DataStore_putUser_result(err);
          output.writeMessageBegin("putUser", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("putUser", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.putUser(args.authenticationToken, args.user, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        result_obj = new DataStore_putUser_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("putUser", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("putUser", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DataStoreProcessor.prototype.process_putPoint = function(seqid, input, output) {
  var args = new DataStore_putPoint_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.putPoint.length === 2) {
    Q.fcall(this._handler.putPoint, args.authenticationToken, args.point)
      .then(function(result) {
        var result_obj = new DataStore_putPoint_result({success: result});
        output.writeMessageBegin("putPoint", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          result = new DataStore_putPoint_result(err);
          output.writeMessageBegin("putPoint", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("putPoint", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.putPoint(args.authenticationToken, args.point, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        result_obj = new DataStore_putPoint_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("putPoint", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("putPoint", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DataStoreProcessor.prototype.process_putTrack = function(seqid, input, output) {
  var args = new DataStore_putTrack_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.putTrack.length === 2) {
    Q.fcall(this._handler.putTrack, args.authenticationToken, args.track)
      .then(function(result) {
        var result_obj = new DataStore_putTrack_result({success: result});
        output.writeMessageBegin("putTrack", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          result = new DataStore_putTrack_result(err);
          output.writeMessageBegin("putTrack", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("putTrack", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.putTrack(args.authenticationToken, args.track, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        result_obj = new DataStore_putTrack_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("putTrack", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("putTrack", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DataStoreProcessor.prototype.process_putRelation = function(seqid, input, output) {
  var args = new DataStore_putRelation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.putRelation.length === 2) {
    Q.fcall(this._handler.putRelation, args.authenticationToken, args.relation)
      .then(function(result) {
        var result_obj = new DataStore_putRelation_result({success: result});
        output.writeMessageBegin("putRelation", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          result = new DataStore_putRelation_result(err);
          output.writeMessageBegin("putRelation", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("putRelation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.putRelation(args.authenticationToken, args.relation, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        result_obj = new DataStore_putRelation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("putRelation", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("putRelation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DataStoreProcessor.prototype.process_putAnalytics = function(seqid, input, output) {
  var args = new DataStore_putAnalytics_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.putAnalytics.length === 2) {
    Q.fcall(this._handler.putAnalytics, args.authenticationToken, args.analyticsSubmitList)
      .then(function(result) {
        var result_obj = new DataStore_putAnalytics_result({success: result});
        output.writeMessageBegin("putAnalytics", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          result = new DataStore_putAnalytics_result(err);
          output.writeMessageBegin("putAnalytics", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("putAnalytics", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.putAnalytics(args.authenticationToken, args.analyticsSubmitList, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        result_obj = new DataStore_putAnalytics_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("putAnalytics", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("putAnalytics", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DataStoreProcessor.prototype.process_putSignalStrength = function(seqid, input, output) {
  var args = new DataStore_putSignalStrength_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.putSignalStrength.length === 2) {
    Q.fcall(this._handler.putSignalStrength, args.authenticationToken, args.signalStrengthSubmitList)
      .then(function(result) {
        var result_obj = new DataStore_putSignalStrength_result({success: result});
        output.writeMessageBegin("putSignalStrength", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          result = new DataStore_putSignalStrength_result(err);
          output.writeMessageBegin("putSignalStrength", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("putSignalStrength", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.putSignalStrength(args.authenticationToken, args.signalStrengthSubmitList, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        result_obj = new DataStore_putSignalStrength_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("putSignalStrength", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("putSignalStrength", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DataStoreProcessor.prototype.process_putContestSet = function(seqid, input, output) {
  var args = new DataStore_putContestSet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.putContestSet.length === 2) {
    Q.fcall(this._handler.putContestSet, args.authenticationToken, args.contestSet)
      .then(function(result) {
        var result_obj = new DataStore_putContestSet_result({success: result});
        output.writeMessageBegin("putContestSet", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          result = new DataStore_putContestSet_result(err);
          output.writeMessageBegin("putContestSet", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("putContestSet", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.putContestSet(args.authenticationToken, args.contestSet, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        result_obj = new DataStore_putContestSet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("putContestSet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("putContestSet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DataStoreProcessor.prototype.process_putNotificationSet = function(seqid, input, output) {
  var args = new DataStore_putNotificationSet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.putNotificationSet.length === 2) {
    Q.fcall(this._handler.putNotificationSet, args.authenticationToken, args.notificationSet)
      .then(function(result) {
        var result_obj = new DataStore_putNotificationSet_result({success: result});
        output.writeMessageBegin("putNotificationSet", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          result = new DataStore_putNotificationSet_result(err);
          output.writeMessageBegin("putNotificationSet", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("putNotificationSet", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.putNotificationSet(args.authenticationToken, args.notificationSet, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        result_obj = new DataStore_putNotificationSet_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("putNotificationSet", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("putNotificationSet", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DataStoreProcessor.prototype.process_putSelector = function(seqid, input, output) {
  var args = new DataStore_putSelector_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.putSelector.length === 2) {
    Q.fcall(this._handler.putSelector, args.authenticationToken, args.selector)
      .then(function(result) {
        var result_obj = new DataStore_putSelector_result({success: result});
        output.writeMessageBegin("putSelector", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          result = new DataStore_putSelector_result(err);
          output.writeMessageBegin("putSelector", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("putSelector", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.putSelector(args.authenticationToken, args.selector, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        result_obj = new DataStore_putSelector_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("putSelector", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("putSelector", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DataStoreProcessor.prototype.process_getNextModifiedRecordChunk = function(seqid, input, output) {
  var args = new DataStore_getNextModifiedRecordChunk_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getNextModifiedRecordChunk.length === 6) {
    Q.fcall(this._handler.getNextModifiedRecordChunk, args.authenticationToken, args.selector_id, args.changeset_id, args.withPreviewResourcesData, args.withFullResourcesData, args.isInitialSync)
      .then(function(result) {
        var result_obj = new DataStore_getNextModifiedRecordChunk_result({success: result});
        output.writeMessageBegin("getNextModifiedRecordChunk", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          result = new DataStore_getNextModifiedRecordChunk_result(err);
          output.writeMessageBegin("getNextModifiedRecordChunk", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getNextModifiedRecordChunk", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getNextModifiedRecordChunk(args.authenticationToken, args.selector_id, args.changeset_id, args.withPreviewResourcesData, args.withFullResourcesData, args.isInitialSync, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        result_obj = new DataStore_getNextModifiedRecordChunk_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getNextModifiedRecordChunk", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNextModifiedRecordChunk", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DataStoreProcessor.prototype.process_getNextModifiedRecordChunkLastVerOnly = function(seqid, input, output) {
  var args = new DataStore_getNextModifiedRecordChunkLastVerOnly_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getNextModifiedRecordChunkLastVerOnly.length === 6) {
    Q.fcall(this._handler.getNextModifiedRecordChunkLastVerOnly, args.authenticationToken, args.selector_id, args.datatypes, args.changeset_id, args.withPreviewResourcesData, args.withFullResourcesData)
      .then(function(result) {
        var result_obj = new DataStore_getNextModifiedRecordChunkLastVerOnly_result({success: result});
        output.writeMessageBegin("getNextModifiedRecordChunkLastVerOnly", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          result = new DataStore_getNextModifiedRecordChunkLastVerOnly_result(err);
          output.writeMessageBegin("getNextModifiedRecordChunkLastVerOnly", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getNextModifiedRecordChunkLastVerOnly", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getNextModifiedRecordChunkLastVerOnly(args.authenticationToken, args.selector_id, args.datatypes, args.changeset_id, args.withPreviewResourcesData, args.withFullResourcesData, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        result_obj = new DataStore_getNextModifiedRecordChunkLastVerOnly_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getNextModifiedRecordChunkLastVerOnly", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNextModifiedRecordChunkLastVerOnly", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DataStoreProcessor.prototype.process_getNextModifiedRecordChunkTracksLastVerOnly = function(seqid, input, output) {
  var args = new DataStore_getNextModifiedRecordChunkTracksLastVerOnly_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getNextModifiedRecordChunkTracksLastVerOnly.length === 6) {
    Q.fcall(this._handler.getNextModifiedRecordChunkTracksLastVerOnly, args.authenticationToken, args.selector_id, args.datatypes, args.changeset_id, args.withPreviewResourcesData, args.withFullResourcesData)
      .then(function(result) {
        var result_obj = new DataStore_getNextModifiedRecordChunkTracksLastVerOnly_result({success: result});
        output.writeMessageBegin("getNextModifiedRecordChunkTracksLastVerOnly", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          result = new DataStore_getNextModifiedRecordChunkTracksLastVerOnly_result(err);
          output.writeMessageBegin("getNextModifiedRecordChunkTracksLastVerOnly", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getNextModifiedRecordChunkTracksLastVerOnly", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getNextModifiedRecordChunkTracksLastVerOnly(args.authenticationToken, args.selector_id, args.datatypes, args.changeset_id, args.withPreviewResourcesData, args.withFullResourcesData, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        result_obj = new DataStore_getNextModifiedRecordChunkTracksLastVerOnly_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getNextModifiedRecordChunkTracksLastVerOnly", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getNextModifiedRecordChunkTracksLastVerOnly", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DataStoreProcessor.prototype.process_getUser = function(seqid, input, output) {
  var args = new DataStore_getUser_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUser.length === 5) {
    Q.fcall(this._handler.getUser, args.authenticationToken, args.user_id, args.withPreviewResourcesData, args.withFullResourcesData, args.withAllCrumbs)
      .then(function(result) {
        var result_obj = new DataStore_getUser_result({success: result});
        output.writeMessageBegin("getUser", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          result = new DataStore_getUser_result(err);
          output.writeMessageBegin("getUser", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUser", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUser(args.authenticationToken, args.user_id, args.withPreviewResourcesData, args.withFullResourcesData, args.withAllCrumbs, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        result_obj = new DataStore_getUser_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getUser", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUser", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DataStoreProcessor.prototype.process_getDatastatus = function(seqid, input, output) {
  var args = new DataStore_getDatastatus_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDatastatus.length === 6) {
    Q.fcall(this._handler.getDatastatus, args.authenticationToken, args.ids, args.hwms, args.selector, args.withPreviewResourcesData, args.withFullResourcesData)
      .then(function(result) {
        var result_obj = new DataStore_getDatastatus_result({success: result});
        output.writeMessageBegin("getDatastatus", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          result = new DataStore_getDatastatus_result(err);
          output.writeMessageBegin("getDatastatus", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDatastatus", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDatastatus(args.authenticationToken, args.ids, args.hwms, args.selector, args.withPreviewResourcesData, args.withFullResourcesData, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        result_obj = new DataStore_getDatastatus_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDatastatus", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDatastatus", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DataStoreProcessor.prototype.process_getSelectors = function(seqid, input, output) {
  var args = new DataStore_getSelectors_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSelectors.length === 4) {
    Q.fcall(this._handler.getSelectors, args.authenticationToken, args.changeset_id, args.withPreviewResourcesData, args.withFullResourcesData)
      .then(function(result) {
        var result_obj = new DataStore_getSelectors_result({success: result});
        output.writeMessageBegin("getSelectors", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          result = new DataStore_getSelectors_result(err);
          output.writeMessageBegin("getSelectors", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getSelectors", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSelectors(args.authenticationToken, args.changeset_id, args.withPreviewResourcesData, args.withFullResourcesData, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        result_obj = new DataStore_getSelectors_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getSelectors", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getSelectors", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DataStoreProcessor.prototype.process_getOriginalResource = function(seqid, input, output) {
  var args = new DataStore_getOriginalResource_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getOriginalResource.length === 3) {
    Q.fcall(this._handler.getOriginalResource, args.authenticationToken, args.id, args.version)
      .then(function(result) {
        var result_obj = new DataStore_getOriginalResource_result({success: result});
        output.writeMessageBegin("getOriginalResource", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          result = new DataStore_getOriginalResource_result(err);
          output.writeMessageBegin("getOriginalResource", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getOriginalResource", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getOriginalResource(args.authenticationToken, args.id, args.version, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        result_obj = new DataStore_getOriginalResource_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getOriginalResource", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getOriginalResource", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DataStoreProcessor.prototype.process_createDatastatus = function(seqid, input, output) {
  var args = new DataStore_createDatastatus_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createDatastatus.length === 2) {
    Q.fcall(this._handler.createDatastatus, args.authenticationToken, args.datastatus)
      .then(function(result) {
        var result_obj = new DataStore_createDatastatus_result({success: result});
        output.writeMessageBegin("createDatastatus", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          result = new DataStore_createDatastatus_result(err);
          output.writeMessageBegin("createDatastatus", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("createDatastatus", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createDatastatus(args.authenticationToken, args.datastatus, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        result_obj = new DataStore_createDatastatus_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createDatastatus", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createDatastatus", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DataStoreProcessor.prototype.process_getAllMarkersInBounds = function(seqid, input, output) {
  var args = new DataStore_getAllMarkersInBounds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAllMarkersInBounds.length === 6) {
    Q.fcall(this._handler.getAllMarkersInBounds, args.selector_id, args.zoom, args.swlate6, args.swlone6, args.nelate6, args.nelone6)
      .then(function(result) {
        var result_obj = new DataStore_getAllMarkersInBounds_result({success: result});
        output.writeMessageBegin("getAllMarkersInBounds", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          result = new DataStore_getAllMarkersInBounds_result(err);
          output.writeMessageBegin("getAllMarkersInBounds", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getAllMarkersInBounds", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAllMarkersInBounds(args.selector_id, args.zoom, args.swlate6, args.swlone6, args.nelate6, args.nelone6, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        result_obj = new DataStore_getAllMarkersInBounds_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getAllMarkersInBounds", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllMarkersInBounds", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DataStoreProcessor.prototype.process_getAllTracksInBounds = function(seqid, input, output) {
  var args = new DataStore_getAllTracksInBounds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAllTracksInBounds.length === 6) {
    Q.fcall(this._handler.getAllTracksInBounds, args.selector_id, args.zoom, args.swlate6, args.swlone6, args.nelate6, args.nelone6)
      .then(function(result) {
        var result_obj = new DataStore_getAllTracksInBounds_result({success: result});
        output.writeMessageBegin("getAllTracksInBounds", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          result = new DataStore_getAllTracksInBounds_result(err);
          output.writeMessageBegin("getAllTracksInBounds", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getAllTracksInBounds", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAllTracksInBounds(args.selector_id, args.zoom, args.swlate6, args.swlone6, args.nelate6, args.nelone6, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        result_obj = new DataStore_getAllTracksInBounds_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getAllTracksInBounds", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllTracksInBounds", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DataStoreProcessor.prototype.process_getPoint = function(seqid, input, output) {
  var args = new DataStore_getPoint_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPoint.length === 5) {
    Q.fcall(this._handler.getPoint, args.authenticationToken, args.id, args.version, args.withPreviewResourcesData, args.withFullResourcesData)
      .then(function(result) {
        var result_obj = new DataStore_getPoint_result({success: result});
        output.writeMessageBegin("getPoint", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          result = new DataStore_getPoint_result(err);
          output.writeMessageBegin("getPoint", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPoint", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPoint(args.authenticationToken, args.id, args.version, args.withPreviewResourcesData, args.withFullResourcesData, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        result_obj = new DataStore_getPoint_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPoint", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPoint", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DataStoreProcessor.prototype.process_getTrack = function(seqid, input, output) {
  var args = new DataStore_getTrack_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTrack.length === 6) {
    Q.fcall(this._handler.getTrack, args.authenticationToken, args.id, args.version, args.withPreviewResourcesData, args.withFullResourcesData, args.withAllPathPoints)
      .then(function(result) {
        var result_obj = new DataStore_getTrack_result({success: result});
        output.writeMessageBegin("getTrack", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          result = new DataStore_getTrack_result(err);
          output.writeMessageBegin("getTrack", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getTrack", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getTrack(args.authenticationToken, args.id, args.version, args.withPreviewResourcesData, args.withFullResourcesData, args.withAllPathPoints, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        result_obj = new DataStore_getTrack_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getTrack", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTrack", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DataStoreProcessor.prototype.process_getRelation = function(seqid, input, output) {
  var args = new DataStore_getRelation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRelation.length === 5) {
    Q.fcall(this._handler.getRelation, args.authenticationToken, args.id, args.version, args.withPreviewResourcesData, args.withFullResourcesData)
      .then(function(result) {
        var result_obj = new DataStore_getRelation_result({success: result});
        output.writeMessageBegin("getRelation", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          result = new DataStore_getRelation_result(err);
          output.writeMessageBegin("getRelation", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getRelation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRelation(args.authenticationToken, args.id, args.version, args.withPreviewResourcesData, args.withFullResourcesData, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        result_obj = new DataStore_getRelation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getRelation", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRelation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DataStoreProcessor.prototype.process_getAllPointsInBounds = function(seqid, input, output) {
  var args = new DataStore_getAllPointsInBounds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAllPointsInBounds.length === 5) {
    Q.fcall(this._handler.getAllPointsInBounds, args.selector_id, args.swlate6, args.swlone6, args.nelate6, args.nelone6)
      .then(function(result) {
        var result_obj = new DataStore_getAllPointsInBounds_result({success: result});
        output.writeMessageBegin("getAllPointsInBounds", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          result = new DataStore_getAllPointsInBounds_result(err);
          output.writeMessageBegin("getAllPointsInBounds", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getAllPointsInBounds", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAllPointsInBounds(args.selector_id, args.swlate6, args.swlone6, args.nelate6, args.nelone6, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        result_obj = new DataStore_getAllPointsInBounds_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getAllPointsInBounds", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllPointsInBounds", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
DataStoreProcessor.prototype.process_getAllObjectsInBounds = function(seqid, input, output) {
  var args = new DataStore_getAllObjectsInBounds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAllObjectsInBounds.length === 6) {
    Q.fcall(this._handler.getAllObjectsInBounds, args.selector_id, args.swlate6, args.swlone6, args.nelate6, args.nelone6, args.zoom)
      .then(function(result) {
        var result_obj = new DataStore_getAllObjectsInBounds_result({success: result});
        output.writeMessageBegin("getAllObjectsInBounds", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          result = new DataStore_getAllObjectsInBounds_result(err);
          output.writeMessageBegin("getAllObjectsInBounds", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getAllObjectsInBounds", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAllObjectsInBounds(args.selector_id, args.swlate6, args.swlone6, args.nelate6, args.nelone6, args.zoom, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        result_obj = new DataStore_getAllObjectsInBounds_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getAllObjectsInBounds", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllObjectsInBounds", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
