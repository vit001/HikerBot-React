//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.PrivilegeLevel = {
  'NORMAL' : 1,
  'ELEVATED' : 3,
  'ADMIN' : 5,
  'FULL' : 7
};
ttypes.BadgeType = {
  'INFORMED' : 1,
  'PUBLICIST' : 2,
  'AUTOBIOGRAPHER' : 3,
  'COMMENTATOR' : 4,
  'PUNDIT' : 5
};
ttypes.PrivilegeType = {
  'NEW_POINT' : 101,
  'DELETE_POINT' : 102,
  'EDIT_POINT_ATTRIBUTES' : 103,
  'EDIT_POINT_NAME' : 104,
  'EDIT_POINT_DESCRIPTION' : 105,
  'EDIT_POINT_COORDINATES' : 106,
  'EDIT_POINT_PRESETS' : 107,
  'EDIT_POINT_JUNCTIONS' : 108,
  'EDIT_POINT_TOWN_ACCESS' : 109,
  'POINT_ADD_TO_SELECTOR_LIST' : 110,
  'POINT_DELETE_FROM_SELECTOR_LIST' : 111,
  'NEW_TOWN' : 201,
  'DELETE_TOWN' : 202,
  'EDIT_TOWN_NAME' : 203,
  'EDIT_TOWN_DESCRIPTION' : 204,
  'EDIT_TOWN_COORDINATES' : 205,
  'EDIT_TOWN_SIZE' : 206,
  'EDIT_TOWN_PRIORITY' : 207,
  'EDIT_TOWN_PRESETS' : 208,
  'TOWN_ADD_TO_SELECTOR_LIST' : 209,
  'TOWN_DELETE_FROM_SELECTOR_LIST' : 210,
  'NEW_TRACK' : 301,
  'DELETE_TRACK' : 302,
  'EDIT_TRACK_NAME' : 303,
  'EDIT_TRACK_DESCRIPTION' : 304,
  'EDIT_TRACK_TAGS' : 305,
  'EDIT_TRACK_POINTS' : 306,
  'TRACK_ADD_TO_SELECTOR_LIST' : 307,
  'TRACK_DELETE_FROM_SELECTOR_LIST' : 308,
  'NEW_PHOTO' : 401,
  'DELETE_PHOTO' : 402,
  'EDIT_PHOTO_BYTES' : 403,
  'EDIT_PHOTO_METADATA' : 404,
  'STAR_PHOTO' : 405,
  'FLAG_PHOTO' : 406,
  'SELECT_COVER_PHOTOS' : 407,
  'NEW_COMMENT' : 501,
  'EDIT_COMMENT' : 502,
  'DELETE_COMMENT' : 503,
  'FLAG_COMMENT' : 504,
  'NEW_SELECTOR' : 601,
  'DELETE_SELECTOR' : 602,
  'EDIT_SELECTOR_NAME' : 603,
  'EDIT_SELECTOR_WIKI' : 604,
  'EDIT_SELECTOR_TAGS' : 605,
  'EDIT_SELECTOR_PREVIEW_PATH' : 606,
  'EDIT_USER_PRIVILEGES' : 701,
  'NEW_OR_EDIT_CONTEST' : 801
};
ttypes.EntitySortOrder = {
  'CREATED' : 1,
  'VERSION' : 2,
  'RELEVANCE' : 3,
  'TITLE' : 4
};
ttypes.VoteType = {
  'VOTE_ACCURATE' : 1,
  'VOTE_INACCURATE' : 2,
  'VOTE_HELPFUL' : 3,
  'VOTE_REDUNDANT' : 4,
  'VOTE_SPAM' : 5,
  'VOTE_STARS' : 6
};
ttypes.NotificationType = {
  'THANKS' : 1,
  'CONFIRM' : 2,
  'STARS' : 3,
  'VIEW' : 4,
  'PROMOTIONAL' : 5
};
ttypes.Datatype = {
  'USER' : 1,
  'POINT' : 2,
  'TRACK' : 3,
  'RELATION' : 4,
  'MAP' : 5,
  'ANALYTICS' : 6,
  'SELECTOR' : 7,
  'CONTEST' : 8,
  'NOTIFICATION' : 9
};
ttypes.AnalyticsType = {
  'ANALYTICS_SCREENVIEW' : 1
};
ttypes.MarkerType = {
  'USER' : 1,
  'POINT' : 2,
  'TOWN' : 3
};
ttypes.ReportInputType = {
  'SINGLE_CHOICE' : 0,
  'MULTI_CHOICE' : 1,
  'INTEGER' : 2,
  'DOUBLE' : 3,
  'STRING' : 4
};
var Vote = module.exports.Vote = function(args) {
  this.target_id = null;
  this.target_version = null;
  this.vote_type = null;
  this.value = null;
  this.timestamp = null;
  this.target_user_id = null;
  if (args) {
    if (args.target_id !== undefined && args.target_id !== null) {
      this.target_id = args.target_id;
    }
    if (args.target_version !== undefined && args.target_version !== null) {
      this.target_version = args.target_version;
    }
    if (args.vote_type !== undefined && args.vote_type !== null) {
      this.vote_type = args.vote_type;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.target_user_id !== undefined && args.target_user_id !== null) {
      this.target_user_id = args.target_user_id;
    }
  }
};
Vote.prototype = {};
Vote.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.target_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.target_version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.vote_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.value = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.target_user_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Vote.prototype.write = function(output) {
  output.writeStructBegin('Vote');
  if (this.target_id !== null && this.target_id !== undefined) {
    output.writeFieldBegin('target_id', Thrift.Type.I64, 1);
    output.writeI64(this.target_id);
    output.writeFieldEnd();
  }
  if (this.target_version !== null && this.target_version !== undefined) {
    output.writeFieldBegin('target_version', Thrift.Type.I64, 2);
    output.writeI64(this.target_version);
    output.writeFieldEnd();
  }
  if (this.vote_type !== null && this.vote_type !== undefined) {
    output.writeFieldBegin('vote_type', Thrift.Type.I32, 3);
    output.writeI32(this.vote_type);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.I32, 4);
    output.writeI32(this.value);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 5);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.target_user_id !== null && this.target_user_id !== undefined) {
    output.writeFieldBegin('target_user_id', Thrift.Type.I64, 6);
    output.writeI64(this.target_user_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Data = module.exports.Data = function(args) {
  this.bodyHash = null;
  this.size = null;
  this.body = null;
  if (args) {
    if (args.bodyHash !== undefined && args.bodyHash !== null) {
      this.bodyHash = args.bodyHash;
    }
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    }
    if (args.body !== undefined && args.body !== null) {
      this.body = args.body;
    }
  }
};
Data.prototype = {};
Data.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.bodyHash = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.size = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.body = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Data.prototype.write = function(output) {
  output.writeStructBegin('Data');
  if (this.bodyHash !== null && this.bodyHash !== undefined) {
    output.writeFieldBegin('bodyHash', Thrift.Type.STRING, 1);
    output.writeBinary(this.bodyHash);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I64, 2);
    output.writeI64(this.size);
    output.writeFieldEnd();
  }
  if (this.body !== null && this.body !== undefined) {
    output.writeFieldBegin('body', Thrift.Type.STRING, 3);
    output.writeBinary(this.body);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Tag = module.exports.Tag = function(args) {
  this.k = null;
  this.v = null;
  this.deleted = null;
  if (args) {
    if (args.k !== undefined && args.k !== null) {
      this.k = args.k;
    }
    if (args.v !== undefined && args.v !== null) {
      this.v = args.v;
    }
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
  }
};
Tag.prototype = {};
Tag.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.k = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.v = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tag.prototype.write = function(output) {
  output.writeStructBegin('Tag');
  if (this.k !== null && this.k !== undefined) {
    output.writeFieldBegin('k', Thrift.Type.STRING, 1);
    output.writeString(this.k);
    output.writeFieldEnd();
  }
  if (this.v !== null && this.v !== undefined) {
    output.writeFieldBegin('v', Thrift.Type.STRING, 2);
    output.writeString(this.v);
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 3);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Resource = module.exports.Resource = function(args) {
  this.id = null;
  this.version = null;
  this.changeset_id = null;
  this.owner_id = null;
  this.tags = null;
  this.mime = null;
  this.width_px = null;
  this.height_px = null;
  this.sizebytes = null;
  this.preview = null;
  this.full = null;
  this.resources = null;
  this.deleted = null;
  this.data_version = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.changeset_id !== undefined && args.changeset_id !== null) {
      this.changeset_id = args.changeset_id;
    }
    if (args.owner_id !== undefined && args.owner_id !== null) {
      this.owner_id = args.owner_id;
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [ttypes.Tag]);
    }
    if (args.mime !== undefined && args.mime !== null) {
      this.mime = args.mime;
    }
    if (args.width_px !== undefined && args.width_px !== null) {
      this.width_px = args.width_px;
    }
    if (args.height_px !== undefined && args.height_px !== null) {
      this.height_px = args.height_px;
    }
    if (args.sizebytes !== undefined && args.sizebytes !== null) {
      this.sizebytes = args.sizebytes;
    }
    if (args.preview !== undefined && args.preview !== null) {
      this.preview = new ttypes.Data(args.preview);
    }
    if (args.full !== undefined && args.full !== null) {
      this.full = new ttypes.Data(args.full);
    }
    if (args.resources !== undefined && args.resources !== null) {
      this.resources = Thrift.copyList(args.resources, [null]);
    }
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
    if (args.data_version !== undefined && args.data_version !== null) {
      this.data_version = args.data_version;
    }
  }
};
Resource.prototype = {};
Resource.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.changeset_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.owner_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.SET) {
        var _size0 = 0;
        var _rtmp34;
        this.tags = [];
        var _etype3 = 0;
        _rtmp34 = input.readSetBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Tag();
          elem6.read(input);
          this.tags.push(elem6);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.mime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.width_px = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.height_px = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.sizebytes = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.preview = new ttypes.Data();
        this.preview.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.full = new ttypes.Data();
        this.full.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.SET) {
        var _size7 = 0;
        var _rtmp311;
        this.resources = [];
        var _etype10 = 0;
        _rtmp311 = input.readSetBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = new ttypes.Resource();
          elem13.read(input);
          this.resources.push(elem13);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.data_version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Resource.prototype.write = function(output) {
  output.writeStructBegin('Resource');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 2);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.changeset_id !== null && this.changeset_id !== undefined) {
    output.writeFieldBegin('changeset_id', Thrift.Type.I64, 3);
    output.writeI64(this.changeset_id);
    output.writeFieldEnd();
  }
  if (this.owner_id !== null && this.owner_id !== undefined) {
    output.writeFieldBegin('owner_id', Thrift.Type.I64, 4);
    output.writeI64(this.owner_id);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.SET, 5);
    output.writeSetBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter14 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter14))
      {
        iter14 = this.tags[iter14];
        iter14.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.mime !== null && this.mime !== undefined) {
    output.writeFieldBegin('mime', Thrift.Type.STRING, 6);
    output.writeString(this.mime);
    output.writeFieldEnd();
  }
  if (this.width_px !== null && this.width_px !== undefined) {
    output.writeFieldBegin('width_px', Thrift.Type.I32, 7);
    output.writeI32(this.width_px);
    output.writeFieldEnd();
  }
  if (this.height_px !== null && this.height_px !== undefined) {
    output.writeFieldBegin('height_px', Thrift.Type.I32, 8);
    output.writeI32(this.height_px);
    output.writeFieldEnd();
  }
  if (this.sizebytes !== null && this.sizebytes !== undefined) {
    output.writeFieldBegin('sizebytes', Thrift.Type.I64, 9);
    output.writeI64(this.sizebytes);
    output.writeFieldEnd();
  }
  if (this.preview !== null && this.preview !== undefined) {
    output.writeFieldBegin('preview', Thrift.Type.STRUCT, 10);
    this.preview.write(output);
    output.writeFieldEnd();
  }
  if (this.full !== null && this.full !== undefined) {
    output.writeFieldBegin('full', Thrift.Type.STRUCT, 11);
    this.full.write(output);
    output.writeFieldEnd();
  }
  if (this.resources !== null && this.resources !== undefined) {
    output.writeFieldBegin('resources', Thrift.Type.SET, 12);
    output.writeSetBegin(Thrift.Type.STRUCT, this.resources.length);
    for (var iter15 in this.resources)
    {
      if (this.resources.hasOwnProperty(iter15))
      {
        iter15 = this.resources[iter15];
        iter15.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 13);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  if (this.data_version !== null && this.data_version !== undefined) {
    output.writeFieldBegin('data_version', Thrift.Type.I64, 14);
    output.writeI64(this.data_version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Mileage = module.exports.Mileage = function(args) {
  this.selector_id = null;
  this.walk_hash = null;
  this.isextratrack = null;
  this.track_id = null;
  this.track_name = null;
  this.mileagee5 = null;
  this.milesfromtraile5 = null;
  this.bearingfromtraile6 = null;
  this.elevme2attrail = null;
  this.elevgainme2attrail = null;
  this.elevlossme2attrail = null;
  if (args) {
    if (args.selector_id !== undefined && args.selector_id !== null) {
      this.selector_id = args.selector_id;
    }
    if (args.walk_hash !== undefined && args.walk_hash !== null) {
      this.walk_hash = args.walk_hash;
    }
    if (args.isextratrack !== undefined && args.isextratrack !== null) {
      this.isextratrack = args.isextratrack;
    }
    if (args.track_id !== undefined && args.track_id !== null) {
      this.track_id = args.track_id;
    }
    if (args.track_name !== undefined && args.track_name !== null) {
      this.track_name = args.track_name;
    }
    if (args.mileagee5 !== undefined && args.mileagee5 !== null) {
      this.mileagee5 = args.mileagee5;
    }
    if (args.milesfromtraile5 !== undefined && args.milesfromtraile5 !== null) {
      this.milesfromtraile5 = args.milesfromtraile5;
    }
    if (args.bearingfromtraile6 !== undefined && args.bearingfromtraile6 !== null) {
      this.bearingfromtraile6 = args.bearingfromtraile6;
    }
    if (args.elevme2attrail !== undefined && args.elevme2attrail !== null) {
      this.elevme2attrail = args.elevme2attrail;
    }
    if (args.elevgainme2attrail !== undefined && args.elevgainme2attrail !== null) {
      this.elevgainme2attrail = args.elevgainme2attrail;
    }
    if (args.elevlossme2attrail !== undefined && args.elevlossme2attrail !== null) {
      this.elevlossme2attrail = args.elevlossme2attrail;
    }
  }
};
Mileage.prototype = {};
Mileage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.selector_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.walk_hash = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isextratrack = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.track_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.track_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.mileagee5 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.milesfromtraile5 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.bearingfromtraile6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.elevme2attrail = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.elevgainme2attrail = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.elevlossme2attrail = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Mileage.prototype.write = function(output) {
  output.writeStructBegin('Mileage');
  if (this.selector_id !== null && this.selector_id !== undefined) {
    output.writeFieldBegin('selector_id', Thrift.Type.I64, 1);
    output.writeI64(this.selector_id);
    output.writeFieldEnd();
  }
  if (this.walk_hash !== null && this.walk_hash !== undefined) {
    output.writeFieldBegin('walk_hash', Thrift.Type.I64, 2);
    output.writeI64(this.walk_hash);
    output.writeFieldEnd();
  }
  if (this.isextratrack !== null && this.isextratrack !== undefined) {
    output.writeFieldBegin('isextratrack', Thrift.Type.BOOL, 3);
    output.writeBool(this.isextratrack);
    output.writeFieldEnd();
  }
  if (this.track_id !== null && this.track_id !== undefined) {
    output.writeFieldBegin('track_id', Thrift.Type.I64, 4);
    output.writeI64(this.track_id);
    output.writeFieldEnd();
  }
  if (this.track_name !== null && this.track_name !== undefined) {
    output.writeFieldBegin('track_name', Thrift.Type.STRING, 5);
    output.writeString(this.track_name);
    output.writeFieldEnd();
  }
  if (this.mileagee5 !== null && this.mileagee5 !== undefined) {
    output.writeFieldBegin('mileagee5', Thrift.Type.I32, 6);
    output.writeI32(this.mileagee5);
    output.writeFieldEnd();
  }
  if (this.milesfromtraile5 !== null && this.milesfromtraile5 !== undefined) {
    output.writeFieldBegin('milesfromtraile5', Thrift.Type.I32, 7);
    output.writeI32(this.milesfromtraile5);
    output.writeFieldEnd();
  }
  if (this.bearingfromtraile6 !== null && this.bearingfromtraile6 !== undefined) {
    output.writeFieldBegin('bearingfromtraile6', Thrift.Type.I32, 8);
    output.writeI32(this.bearingfromtraile6);
    output.writeFieldEnd();
  }
  if (this.elevme2attrail !== null && this.elevme2attrail !== undefined) {
    output.writeFieldBegin('elevme2attrail', Thrift.Type.I32, 9);
    output.writeI32(this.elevme2attrail);
    output.writeFieldEnd();
  }
  if (this.elevgainme2attrail !== null && this.elevgainme2attrail !== undefined) {
    output.writeFieldBegin('elevgainme2attrail', Thrift.Type.I32, 10);
    output.writeI32(this.elevgainme2attrail);
    output.writeFieldEnd();
  }
  if (this.elevlossme2attrail !== null && this.elevlossme2attrail !== undefined) {
    output.writeFieldBegin('elevlossme2attrail', Thrift.Type.I32, 11);
    output.writeI32(this.elevlossme2attrail);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Crumb = module.exports.Crumb = function(args) {
  this.id = null;
  this.version = null;
  this.late6 = null;
  this.lone6 = null;
  this.eleme2 = null;
  this.mainlinemileagee5 = null;
  this.time = null;
  this.speed = null;
  this.bearing = null;
  this.accuracym = null;
  this.satellites = null;
  this.provider = null;
  this.zlfo = null;
  this.mileages = null;
  this.deleted = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.late6 !== undefined && args.late6 !== null) {
      this.late6 = args.late6;
    }
    if (args.lone6 !== undefined && args.lone6 !== null) {
      this.lone6 = args.lone6;
    }
    if (args.eleme2 !== undefined && args.eleme2 !== null) {
      this.eleme2 = args.eleme2;
    }
    if (args.mainlinemileagee5 !== undefined && args.mainlinemileagee5 !== null) {
      this.mainlinemileagee5 = args.mainlinemileagee5;
    }
    if (args.time !== undefined && args.time !== null) {
      this.time = args.time;
    }
    if (args.speed !== undefined && args.speed !== null) {
      this.speed = args.speed;
    }
    if (args.bearing !== undefined && args.bearing !== null) {
      this.bearing = args.bearing;
    }
    if (args.accuracym !== undefined && args.accuracym !== null) {
      this.accuracym = args.accuracym;
    }
    if (args.satellites !== undefined && args.satellites !== null) {
      this.satellites = args.satellites;
    }
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = args.provider;
    }
    if (args.zlfo !== undefined && args.zlfo !== null) {
      this.zlfo = args.zlfo;
    }
    if (args.mileages !== undefined && args.mileages !== null) {
      this.mileages = Thrift.copyList(args.mileages, [ttypes.Mileage]);
    }
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
  }
};
Crumb.prototype = {};
Crumb.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.late6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.lone6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.eleme2 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.mainlinemileagee5 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.DOUBLE) {
        this.speed = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.DOUBLE) {
        this.bearing = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.DOUBLE) {
        this.accuracym = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.satellites = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.provider = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.zlfo = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.SET) {
        var _size16 = 0;
        var _rtmp320;
        this.mileages = [];
        var _etype19 = 0;
        _rtmp320 = input.readSetBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.Mileage();
          elem22.read(input);
          this.mileages.push(elem22);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Crumb.prototype.write = function(output) {
  output.writeStructBegin('Crumb');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 2);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.late6 !== null && this.late6 !== undefined) {
    output.writeFieldBegin('late6', Thrift.Type.I32, 3);
    output.writeI32(this.late6);
    output.writeFieldEnd();
  }
  if (this.lone6 !== null && this.lone6 !== undefined) {
    output.writeFieldBegin('lone6', Thrift.Type.I32, 4);
    output.writeI32(this.lone6);
    output.writeFieldEnd();
  }
  if (this.eleme2 !== null && this.eleme2 !== undefined) {
    output.writeFieldBegin('eleme2', Thrift.Type.I32, 5);
    output.writeI32(this.eleme2);
    output.writeFieldEnd();
  }
  if (this.mainlinemileagee5 !== null && this.mainlinemileagee5 !== undefined) {
    output.writeFieldBegin('mainlinemileagee5', Thrift.Type.I32, 6);
    output.writeI32(this.mainlinemileagee5);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I64, 7);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  if (this.speed !== null && this.speed !== undefined) {
    output.writeFieldBegin('speed', Thrift.Type.DOUBLE, 8);
    output.writeDouble(this.speed);
    output.writeFieldEnd();
  }
  if (this.bearing !== null && this.bearing !== undefined) {
    output.writeFieldBegin('bearing', Thrift.Type.DOUBLE, 9);
    output.writeDouble(this.bearing);
    output.writeFieldEnd();
  }
  if (this.accuracym !== null && this.accuracym !== undefined) {
    output.writeFieldBegin('accuracym', Thrift.Type.DOUBLE, 10);
    output.writeDouble(this.accuracym);
    output.writeFieldEnd();
  }
  if (this.satellites !== null && this.satellites !== undefined) {
    output.writeFieldBegin('satellites', Thrift.Type.I32, 11);
    output.writeI32(this.satellites);
    output.writeFieldEnd();
  }
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.STRING, 12);
    output.writeString(this.provider);
    output.writeFieldEnd();
  }
  if (this.zlfo !== null && this.zlfo !== undefined) {
    output.writeFieldBegin('zlfo', Thrift.Type.I32, 13);
    output.writeI32(this.zlfo);
    output.writeFieldEnd();
  }
  if (this.mileages !== null && this.mileages !== undefined) {
    output.writeFieldBegin('mileages', Thrift.Type.SET, 14);
    output.writeSetBegin(Thrift.Type.STRUCT, this.mileages.length);
    for (var iter23 in this.mileages)
    {
      if (this.mileages.hasOwnProperty(iter23))
      {
        iter23 = this.mileages[iter23];
        iter23.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 15);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Notification = module.exports.Notification = function(args) {
  this.id = null;
  this.version = null;
  this.changeset_id = null;
  this.type = null;
  this.content = null;
  this.tags = null;
  this.resources = null;
  this.selector_ids = null;
  this.notify_user_id = null;
  this.triggerTime = null;
  this.target_user_id = null;
  this.target_id = null;
  this.target_resource_id = null;
  this.deleted = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.changeset_id !== undefined && args.changeset_id !== null) {
      this.changeset_id = args.changeset_id;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = args.content;
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [ttypes.Tag]);
    }
    if (args.resources !== undefined && args.resources !== null) {
      this.resources = Thrift.copyList(args.resources, [ttypes.Resource]);
    }
    if (args.selector_ids !== undefined && args.selector_ids !== null) {
      this.selector_ids = Thrift.copyList(args.selector_ids, [null]);
    }
    if (args.notify_user_id !== undefined && args.notify_user_id !== null) {
      this.notify_user_id = args.notify_user_id;
    }
    if (args.triggerTime !== undefined && args.triggerTime !== null) {
      this.triggerTime = args.triggerTime;
    }
    if (args.target_user_id !== undefined && args.target_user_id !== null) {
      this.target_user_id = args.target_user_id;
    }
    if (args.target_id !== undefined && args.target_id !== null) {
      this.target_id = args.target_id;
    }
    if (args.target_resource_id !== undefined && args.target_resource_id !== null) {
      this.target_resource_id = args.target_resource_id;
    }
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
  }
};
Notification.prototype = {};
Notification.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.changeset_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.SET) {
        var _size24 = 0;
        var _rtmp328;
        this.tags = [];
        var _etype27 = 0;
        _rtmp328 = input.readSetBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.Tag();
          elem30.read(input);
          this.tags.push(elem30);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.SET) {
        var _size31 = 0;
        var _rtmp335;
        this.resources = [];
        var _etype34 = 0;
        _rtmp335 = input.readSetBegin();
        _etype34 = _rtmp335.etype;
        _size31 = _rtmp335.size;
        for (var _i36 = 0; _i36 < _size31; ++_i36)
        {
          var elem37 = null;
          elem37 = new ttypes.Resource();
          elem37.read(input);
          this.resources.push(elem37);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.SET) {
        var _size38 = 0;
        var _rtmp342;
        this.selector_ids = [];
        var _etype41 = 0;
        _rtmp342 = input.readSetBegin();
        _etype41 = _rtmp342.etype;
        _size38 = _rtmp342.size;
        for (var _i43 = 0; _i43 < _size38; ++_i43)
        {
          var elem44 = null;
          elem44 = input.readI64();
          this.selector_ids.push(elem44);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.notify_user_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.triggerTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.target_user_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.target_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.target_resource_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Notification.prototype.write = function(output) {
  output.writeStructBegin('Notification');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 2);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.changeset_id !== null && this.changeset_id !== undefined) {
    output.writeFieldBegin('changeset_id', Thrift.Type.I64, 3);
    output.writeI64(this.changeset_id);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 4);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 5);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.SET, 6);
    output.writeSetBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter45 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter45))
      {
        iter45 = this.tags[iter45];
        iter45.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.resources !== null && this.resources !== undefined) {
    output.writeFieldBegin('resources', Thrift.Type.SET, 7);
    output.writeSetBegin(Thrift.Type.STRUCT, this.resources.length);
    for (var iter46 in this.resources)
    {
      if (this.resources.hasOwnProperty(iter46))
      {
        iter46 = this.resources[iter46];
        iter46.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.selector_ids !== null && this.selector_ids !== undefined) {
    output.writeFieldBegin('selector_ids', Thrift.Type.SET, 8);
    output.writeSetBegin(Thrift.Type.I64, this.selector_ids.length);
    for (var iter47 in this.selector_ids)
    {
      if (this.selector_ids.hasOwnProperty(iter47))
      {
        iter47 = this.selector_ids[iter47];
        output.writeI64(iter47);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.notify_user_id !== null && this.notify_user_id !== undefined) {
    output.writeFieldBegin('notify_user_id', Thrift.Type.I64, 9);
    output.writeI64(this.notify_user_id);
    output.writeFieldEnd();
  }
  if (this.triggerTime !== null && this.triggerTime !== undefined) {
    output.writeFieldBegin('triggerTime', Thrift.Type.I64, 10);
    output.writeI64(this.triggerTime);
    output.writeFieldEnd();
  }
  if (this.target_user_id !== null && this.target_user_id !== undefined) {
    output.writeFieldBegin('target_user_id', Thrift.Type.I64, 11);
    output.writeI64(this.target_user_id);
    output.writeFieldEnd();
  }
  if (this.target_id !== null && this.target_id !== undefined) {
    output.writeFieldBegin('target_id', Thrift.Type.I64, 12);
    output.writeI64(this.target_id);
    output.writeFieldEnd();
  }
  if (this.target_resource_id !== null && this.target_resource_id !== undefined) {
    output.writeFieldBegin('target_resource_id', Thrift.Type.I64, 13);
    output.writeI64(this.target_resource_id);
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 14);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Contest = module.exports.Contest = function(args) {
  this.id = null;
  this.version = null;
  this.changeset_id = null;
  this.title = null;
  this.description = null;
  this.tags = null;
  this.resources = null;
  this.selector_ids = null;
  this.startTime = null;
  this.endTime = null;
  this.deleted = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.changeset_id !== undefined && args.changeset_id !== null) {
      this.changeset_id = args.changeset_id;
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [ttypes.Tag]);
    }
    if (args.resources !== undefined && args.resources !== null) {
      this.resources = Thrift.copyList(args.resources, [ttypes.Resource]);
    }
    if (args.selector_ids !== undefined && args.selector_ids !== null) {
      this.selector_ids = Thrift.copyList(args.selector_ids, [null]);
    }
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined && args.endTime !== null) {
      this.endTime = args.endTime;
    }
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
  }
};
Contest.prototype = {};
Contest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.changeset_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.SET) {
        var _size48 = 0;
        var _rtmp352;
        this.tags = [];
        var _etype51 = 0;
        _rtmp352 = input.readSetBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new ttypes.Tag();
          elem54.read(input);
          this.tags.push(elem54);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.SET) {
        var _size55 = 0;
        var _rtmp359;
        this.resources = [];
        var _etype58 = 0;
        _rtmp359 = input.readSetBegin();
        _etype58 = _rtmp359.etype;
        _size55 = _rtmp359.size;
        for (var _i60 = 0; _i60 < _size55; ++_i60)
        {
          var elem61 = null;
          elem61 = new ttypes.Resource();
          elem61.read(input);
          this.resources.push(elem61);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.SET) {
        var _size62 = 0;
        var _rtmp366;
        this.selector_ids = [];
        var _etype65 = 0;
        _rtmp366 = input.readSetBegin();
        _etype65 = _rtmp366.etype;
        _size62 = _rtmp366.size;
        for (var _i67 = 0; _i67 < _size62; ++_i67)
        {
          var elem68 = null;
          elem68 = input.readI64();
          this.selector_ids.push(elem68);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.endTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Contest.prototype.write = function(output) {
  output.writeStructBegin('Contest');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 2);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.changeset_id !== null && this.changeset_id !== undefined) {
    output.writeFieldBegin('changeset_id', Thrift.Type.I64, 3);
    output.writeI64(this.changeset_id);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 4);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 5);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.SET, 6);
    output.writeSetBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter69 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter69))
      {
        iter69 = this.tags[iter69];
        iter69.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.resources !== null && this.resources !== undefined) {
    output.writeFieldBegin('resources', Thrift.Type.SET, 7);
    output.writeSetBegin(Thrift.Type.STRUCT, this.resources.length);
    for (var iter70 in this.resources)
    {
      if (this.resources.hasOwnProperty(iter70))
      {
        iter70 = this.resources[iter70];
        iter70.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.selector_ids !== null && this.selector_ids !== undefined) {
    output.writeFieldBegin('selector_ids', Thrift.Type.SET, 8);
    output.writeSetBegin(Thrift.Type.I64, this.selector_ids.length);
    for (var iter71 in this.selector_ids)
    {
      if (this.selector_ids.hasOwnProperty(iter71))
      {
        iter71 = this.selector_ids[iter71];
        output.writeI64(iter71);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 9);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.I64, 10);
    output.writeI64(this.endTime);
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 11);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var User = module.exports.User = function(args) {
  this.id = null;
  this.version = null;
  this.changeset_id = null;
  this.displayname = null;
  this.gender = null;
  this.tags = null;
  this.resources = null;
  this.user_location_history_set = null;
  this.votes = null;
  this.privilege_map = null;
  this.badges = null;
  this.reputation = null;
  this.deleted = null;
  this.leaderBoardPoints = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.changeset_id !== undefined && args.changeset_id !== null) {
      this.changeset_id = args.changeset_id;
    }
    if (args.displayname !== undefined && args.displayname !== null) {
      this.displayname = args.displayname;
    }
    if (args.gender !== undefined && args.gender !== null) {
      this.gender = args.gender;
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [ttypes.Tag]);
    }
    if (args.resources !== undefined && args.resources !== null) {
      this.resources = Thrift.copyList(args.resources, [ttypes.Resource]);
    }
    if (args.user_location_history_set !== undefined && args.user_location_history_set !== null) {
      this.user_location_history_set = Thrift.copyList(args.user_location_history_set, [null]);
    }
    if (args.votes !== undefined && args.votes !== null) {
      this.votes = Thrift.copyList(args.votes, [ttypes.Vote]);
    }
    if (args.privilege_map !== undefined && args.privilege_map !== null) {
      this.privilege_map = Thrift.copyMap(args.privilege_map, [Thrift.copyList, null]);
    }
    if (args.badges !== undefined && args.badges !== null) {
      this.badges = Thrift.copyList(args.badges, [null]);
    }
    if (args.reputation !== undefined && args.reputation !== null) {
      this.reputation = args.reputation;
    }
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
    if (args.leaderBoardPoints !== undefined && args.leaderBoardPoints !== null) {
      this.leaderBoardPoints = Thrift.copyMap(args.leaderBoardPoints, [null]);
    }
  }
};
User.prototype = {};
User.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.changeset_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.displayname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.gender = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.SET) {
        var _size72 = 0;
        var _rtmp376;
        this.tags = [];
        var _etype75 = 0;
        _rtmp376 = input.readSetBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new ttypes.Tag();
          elem78.read(input);
          this.tags.push(elem78);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.SET) {
        var _size79 = 0;
        var _rtmp383;
        this.resources = [];
        var _etype82 = 0;
        _rtmp383 = input.readSetBegin();
        _etype82 = _rtmp383.etype;
        _size79 = _rtmp383.size;
        for (var _i84 = 0; _i84 < _size79; ++_i84)
        {
          var elem85 = null;
          elem85 = new ttypes.Resource();
          elem85.read(input);
          this.resources.push(elem85);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.SET) {
        var _size86 = 0;
        var _rtmp390;
        this.user_location_history_set = [];
        var _etype89 = 0;
        _rtmp390 = input.readSetBegin();
        _etype89 = _rtmp390.etype;
        _size86 = _rtmp390.size;
        for (var _i91 = 0; _i91 < _size86; ++_i91)
        {
          var elem92 = null;
          elem92 = new ttypes.UserLocationHistory();
          elem92.read(input);
          this.user_location_history_set.push(elem92);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.SET) {
        var _size93 = 0;
        var _rtmp397;
        this.votes = [];
        var _etype96 = 0;
        _rtmp397 = input.readSetBegin();
        _etype96 = _rtmp397.etype;
        _size93 = _rtmp397.size;
        for (var _i98 = 0; _i98 < _size93; ++_i98)
        {
          var elem99 = null;
          elem99 = new ttypes.Vote();
          elem99.read(input);
          this.votes.push(elem99);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.MAP) {
        var _size100 = 0;
        var _rtmp3104;
        this.privilege_map = {};
        var _ktype101 = 0;
        var _vtype102 = 0;
        _rtmp3104 = input.readMapBegin();
        _ktype101 = _rtmp3104.ktype;
        _vtype102 = _rtmp3104.vtype;
        _size100 = _rtmp3104.size;
        for (var _i105 = 0; _i105 < _size100; ++_i105)
        {
          var key106 = null;
          var val107 = null;
          key106 = input.readI64();
          var _size108 = 0;
          var _rtmp3112;
          val107 = [];
          var _etype111 = 0;
          _rtmp3112 = input.readSetBegin();
          _etype111 = _rtmp3112.etype;
          _size108 = _rtmp3112.size;
          for (var _i113 = 0; _i113 < _size108; ++_i113)
          {
            var elem114 = null;
            elem114 = input.readI32();
            val107.push(elem114);
          }
          input.readSetEnd();
          this.privilege_map[key106] = val107;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.SET) {
        var _size115 = 0;
        var _rtmp3119;
        this.badges = [];
        var _etype118 = 0;
        _rtmp3119 = input.readSetBegin();
        _etype118 = _rtmp3119.etype;
        _size115 = _rtmp3119.size;
        for (var _i120 = 0; _i120 < _size115; ++_i120)
        {
          var elem121 = null;
          elem121 = input.readI32();
          this.badges.push(elem121);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.reputation = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.MAP) {
        var _size122 = 0;
        var _rtmp3126;
        this.leaderBoardPoints = {};
        var _ktype123 = 0;
        var _vtype124 = 0;
        _rtmp3126 = input.readMapBegin();
        _ktype123 = _rtmp3126.ktype;
        _vtype124 = _rtmp3126.vtype;
        _size122 = _rtmp3126.size;
        for (var _i127 = 0; _i127 < _size122; ++_i127)
        {
          var key128 = null;
          var val129 = null;
          key128 = input.readI64();
          val129 = input.readI32();
          this.leaderBoardPoints[key128] = val129;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

User.prototype.write = function(output) {
  output.writeStructBegin('User');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 2);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.changeset_id !== null && this.changeset_id !== undefined) {
    output.writeFieldBegin('changeset_id', Thrift.Type.I64, 3);
    output.writeI64(this.changeset_id);
    output.writeFieldEnd();
  }
  if (this.displayname !== null && this.displayname !== undefined) {
    output.writeFieldBegin('displayname', Thrift.Type.STRING, 4);
    output.writeString(this.displayname);
    output.writeFieldEnd();
  }
  if (this.gender !== null && this.gender !== undefined) {
    output.writeFieldBegin('gender', Thrift.Type.STRING, 5);
    output.writeString(this.gender);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.SET, 6);
    output.writeSetBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter130 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter130))
      {
        iter130 = this.tags[iter130];
        iter130.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.resources !== null && this.resources !== undefined) {
    output.writeFieldBegin('resources', Thrift.Type.SET, 7);
    output.writeSetBegin(Thrift.Type.STRUCT, this.resources.length);
    for (var iter131 in this.resources)
    {
      if (this.resources.hasOwnProperty(iter131))
      {
        iter131 = this.resources[iter131];
        iter131.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.user_location_history_set !== null && this.user_location_history_set !== undefined) {
    output.writeFieldBegin('user_location_history_set', Thrift.Type.SET, 8);
    output.writeSetBegin(Thrift.Type.STRUCT, this.user_location_history_set.length);
    for (var iter132 in this.user_location_history_set)
    {
      if (this.user_location_history_set.hasOwnProperty(iter132))
      {
        iter132 = this.user_location_history_set[iter132];
        iter132.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.votes !== null && this.votes !== undefined) {
    output.writeFieldBegin('votes', Thrift.Type.SET, 9);
    output.writeSetBegin(Thrift.Type.STRUCT, this.votes.length);
    for (var iter133 in this.votes)
    {
      if (this.votes.hasOwnProperty(iter133))
      {
        iter133 = this.votes[iter133];
        iter133.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.privilege_map !== null && this.privilege_map !== undefined) {
    output.writeFieldBegin('privilege_map', Thrift.Type.MAP, 10);
    output.writeMapBegin(Thrift.Type.I64, Thrift.Type.SET, Thrift.objectLength(this.privilege_map));
    for (var kiter134 in this.privilege_map)
    {
      if (this.privilege_map.hasOwnProperty(kiter134))
      {
        var viter135 = this.privilege_map[kiter134];
        output.writeI64(kiter134);
        output.writeSetBegin(Thrift.Type.I32, viter135.length);
        for (var iter136 in viter135)
        {
          if (viter135.hasOwnProperty(iter136))
          {
            iter136 = viter135[iter136];
            output.writeI32(iter136);
          }
        }
        output.writeSetEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.badges !== null && this.badges !== undefined) {
    output.writeFieldBegin('badges', Thrift.Type.SET, 11);
    output.writeSetBegin(Thrift.Type.I32, this.badges.length);
    for (var iter137 in this.badges)
    {
      if (this.badges.hasOwnProperty(iter137))
      {
        iter137 = this.badges[iter137];
        output.writeI32(iter137);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.reputation !== null && this.reputation !== undefined) {
    output.writeFieldBegin('reputation', Thrift.Type.I32, 12);
    output.writeI32(this.reputation);
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 13);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  if (this.leaderBoardPoints !== null && this.leaderBoardPoints !== undefined) {
    output.writeFieldBegin('leaderBoardPoints', Thrift.Type.MAP, 14);
    output.writeMapBegin(Thrift.Type.I64, Thrift.Type.I32, Thrift.objectLength(this.leaderBoardPoints));
    for (var kiter138 in this.leaderBoardPoints)
    {
      if (this.leaderBoardPoints.hasOwnProperty(kiter138))
      {
        var viter139 = this.leaderBoardPoints[kiter138];
        output.writeI64(kiter138);
        output.writeI32(viter139);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Point = module.exports.Point = function(args) {
  this.id = null;
  this.version = null;
  this.changeset_id = null;
  this.owner_id = null;
  this.name = null;
  this.description = null;
  this.late6 = null;
  this.lone6 = null;
  this.eleme2 = null;
  this.zlfo = null;
  this.tags = null;
  this.resources = null;
  this.selector_ids = null;
  this.mileages = null;
  this.deleted = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.changeset_id !== undefined && args.changeset_id !== null) {
      this.changeset_id = args.changeset_id;
    }
    if (args.owner_id !== undefined && args.owner_id !== null) {
      this.owner_id = args.owner_id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.late6 !== undefined && args.late6 !== null) {
      this.late6 = args.late6;
    }
    if (args.lone6 !== undefined && args.lone6 !== null) {
      this.lone6 = args.lone6;
    }
    if (args.eleme2 !== undefined && args.eleme2 !== null) {
      this.eleme2 = args.eleme2;
    }
    if (args.zlfo !== undefined && args.zlfo !== null) {
      this.zlfo = args.zlfo;
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [ttypes.Tag]);
    }
    if (args.resources !== undefined && args.resources !== null) {
      this.resources = Thrift.copyList(args.resources, [ttypes.Resource]);
    }
    if (args.selector_ids !== undefined && args.selector_ids !== null) {
      this.selector_ids = Thrift.copyList(args.selector_ids, [null]);
    }
    if (args.mileages !== undefined && args.mileages !== null) {
      this.mileages = Thrift.copyList(args.mileages, [ttypes.Mileage]);
    }
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
  }
};
Point.prototype = {};
Point.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.changeset_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.owner_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.late6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.lone6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.eleme2 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.zlfo = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.SET) {
        var _size140 = 0;
        var _rtmp3144;
        this.tags = [];
        var _etype143 = 0;
        _rtmp3144 = input.readSetBegin();
        _etype143 = _rtmp3144.etype;
        _size140 = _rtmp3144.size;
        for (var _i145 = 0; _i145 < _size140; ++_i145)
        {
          var elem146 = null;
          elem146 = new ttypes.Tag();
          elem146.read(input);
          this.tags.push(elem146);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.SET) {
        var _size147 = 0;
        var _rtmp3151;
        this.resources = [];
        var _etype150 = 0;
        _rtmp3151 = input.readSetBegin();
        _etype150 = _rtmp3151.etype;
        _size147 = _rtmp3151.size;
        for (var _i152 = 0; _i152 < _size147; ++_i152)
        {
          var elem153 = null;
          elem153 = new ttypes.Resource();
          elem153.read(input);
          this.resources.push(elem153);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.SET) {
        var _size154 = 0;
        var _rtmp3158;
        this.selector_ids = [];
        var _etype157 = 0;
        _rtmp3158 = input.readSetBegin();
        _etype157 = _rtmp3158.etype;
        _size154 = _rtmp3158.size;
        for (var _i159 = 0; _i159 < _size154; ++_i159)
        {
          var elem160 = null;
          elem160 = input.readI64();
          this.selector_ids.push(elem160);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.SET) {
        var _size161 = 0;
        var _rtmp3165;
        this.mileages = [];
        var _etype164 = 0;
        _rtmp3165 = input.readSetBegin();
        _etype164 = _rtmp3165.etype;
        _size161 = _rtmp3165.size;
        for (var _i166 = 0; _i166 < _size161; ++_i166)
        {
          var elem167 = null;
          elem167 = new ttypes.Mileage();
          elem167.read(input);
          this.mileages.push(elem167);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Point.prototype.write = function(output) {
  output.writeStructBegin('Point');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 2);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.changeset_id !== null && this.changeset_id !== undefined) {
    output.writeFieldBegin('changeset_id', Thrift.Type.I64, 3);
    output.writeI64(this.changeset_id);
    output.writeFieldEnd();
  }
  if (this.owner_id !== null && this.owner_id !== undefined) {
    output.writeFieldBegin('owner_id', Thrift.Type.I64, 4);
    output.writeI64(this.owner_id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 5);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 6);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.late6 !== null && this.late6 !== undefined) {
    output.writeFieldBegin('late6', Thrift.Type.I32, 7);
    output.writeI32(this.late6);
    output.writeFieldEnd();
  }
  if (this.lone6 !== null && this.lone6 !== undefined) {
    output.writeFieldBegin('lone6', Thrift.Type.I32, 8);
    output.writeI32(this.lone6);
    output.writeFieldEnd();
  }
  if (this.eleme2 !== null && this.eleme2 !== undefined) {
    output.writeFieldBegin('eleme2', Thrift.Type.I32, 9);
    output.writeI32(this.eleme2);
    output.writeFieldEnd();
  }
  if (this.zlfo !== null && this.zlfo !== undefined) {
    output.writeFieldBegin('zlfo', Thrift.Type.I32, 10);
    output.writeI32(this.zlfo);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.SET, 11);
    output.writeSetBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter168 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter168))
      {
        iter168 = this.tags[iter168];
        iter168.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.resources !== null && this.resources !== undefined) {
    output.writeFieldBegin('resources', Thrift.Type.SET, 12);
    output.writeSetBegin(Thrift.Type.STRUCT, this.resources.length);
    for (var iter169 in this.resources)
    {
      if (this.resources.hasOwnProperty(iter169))
      {
        iter169 = this.resources[iter169];
        iter169.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.selector_ids !== null && this.selector_ids !== undefined) {
    output.writeFieldBegin('selector_ids', Thrift.Type.SET, 13);
    output.writeSetBegin(Thrift.Type.I64, this.selector_ids.length);
    for (var iter170 in this.selector_ids)
    {
      if (this.selector_ids.hasOwnProperty(iter170))
      {
        iter170 = this.selector_ids[iter170];
        output.writeI64(iter170);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.mileages !== null && this.mileages !== undefined) {
    output.writeFieldBegin('mileages', Thrift.Type.SET, 14);
    output.writeSetBegin(Thrift.Type.STRUCT, this.mileages.length);
    for (var iter171 in this.mileages)
    {
      if (this.mileages.hasOwnProperty(iter171))
      {
        iter171 = this.mileages[iter171];
        iter171.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 15);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserLocationHistory = module.exports.UserLocationHistory = function(args) {
  this.id = null;
  this.version = null;
  this.crumbs = null;
  this.selector_ids = null;
  this.deleted = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.crumbs !== undefined && args.crumbs !== null) {
      this.crumbs = Thrift.copyList(args.crumbs, [ttypes.Crumb]);
    }
    if (args.selector_ids !== undefined && args.selector_ids !== null) {
      this.selector_ids = Thrift.copyList(args.selector_ids, [null]);
    }
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
  }
};
UserLocationHistory.prototype = {};
UserLocationHistory.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size172 = 0;
        var _rtmp3176;
        this.crumbs = [];
        var _etype175 = 0;
        _rtmp3176 = input.readListBegin();
        _etype175 = _rtmp3176.etype;
        _size172 = _rtmp3176.size;
        for (var _i177 = 0; _i177 < _size172; ++_i177)
        {
          var elem178 = null;
          elem178 = new ttypes.Crumb();
          elem178.read(input);
          this.crumbs.push(elem178);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.SET) {
        var _size179 = 0;
        var _rtmp3183;
        this.selector_ids = [];
        var _etype182 = 0;
        _rtmp3183 = input.readSetBegin();
        _etype182 = _rtmp3183.etype;
        _size179 = _rtmp3183.size;
        for (var _i184 = 0; _i184 < _size179; ++_i184)
        {
          var elem185 = null;
          elem185 = input.readI64();
          this.selector_ids.push(elem185);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserLocationHistory.prototype.write = function(output) {
  output.writeStructBegin('UserLocationHistory');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 2);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.crumbs !== null && this.crumbs !== undefined) {
    output.writeFieldBegin('crumbs', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.crumbs.length);
    for (var iter186 in this.crumbs)
    {
      if (this.crumbs.hasOwnProperty(iter186))
      {
        iter186 = this.crumbs[iter186];
        iter186.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.selector_ids !== null && this.selector_ids !== undefined) {
    output.writeFieldBegin('selector_ids', Thrift.Type.SET, 4);
    output.writeSetBegin(Thrift.Type.I64, this.selector_ids.length);
    for (var iter187 in this.selector_ids)
    {
      if (this.selector_ids.hasOwnProperty(iter187))
      {
        iter187 = this.selector_ids[iter187];
        output.writeI64(iter187);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 5);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PathPoint = module.exports.PathPoint = function(args) {
  this.id = null;
  this.version = null;
  this.late6 = null;
  this.lone6 = null;
  this.eleme2 = null;
  this.mainlinemileagee5 = null;
  this.zlfo = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.late6 !== undefined && args.late6 !== null) {
      this.late6 = args.late6;
    }
    if (args.lone6 !== undefined && args.lone6 !== null) {
      this.lone6 = args.lone6;
    }
    if (args.eleme2 !== undefined && args.eleme2 !== null) {
      this.eleme2 = args.eleme2;
    }
    if (args.mainlinemileagee5 !== undefined && args.mainlinemileagee5 !== null) {
      this.mainlinemileagee5 = args.mainlinemileagee5;
    }
    if (args.zlfo !== undefined && args.zlfo !== null) {
      this.zlfo = args.zlfo;
    }
  }
};
PathPoint.prototype = {};
PathPoint.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.late6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.lone6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.eleme2 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.mainlinemileagee5 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.zlfo = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PathPoint.prototype.write = function(output) {
  output.writeStructBegin('PathPoint');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 2);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.late6 !== null && this.late6 !== undefined) {
    output.writeFieldBegin('late6', Thrift.Type.I32, 3);
    output.writeI32(this.late6);
    output.writeFieldEnd();
  }
  if (this.lone6 !== null && this.lone6 !== undefined) {
    output.writeFieldBegin('lone6', Thrift.Type.I32, 4);
    output.writeI32(this.lone6);
    output.writeFieldEnd();
  }
  if (this.eleme2 !== null && this.eleme2 !== undefined) {
    output.writeFieldBegin('eleme2', Thrift.Type.I32, 5);
    output.writeI32(this.eleme2);
    output.writeFieldEnd();
  }
  if (this.mainlinemileagee5 !== null && this.mainlinemileagee5 !== undefined) {
    output.writeFieldBegin('mainlinemileagee5', Thrift.Type.I32, 6);
    output.writeI32(this.mainlinemileagee5);
    output.writeFieldEnd();
  }
  if (this.zlfo !== null && this.zlfo !== undefined) {
    output.writeFieldBegin('zlfo', Thrift.Type.I32, 7);
    output.writeI32(this.zlfo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Path = module.exports.Path = function(args) {
  this.id = null;
  this.version = null;
  this.changeset_id = null;
  this.owner_id = null;
  this.pathpoints = null;
  this.deleted = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.changeset_id !== undefined && args.changeset_id !== null) {
      this.changeset_id = args.changeset_id;
    }
    if (args.owner_id !== undefined && args.owner_id !== null) {
      this.owner_id = args.owner_id;
    }
    if (args.pathpoints !== undefined && args.pathpoints !== null) {
      this.pathpoints = Thrift.copyList(args.pathpoints, [ttypes.PathPoint]);
    }
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
  }
};
Path.prototype = {};
Path.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.changeset_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.owner_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size188 = 0;
        var _rtmp3192;
        this.pathpoints = [];
        var _etype191 = 0;
        _rtmp3192 = input.readListBegin();
        _etype191 = _rtmp3192.etype;
        _size188 = _rtmp3192.size;
        for (var _i193 = 0; _i193 < _size188; ++_i193)
        {
          var elem194 = null;
          elem194 = new ttypes.PathPoint();
          elem194.read(input);
          this.pathpoints.push(elem194);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Path.prototype.write = function(output) {
  output.writeStructBegin('Path');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 2);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.changeset_id !== null && this.changeset_id !== undefined) {
    output.writeFieldBegin('changeset_id', Thrift.Type.I64, 3);
    output.writeI64(this.changeset_id);
    output.writeFieldEnd();
  }
  if (this.owner_id !== null && this.owner_id !== undefined) {
    output.writeFieldBegin('owner_id', Thrift.Type.I64, 4);
    output.writeI64(this.owner_id);
    output.writeFieldEnd();
  }
  if (this.pathpoints !== null && this.pathpoints !== undefined) {
    output.writeFieldBegin('pathpoints', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.pathpoints.length);
    for (var iter195 in this.pathpoints)
    {
      if (this.pathpoints.hasOwnProperty(iter195))
      {
        iter195 = this.pathpoints[iter195];
        iter195.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 6);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Track = module.exports.Track = function(args) {
  this.id = null;
  this.version = null;
  this.changeset_id = null;
  this.owner_id = null;
  this.name = null;
  this.description = null;
  this.swlate6 = null;
  this.swlone6 = null;
  this.nelate6 = null;
  this.nelone6 = null;
  this.path = null;
  this.tags = null;
  this.resources = null;
  this.selector_ids = null;
  this.deleted = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.changeset_id !== undefined && args.changeset_id !== null) {
      this.changeset_id = args.changeset_id;
    }
    if (args.owner_id !== undefined && args.owner_id !== null) {
      this.owner_id = args.owner_id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.swlate6 !== undefined && args.swlate6 !== null) {
      this.swlate6 = args.swlate6;
    }
    if (args.swlone6 !== undefined && args.swlone6 !== null) {
      this.swlone6 = args.swlone6;
    }
    if (args.nelate6 !== undefined && args.nelate6 !== null) {
      this.nelate6 = args.nelate6;
    }
    if (args.nelone6 !== undefined && args.nelone6 !== null) {
      this.nelone6 = args.nelone6;
    }
    if (args.path !== undefined && args.path !== null) {
      this.path = new ttypes.Path(args.path);
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [ttypes.Tag]);
    }
    if (args.resources !== undefined && args.resources !== null) {
      this.resources = Thrift.copyList(args.resources, [ttypes.Resource]);
    }
    if (args.selector_ids !== undefined && args.selector_ids !== null) {
      this.selector_ids = Thrift.copyList(args.selector_ids, [null]);
    }
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
  }
};
Track.prototype = {};
Track.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.changeset_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.owner_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.swlate6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.swlone6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.nelate6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.nelone6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.path = new ttypes.Path();
        this.path.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.SET) {
        var _size196 = 0;
        var _rtmp3200;
        this.tags = [];
        var _etype199 = 0;
        _rtmp3200 = input.readSetBegin();
        _etype199 = _rtmp3200.etype;
        _size196 = _rtmp3200.size;
        for (var _i201 = 0; _i201 < _size196; ++_i201)
        {
          var elem202 = null;
          elem202 = new ttypes.Tag();
          elem202.read(input);
          this.tags.push(elem202);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.SET) {
        var _size203 = 0;
        var _rtmp3207;
        this.resources = [];
        var _etype206 = 0;
        _rtmp3207 = input.readSetBegin();
        _etype206 = _rtmp3207.etype;
        _size203 = _rtmp3207.size;
        for (var _i208 = 0; _i208 < _size203; ++_i208)
        {
          var elem209 = null;
          elem209 = new ttypes.Resource();
          elem209.read(input);
          this.resources.push(elem209);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.SET) {
        var _size210 = 0;
        var _rtmp3214;
        this.selector_ids = [];
        var _etype213 = 0;
        _rtmp3214 = input.readSetBegin();
        _etype213 = _rtmp3214.etype;
        _size210 = _rtmp3214.size;
        for (var _i215 = 0; _i215 < _size210; ++_i215)
        {
          var elem216 = null;
          elem216 = input.readI64();
          this.selector_ids.push(elem216);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Track.prototype.write = function(output) {
  output.writeStructBegin('Track');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 2);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.changeset_id !== null && this.changeset_id !== undefined) {
    output.writeFieldBegin('changeset_id', Thrift.Type.I64, 3);
    output.writeI64(this.changeset_id);
    output.writeFieldEnd();
  }
  if (this.owner_id !== null && this.owner_id !== undefined) {
    output.writeFieldBegin('owner_id', Thrift.Type.I64, 4);
    output.writeI64(this.owner_id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 5);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 6);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.swlate6 !== null && this.swlate6 !== undefined) {
    output.writeFieldBegin('swlate6', Thrift.Type.I32, 7);
    output.writeI32(this.swlate6);
    output.writeFieldEnd();
  }
  if (this.swlone6 !== null && this.swlone6 !== undefined) {
    output.writeFieldBegin('swlone6', Thrift.Type.I32, 8);
    output.writeI32(this.swlone6);
    output.writeFieldEnd();
  }
  if (this.nelate6 !== null && this.nelate6 !== undefined) {
    output.writeFieldBegin('nelate6', Thrift.Type.I32, 9);
    output.writeI32(this.nelate6);
    output.writeFieldEnd();
  }
  if (this.nelone6 !== null && this.nelone6 !== undefined) {
    output.writeFieldBegin('nelone6', Thrift.Type.I32, 10);
    output.writeI32(this.nelone6);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRUCT, 11);
    this.path.write(output);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.SET, 12);
    output.writeSetBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter217 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter217))
      {
        iter217 = this.tags[iter217];
        iter217.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.resources !== null && this.resources !== undefined) {
    output.writeFieldBegin('resources', Thrift.Type.SET, 13);
    output.writeSetBegin(Thrift.Type.STRUCT, this.resources.length);
    for (var iter218 in this.resources)
    {
      if (this.resources.hasOwnProperty(iter218))
      {
        iter218 = this.resources[iter218];
        iter218.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.selector_ids !== null && this.selector_ids !== undefined) {
    output.writeFieldBegin('selector_ids', Thrift.Type.SET, 14);
    output.writeSetBegin(Thrift.Type.I64, this.selector_ids.length);
    for (var iter219 in this.selector_ids)
    {
      if (this.selector_ids.hasOwnProperty(iter219))
      {
        iter219 = this.selector_ids[iter219];
        output.writeI64(iter219);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 15);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RelationMember = module.exports.RelationMember = function(args) {
  this.node_id = null;
  this.member_role = null;
  this.member_type = null;
  this.deleted = null;
  if (args) {
    if (args.node_id !== undefined && args.node_id !== null) {
      this.node_id = args.node_id;
    }
    if (args.member_role !== undefined && args.member_role !== null) {
      this.member_role = args.member_role;
    }
    if (args.member_type !== undefined && args.member_type !== null) {
      this.member_type = args.member_type;
    }
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
  }
};
RelationMember.prototype = {};
RelationMember.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.node_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.member_role = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.member_type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RelationMember.prototype.write = function(output) {
  output.writeStructBegin('RelationMember');
  if (this.node_id !== null && this.node_id !== undefined) {
    output.writeFieldBegin('node_id', Thrift.Type.I64, 1);
    output.writeI64(this.node_id);
    output.writeFieldEnd();
  }
  if (this.member_role !== null && this.member_role !== undefined) {
    output.writeFieldBegin('member_role', Thrift.Type.STRING, 2);
    output.writeString(this.member_role);
    output.writeFieldEnd();
  }
  if (this.member_type !== null && this.member_type !== undefined) {
    output.writeFieldBegin('member_type', Thrift.Type.STRING, 3);
    output.writeString(this.member_type);
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 4);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Relation = module.exports.Relation = function(args) {
  this.id = null;
  this.version = null;
  this.changeset_id = null;
  this.owner_id = null;
  this.members = null;
  this.tags = null;
  this.resources = null;
  this.selector_ids = null;
  this.mileages = null;
  this.deleted = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.changeset_id !== undefined && args.changeset_id !== null) {
      this.changeset_id = args.changeset_id;
    }
    if (args.owner_id !== undefined && args.owner_id !== null) {
      this.owner_id = args.owner_id;
    }
    if (args.members !== undefined && args.members !== null) {
      this.members = Thrift.copyList(args.members, [ttypes.RelationMember]);
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [ttypes.Tag]);
    }
    if (args.resources !== undefined && args.resources !== null) {
      this.resources = Thrift.copyList(args.resources, [ttypes.Resource]);
    }
    if (args.selector_ids !== undefined && args.selector_ids !== null) {
      this.selector_ids = Thrift.copyList(args.selector_ids, [null]);
    }
    if (args.mileages !== undefined && args.mileages !== null) {
      this.mileages = Thrift.copyList(args.mileages, [ttypes.Mileage]);
    }
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
  }
};
Relation.prototype = {};
Relation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.changeset_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.owner_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size220 = 0;
        var _rtmp3224;
        this.members = [];
        var _etype223 = 0;
        _rtmp3224 = input.readListBegin();
        _etype223 = _rtmp3224.etype;
        _size220 = _rtmp3224.size;
        for (var _i225 = 0; _i225 < _size220; ++_i225)
        {
          var elem226 = null;
          elem226 = new ttypes.RelationMember();
          elem226.read(input);
          this.members.push(elem226);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.SET) {
        var _size227 = 0;
        var _rtmp3231;
        this.tags = [];
        var _etype230 = 0;
        _rtmp3231 = input.readSetBegin();
        _etype230 = _rtmp3231.etype;
        _size227 = _rtmp3231.size;
        for (var _i232 = 0; _i232 < _size227; ++_i232)
        {
          var elem233 = null;
          elem233 = new ttypes.Tag();
          elem233.read(input);
          this.tags.push(elem233);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.SET) {
        var _size234 = 0;
        var _rtmp3238;
        this.resources = [];
        var _etype237 = 0;
        _rtmp3238 = input.readSetBegin();
        _etype237 = _rtmp3238.etype;
        _size234 = _rtmp3238.size;
        for (var _i239 = 0; _i239 < _size234; ++_i239)
        {
          var elem240 = null;
          elem240 = new ttypes.Resource();
          elem240.read(input);
          this.resources.push(elem240);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.SET) {
        var _size241 = 0;
        var _rtmp3245;
        this.selector_ids = [];
        var _etype244 = 0;
        _rtmp3245 = input.readSetBegin();
        _etype244 = _rtmp3245.etype;
        _size241 = _rtmp3245.size;
        for (var _i246 = 0; _i246 < _size241; ++_i246)
        {
          var elem247 = null;
          elem247 = input.readI64();
          this.selector_ids.push(elem247);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.SET) {
        var _size248 = 0;
        var _rtmp3252;
        this.mileages = [];
        var _etype251 = 0;
        _rtmp3252 = input.readSetBegin();
        _etype251 = _rtmp3252.etype;
        _size248 = _rtmp3252.size;
        for (var _i253 = 0; _i253 < _size248; ++_i253)
        {
          var elem254 = null;
          elem254 = new ttypes.Mileage();
          elem254.read(input);
          this.mileages.push(elem254);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Relation.prototype.write = function(output) {
  output.writeStructBegin('Relation');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 2);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.changeset_id !== null && this.changeset_id !== undefined) {
    output.writeFieldBegin('changeset_id', Thrift.Type.I64, 3);
    output.writeI64(this.changeset_id);
    output.writeFieldEnd();
  }
  if (this.owner_id !== null && this.owner_id !== undefined) {
    output.writeFieldBegin('owner_id', Thrift.Type.I64, 4);
    output.writeI64(this.owner_id);
    output.writeFieldEnd();
  }
  if (this.members !== null && this.members !== undefined) {
    output.writeFieldBegin('members', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.members.length);
    for (var iter255 in this.members)
    {
      if (this.members.hasOwnProperty(iter255))
      {
        iter255 = this.members[iter255];
        iter255.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.SET, 6);
    output.writeSetBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter256 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter256))
      {
        iter256 = this.tags[iter256];
        iter256.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.resources !== null && this.resources !== undefined) {
    output.writeFieldBegin('resources', Thrift.Type.SET, 7);
    output.writeSetBegin(Thrift.Type.STRUCT, this.resources.length);
    for (var iter257 in this.resources)
    {
      if (this.resources.hasOwnProperty(iter257))
      {
        iter257 = this.resources[iter257];
        iter257.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.selector_ids !== null && this.selector_ids !== undefined) {
    output.writeFieldBegin('selector_ids', Thrift.Type.SET, 8);
    output.writeSetBegin(Thrift.Type.I64, this.selector_ids.length);
    for (var iter258 in this.selector_ids)
    {
      if (this.selector_ids.hasOwnProperty(iter258))
      {
        iter258 = this.selector_ids[iter258];
        output.writeI64(iter258);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.mileages !== null && this.mileages !== undefined) {
    output.writeFieldBegin('mileages', Thrift.Type.SET, 9);
    output.writeSetBegin(Thrift.Type.STRUCT, this.mileages.length);
    for (var iter259 in this.mileages)
    {
      if (this.mileages.hasOwnProperty(iter259))
      {
        iter259 = this.mileages[iter259];
        iter259.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 10);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Changeset = module.exports.Changeset = function(args) {
  this.id = null;
  this.user_id = null;
  this.createtime = null;
  this.closetime = null;
  this.committime = null;
  this.minlate6 = null;
  this.maxlate6 = null;
  this.minlone6 = null;
  this.maxlone6 = null;
  this.numchanges = null;
  this.tags = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.user_id !== undefined && args.user_id !== null) {
      this.user_id = args.user_id;
    }
    if (args.createtime !== undefined && args.createtime !== null) {
      this.createtime = args.createtime;
    }
    if (args.closetime !== undefined && args.closetime !== null) {
      this.closetime = args.closetime;
    }
    if (args.committime !== undefined && args.committime !== null) {
      this.committime = args.committime;
    }
    if (args.minlate6 !== undefined && args.minlate6 !== null) {
      this.minlate6 = args.minlate6;
    }
    if (args.maxlate6 !== undefined && args.maxlate6 !== null) {
      this.maxlate6 = args.maxlate6;
    }
    if (args.minlone6 !== undefined && args.minlone6 !== null) {
      this.minlone6 = args.minlone6;
    }
    if (args.maxlone6 !== undefined && args.maxlone6 !== null) {
      this.maxlone6 = args.maxlone6;
    }
    if (args.numchanges !== undefined && args.numchanges !== null) {
      this.numchanges = args.numchanges;
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [ttypes.Tag]);
    }
  }
};
Changeset.prototype = {};
Changeset.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.user_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.createtime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.closetime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.committime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.minlate6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.maxlate6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.minlone6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.maxlone6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.numchanges = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.SET) {
        var _size260 = 0;
        var _rtmp3264;
        this.tags = [];
        var _etype263 = 0;
        _rtmp3264 = input.readSetBegin();
        _etype263 = _rtmp3264.etype;
        _size260 = _rtmp3264.size;
        for (var _i265 = 0; _i265 < _size260; ++_i265)
        {
          var elem266 = null;
          elem266 = new ttypes.Tag();
          elem266.read(input);
          this.tags.push(elem266);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Changeset.prototype.write = function(output) {
  output.writeStructBegin('Changeset');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.user_id !== null && this.user_id !== undefined) {
    output.writeFieldBegin('user_id', Thrift.Type.I64, 2);
    output.writeI64(this.user_id);
    output.writeFieldEnd();
  }
  if (this.createtime !== null && this.createtime !== undefined) {
    output.writeFieldBegin('createtime', Thrift.Type.I64, 3);
    output.writeI64(this.createtime);
    output.writeFieldEnd();
  }
  if (this.closetime !== null && this.closetime !== undefined) {
    output.writeFieldBegin('closetime', Thrift.Type.I64, 4);
    output.writeI64(this.closetime);
    output.writeFieldEnd();
  }
  if (this.committime !== null && this.committime !== undefined) {
    output.writeFieldBegin('committime', Thrift.Type.I64, 5);
    output.writeI64(this.committime);
    output.writeFieldEnd();
  }
  if (this.minlate6 !== null && this.minlate6 !== undefined) {
    output.writeFieldBegin('minlate6', Thrift.Type.I32, 6);
    output.writeI32(this.minlate6);
    output.writeFieldEnd();
  }
  if (this.maxlate6 !== null && this.maxlate6 !== undefined) {
    output.writeFieldBegin('maxlate6', Thrift.Type.I32, 7);
    output.writeI32(this.maxlate6);
    output.writeFieldEnd();
  }
  if (this.minlone6 !== null && this.minlone6 !== undefined) {
    output.writeFieldBegin('minlone6', Thrift.Type.I32, 8);
    output.writeI32(this.minlone6);
    output.writeFieldEnd();
  }
  if (this.maxlone6 !== null && this.maxlone6 !== undefined) {
    output.writeFieldBegin('maxlone6', Thrift.Type.I32, 9);
    output.writeI32(this.maxlone6);
    output.writeFieldEnd();
  }
  if (this.numchanges !== null && this.numchanges !== undefined) {
    output.writeFieldBegin('numchanges', Thrift.Type.I32, 10);
    output.writeI32(this.numchanges);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.SET, 11);
    output.writeSetBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter267 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter267))
      {
        iter267 = this.tags[iter267];
        iter267.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Selector = module.exports.Selector = function(args) {
  this.id = null;
  this.version = null;
  this.changeset_id = null;
  this.shortname = null;
  this.longname = null;
  this.tags = null;
  this.resources = null;
  this.deleted = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.changeset_id !== undefined && args.changeset_id !== null) {
      this.changeset_id = args.changeset_id;
    }
    if (args.shortname !== undefined && args.shortname !== null) {
      this.shortname = args.shortname;
    }
    if (args.longname !== undefined && args.longname !== null) {
      this.longname = args.longname;
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [ttypes.Tag]);
    }
    if (args.resources !== undefined && args.resources !== null) {
      this.resources = Thrift.copyList(args.resources, [ttypes.Resource]);
    }
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
  }
};
Selector.prototype = {};
Selector.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.changeset_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.shortname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.longname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.SET) {
        var _size268 = 0;
        var _rtmp3272;
        this.tags = [];
        var _etype271 = 0;
        _rtmp3272 = input.readSetBegin();
        _etype271 = _rtmp3272.etype;
        _size268 = _rtmp3272.size;
        for (var _i273 = 0; _i273 < _size268; ++_i273)
        {
          var elem274 = null;
          elem274 = new ttypes.Tag();
          elem274.read(input);
          this.tags.push(elem274);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.SET) {
        var _size275 = 0;
        var _rtmp3279;
        this.resources = [];
        var _etype278 = 0;
        _rtmp3279 = input.readSetBegin();
        _etype278 = _rtmp3279.etype;
        _size275 = _rtmp3279.size;
        for (var _i280 = 0; _i280 < _size275; ++_i280)
        {
          var elem281 = null;
          elem281 = new ttypes.Resource();
          elem281.read(input);
          this.resources.push(elem281);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Selector.prototype.write = function(output) {
  output.writeStructBegin('Selector');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 2);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.changeset_id !== null && this.changeset_id !== undefined) {
    output.writeFieldBegin('changeset_id', Thrift.Type.I64, 3);
    output.writeI64(this.changeset_id);
    output.writeFieldEnd();
  }
  if (this.shortname !== null && this.shortname !== undefined) {
    output.writeFieldBegin('shortname', Thrift.Type.STRING, 4);
    output.writeString(this.shortname);
    output.writeFieldEnd();
  }
  if (this.longname !== null && this.longname !== undefined) {
    output.writeFieldBegin('longname', Thrift.Type.STRING, 5);
    output.writeString(this.longname);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.SET, 6);
    output.writeSetBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter282 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter282))
      {
        iter282 = this.tags[iter282];
        iter282.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.resources !== null && this.resources !== undefined) {
    output.writeFieldBegin('resources', Thrift.Type.SET, 7);
    output.writeSetBegin(Thrift.Type.STRUCT, this.resources.length);
    for (var iter283 in this.resources)
    {
      if (this.resources.hasOwnProperty(iter283))
      {
        iter283 = this.resources[iter283];
        iter283.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 8);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Datastatus = module.exports.Datastatus = function(args) {
  this.id = null;
  this.version = null;
  this.changeset_id = null;
  this.datatype = null;
  this.selector_id = null;
  this.filename = null;
  this.shortname = null;
  this.longname = null;
  this.tags = null;
  this.resources = null;
  this.recordsavailable = null;
  this.bytesavailable = null;
  this.max_changeset_id = null;
  this.deleted = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.changeset_id !== undefined && args.changeset_id !== null) {
      this.changeset_id = args.changeset_id;
    }
    if (args.datatype !== undefined && args.datatype !== null) {
      this.datatype = args.datatype;
    }
    if (args.selector_id !== undefined && args.selector_id !== null) {
      this.selector_id = args.selector_id;
    }
    if (args.filename !== undefined && args.filename !== null) {
      this.filename = args.filename;
    }
    if (args.shortname !== undefined && args.shortname !== null) {
      this.shortname = args.shortname;
    }
    if (args.longname !== undefined && args.longname !== null) {
      this.longname = args.longname;
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [ttypes.Tag]);
    }
    if (args.resources !== undefined && args.resources !== null) {
      this.resources = Thrift.copyList(args.resources, [ttypes.Resource]);
    }
    if (args.recordsavailable !== undefined && args.recordsavailable !== null) {
      this.recordsavailable = args.recordsavailable;
    }
    if (args.bytesavailable !== undefined && args.bytesavailable !== null) {
      this.bytesavailable = args.bytesavailable;
    }
    if (args.max_changeset_id !== undefined && args.max_changeset_id !== null) {
      this.max_changeset_id = args.max_changeset_id;
    }
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
  }
};
Datastatus.prototype = {};
Datastatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.changeset_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.datatype = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.selector_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.shortname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.longname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.SET) {
        var _size284 = 0;
        var _rtmp3288;
        this.tags = [];
        var _etype287 = 0;
        _rtmp3288 = input.readSetBegin();
        _etype287 = _rtmp3288.etype;
        _size284 = _rtmp3288.size;
        for (var _i289 = 0; _i289 < _size284; ++_i289)
        {
          var elem290 = null;
          elem290 = new ttypes.Tag();
          elem290.read(input);
          this.tags.push(elem290);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.SET) {
        var _size291 = 0;
        var _rtmp3295;
        this.resources = [];
        var _etype294 = 0;
        _rtmp3295 = input.readSetBegin();
        _etype294 = _rtmp3295.etype;
        _size291 = _rtmp3295.size;
        for (var _i296 = 0; _i296 < _size291; ++_i296)
        {
          var elem297 = null;
          elem297 = new ttypes.Resource();
          elem297.read(input);
          this.resources.push(elem297);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.recordsavailable = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.bytesavailable = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.max_changeset_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Datastatus.prototype.write = function(output) {
  output.writeStructBegin('Datastatus');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 2);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.changeset_id !== null && this.changeset_id !== undefined) {
    output.writeFieldBegin('changeset_id', Thrift.Type.I64, 3);
    output.writeI64(this.changeset_id);
    output.writeFieldEnd();
  }
  if (this.datatype !== null && this.datatype !== undefined) {
    output.writeFieldBegin('datatype', Thrift.Type.I32, 4);
    output.writeI32(this.datatype);
    output.writeFieldEnd();
  }
  if (this.selector_id !== null && this.selector_id !== undefined) {
    output.writeFieldBegin('selector_id', Thrift.Type.I64, 5);
    output.writeI64(this.selector_id);
    output.writeFieldEnd();
  }
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 6);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  if (this.shortname !== null && this.shortname !== undefined) {
    output.writeFieldBegin('shortname', Thrift.Type.STRING, 7);
    output.writeString(this.shortname);
    output.writeFieldEnd();
  }
  if (this.longname !== null && this.longname !== undefined) {
    output.writeFieldBegin('longname', Thrift.Type.STRING, 8);
    output.writeString(this.longname);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.SET, 9);
    output.writeSetBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter298 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter298))
      {
        iter298 = this.tags[iter298];
        iter298.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.resources !== null && this.resources !== undefined) {
    output.writeFieldBegin('resources', Thrift.Type.SET, 10);
    output.writeSetBegin(Thrift.Type.STRUCT, this.resources.length);
    for (var iter299 in this.resources)
    {
      if (this.resources.hasOwnProperty(iter299))
      {
        iter299 = this.resources[iter299];
        iter299.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.recordsavailable !== null && this.recordsavailable !== undefined) {
    output.writeFieldBegin('recordsavailable', Thrift.Type.I64, 11);
    output.writeI64(this.recordsavailable);
    output.writeFieldEnd();
  }
  if (this.bytesavailable !== null && this.bytesavailable !== undefined) {
    output.writeFieldBegin('bytesavailable', Thrift.Type.I64, 12);
    output.writeI64(this.bytesavailable);
    output.writeFieldEnd();
  }
  if (this.max_changeset_id !== null && this.max_changeset_id !== undefined) {
    output.writeFieldBegin('max_changeset_id', Thrift.Type.I64, 13);
    output.writeI64(this.max_changeset_id);
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 14);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthenticationResult = module.exports.AuthenticationResult = function(args) {
  this.id = null;
  this.currentTime = null;
  this.authenticationToken = null;
  this.expiration = null;
  this.response = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.currentTime !== undefined && args.currentTime !== null) {
      this.currentTime = args.currentTime;
    }
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.expiration !== undefined && args.expiration !== null) {
      this.expiration = args.expiration;
    }
    if (args.response !== undefined && args.response !== null) {
      this.response = new ttypes.Response(args.response);
    }
  }
};
AuthenticationResult.prototype = {};
AuthenticationResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.currentTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.expiration = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.response = new ttypes.Response();
        this.response.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthenticationResult.prototype.write = function(output) {
  output.writeStructBegin('AuthenticationResult');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.currentTime !== null && this.currentTime !== undefined) {
    output.writeFieldBegin('currentTime', Thrift.Type.I64, 2);
    output.writeI64(this.currentTime);
    output.writeFieldEnd();
  }
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 3);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.expiration !== null && this.expiration !== undefined) {
    output.writeFieldBegin('expiration', Thrift.Type.I64, 4);
    output.writeI64(this.expiration);
    output.writeFieldEnd();
  }
  if (this.response !== null && this.response !== undefined) {
    output.writeFieldBegin('response', Thrift.Type.STRUCT, 5);
    this.response.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AnalyticsSubmit = module.exports.AnalyticsSubmit = function(args) {
  this.user_id = null;
  this.target_id = null;
  this.target_version = null;
  this.event_type = null;
  this.value = null;
  this.timestamp = null;
  this.UUID = null;
  if (args) {
    if (args.user_id !== undefined && args.user_id !== null) {
      this.user_id = args.user_id;
    }
    if (args.target_id !== undefined && args.target_id !== null) {
      this.target_id = args.target_id;
    }
    if (args.target_version !== undefined && args.target_version !== null) {
      this.target_version = args.target_version;
    }
    if (args.event_type !== undefined && args.event_type !== null) {
      this.event_type = args.event_type;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.UUID !== undefined && args.UUID !== null) {
      this.UUID = args.UUID;
    }
  }
};
AnalyticsSubmit.prototype = {};
AnalyticsSubmit.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.user_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.target_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.target_version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.event_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.value = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.UUID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnalyticsSubmit.prototype.write = function(output) {
  output.writeStructBegin('AnalyticsSubmit');
  if (this.user_id !== null && this.user_id !== undefined) {
    output.writeFieldBegin('user_id', Thrift.Type.I64, 1);
    output.writeI64(this.user_id);
    output.writeFieldEnd();
  }
  if (this.target_id !== null && this.target_id !== undefined) {
    output.writeFieldBegin('target_id', Thrift.Type.I64, 2);
    output.writeI64(this.target_id);
    output.writeFieldEnd();
  }
  if (this.target_version !== null && this.target_version !== undefined) {
    output.writeFieldBegin('target_version', Thrift.Type.I64, 3);
    output.writeI64(this.target_version);
    output.writeFieldEnd();
  }
  if (this.event_type !== null && this.event_type !== undefined) {
    output.writeFieldBegin('event_type', Thrift.Type.I32, 4);
    output.writeI32(this.event_type);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.I32, 5);
    output.writeI32(this.value);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 6);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.UUID !== null && this.UUID !== undefined) {
    output.writeFieldBegin('UUID', Thrift.Type.STRING, 7);
    output.writeString(this.UUID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SignalStrengthSubmit = module.exports.SignalStrengthSubmit = function(args) {
  this.user_id = null;
  this.UUID = null;
  this.late6 = null;
  this.lone6 = null;
  this.tm = null;
  this.accuracym = null;
  this.isGsm = null;
  this.level = null;
  this.mccmnc = null;
  this.country = null;
  this.secsthisstate = null;
  if (args) {
    if (args.user_id !== undefined && args.user_id !== null) {
      this.user_id = args.user_id;
    }
    if (args.UUID !== undefined && args.UUID !== null) {
      this.UUID = args.UUID;
    }
    if (args.late6 !== undefined && args.late6 !== null) {
      this.late6 = args.late6;
    }
    if (args.lone6 !== undefined && args.lone6 !== null) {
      this.lone6 = args.lone6;
    }
    if (args.tm !== undefined && args.tm !== null) {
      this.tm = args.tm;
    }
    if (args.accuracym !== undefined && args.accuracym !== null) {
      this.accuracym = args.accuracym;
    }
    if (args.isGsm !== undefined && args.isGsm !== null) {
      this.isGsm = args.isGsm;
    }
    if (args.level !== undefined && args.level !== null) {
      this.level = args.level;
    }
    if (args.mccmnc !== undefined && args.mccmnc !== null) {
      this.mccmnc = args.mccmnc;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.secsthisstate !== undefined && args.secsthisstate !== null) {
      this.secsthisstate = args.secsthisstate;
    }
  }
};
SignalStrengthSubmit.prototype = {};
SignalStrengthSubmit.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.user_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.UUID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.late6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.lone6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.tm = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.accuracym = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.isGsm = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.level = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.mccmnc = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.secsthisstate = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SignalStrengthSubmit.prototype.write = function(output) {
  output.writeStructBegin('SignalStrengthSubmit');
  if (this.user_id !== null && this.user_id !== undefined) {
    output.writeFieldBegin('user_id', Thrift.Type.I64, 1);
    output.writeI64(this.user_id);
    output.writeFieldEnd();
  }
  if (this.UUID !== null && this.UUID !== undefined) {
    output.writeFieldBegin('UUID', Thrift.Type.STRING, 2);
    output.writeString(this.UUID);
    output.writeFieldEnd();
  }
  if (this.late6 !== null && this.late6 !== undefined) {
    output.writeFieldBegin('late6', Thrift.Type.I32, 3);
    output.writeI32(this.late6);
    output.writeFieldEnd();
  }
  if (this.lone6 !== null && this.lone6 !== undefined) {
    output.writeFieldBegin('lone6', Thrift.Type.I32, 4);
    output.writeI32(this.lone6);
    output.writeFieldEnd();
  }
  if (this.tm !== null && this.tm !== undefined) {
    output.writeFieldBegin('tm', Thrift.Type.I64, 5);
    output.writeI64(this.tm);
    output.writeFieldEnd();
  }
  if (this.accuracym !== null && this.accuracym !== undefined) {
    output.writeFieldBegin('accuracym', Thrift.Type.I32, 6);
    output.writeI32(this.accuracym);
    output.writeFieldEnd();
  }
  if (this.isGsm !== null && this.isGsm !== undefined) {
    output.writeFieldBegin('isGsm', Thrift.Type.I32, 7);
    output.writeI32(this.isGsm);
    output.writeFieldEnd();
  }
  if (this.level !== null && this.level !== undefined) {
    output.writeFieldBegin('level', Thrift.Type.I32, 8);
    output.writeI32(this.level);
    output.writeFieldEnd();
  }
  if (this.mccmnc !== null && this.mccmnc !== undefined) {
    output.writeFieldBegin('mccmnc', Thrift.Type.I32, 9);
    output.writeI32(this.mccmnc);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 10);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.secsthisstate !== null && this.secsthisstate !== undefined) {
    output.writeFieldBegin('secsthisstate', Thrift.Type.I32, 11);
    output.writeI32(this.secsthisstate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AnalyticsAggregate = module.exports.AnalyticsAggregate = function(args) {
  this.changeset_id = null;
  this.target_id = null;
  this.event_type = null;
  this.value = null;
  this.timestamp = null;
  if (args) {
    if (args.changeset_id !== undefined && args.changeset_id !== null) {
      this.changeset_id = args.changeset_id;
    }
    if (args.target_id !== undefined && args.target_id !== null) {
      this.target_id = args.target_id;
    }
    if (args.event_type !== undefined && args.event_type !== null) {
      this.event_type = args.event_type;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
  }
};
AnalyticsAggregate.prototype = {};
AnalyticsAggregate.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.changeset_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.target_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.event_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.value = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnalyticsAggregate.prototype.write = function(output) {
  output.writeStructBegin('AnalyticsAggregate');
  if (this.changeset_id !== null && this.changeset_id !== undefined) {
    output.writeFieldBegin('changeset_id', Thrift.Type.I64, 1);
    output.writeI64(this.changeset_id);
    output.writeFieldEnd();
  }
  if (this.target_id !== null && this.target_id !== undefined) {
    output.writeFieldBegin('target_id', Thrift.Type.I64, 2);
    output.writeI64(this.target_id);
    output.writeFieldEnd();
  }
  if (this.event_type !== null && this.event_type !== undefined) {
    output.writeFieldBegin('event_type', Thrift.Type.I32, 3);
    output.writeI32(this.event_type);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.I32, 4);
    output.writeI32(this.value);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 5);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Response = module.exports.Response = function(args) {
  this.deleted = null;
  this.changeset = null;
  this.proxyidmap = null;
  this.user = null;
  this.point = null;
  this.track = null;
  this.relation = null;
  this.selector = null;
  this.datastatus = null;
  this.analyticsAggregateSet = null;
  this.notificationSet = null;
  this.contestSet = null;
  if (args) {
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
    if (args.changeset !== undefined && args.changeset !== null) {
      this.changeset = new ttypes.Changeset(args.changeset);
    }
    if (args.proxyidmap !== undefined && args.proxyidmap !== null) {
      this.proxyidmap = Thrift.copyMap(args.proxyidmap, [null]);
    }
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.User(args.user);
    }
    if (args.point !== undefined && args.point !== null) {
      this.point = new ttypes.Point(args.point);
    }
    if (args.track !== undefined && args.track !== null) {
      this.track = new ttypes.Track(args.track);
    }
    if (args.relation !== undefined && args.relation !== null) {
      this.relation = new ttypes.Relation(args.relation);
    }
    if (args.selector !== undefined && args.selector !== null) {
      this.selector = new ttypes.Selector(args.selector);
    }
    if (args.datastatus !== undefined && args.datastatus !== null) {
      this.datastatus = new ttypes.Datastatus(args.datastatus);
    }
    if (args.analyticsAggregateSet !== undefined && args.analyticsAggregateSet !== null) {
      this.analyticsAggregateSet = Thrift.copyList(args.analyticsAggregateSet, [ttypes.AnalyticsAggregate]);
    }
    if (args.notificationSet !== undefined && args.notificationSet !== null) {
      this.notificationSet = Thrift.copyList(args.notificationSet, [ttypes.Notification]);
    }
    if (args.contestSet !== undefined && args.contestSet !== null) {
      this.contestSet = Thrift.copyList(args.contestSet, [ttypes.Contest]);
    }
  }
};
Response.prototype = {};
Response.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.changeset = new ttypes.Changeset();
        this.changeset.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size300 = 0;
        var _rtmp3304;
        this.proxyidmap = {};
        var _ktype301 = 0;
        var _vtype302 = 0;
        _rtmp3304 = input.readMapBegin();
        _ktype301 = _rtmp3304.ktype;
        _vtype302 = _rtmp3304.vtype;
        _size300 = _rtmp3304.size;
        for (var _i305 = 0; _i305 < _size300; ++_i305)
        {
          var key306 = null;
          var val307 = null;
          key306 = input.readI64();
          val307 = input.readI64();
          this.proxyidmap[key306] = val307;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.User();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.point = new ttypes.Point();
        this.point.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.track = new ttypes.Track();
        this.track.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.relation = new ttypes.Relation();
        this.relation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.selector = new ttypes.Selector();
        this.selector.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.datastatus = new ttypes.Datastatus();
        this.datastatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.SET) {
        var _size308 = 0;
        var _rtmp3312;
        this.analyticsAggregateSet = [];
        var _etype311 = 0;
        _rtmp3312 = input.readSetBegin();
        _etype311 = _rtmp3312.etype;
        _size308 = _rtmp3312.size;
        for (var _i313 = 0; _i313 < _size308; ++_i313)
        {
          var elem314 = null;
          elem314 = new ttypes.AnalyticsAggregate();
          elem314.read(input);
          this.analyticsAggregateSet.push(elem314);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.SET) {
        var _size315 = 0;
        var _rtmp3319;
        this.notificationSet = [];
        var _etype318 = 0;
        _rtmp3319 = input.readSetBegin();
        _etype318 = _rtmp3319.etype;
        _size315 = _rtmp3319.size;
        for (var _i320 = 0; _i320 < _size315; ++_i320)
        {
          var elem321 = null;
          elem321 = new ttypes.Notification();
          elem321.read(input);
          this.notificationSet.push(elem321);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.SET) {
        var _size322 = 0;
        var _rtmp3326;
        this.contestSet = [];
        var _etype325 = 0;
        _rtmp3326 = input.readSetBegin();
        _etype325 = _rtmp3326.etype;
        _size322 = _rtmp3326.size;
        for (var _i327 = 0; _i327 < _size322; ++_i327)
        {
          var elem328 = null;
          elem328 = new ttypes.Contest();
          elem328.read(input);
          this.contestSet.push(elem328);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Response.prototype.write = function(output) {
  output.writeStructBegin('Response');
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 1);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  if (this.changeset !== null && this.changeset !== undefined) {
    output.writeFieldBegin('changeset', Thrift.Type.STRUCT, 2);
    this.changeset.write(output);
    output.writeFieldEnd();
  }
  if (this.proxyidmap !== null && this.proxyidmap !== undefined) {
    output.writeFieldBegin('proxyidmap', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.I64, Thrift.Type.I64, Thrift.objectLength(this.proxyidmap));
    for (var kiter329 in this.proxyidmap)
    {
      if (this.proxyidmap.hasOwnProperty(kiter329))
      {
        var viter330 = this.proxyidmap[kiter329];
        output.writeI64(kiter329);
        output.writeI64(viter330);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 4);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.point !== null && this.point !== undefined) {
    output.writeFieldBegin('point', Thrift.Type.STRUCT, 5);
    this.point.write(output);
    output.writeFieldEnd();
  }
  if (this.track !== null && this.track !== undefined) {
    output.writeFieldBegin('track', Thrift.Type.STRUCT, 6);
    this.track.write(output);
    output.writeFieldEnd();
  }
  if (this.relation !== null && this.relation !== undefined) {
    output.writeFieldBegin('relation', Thrift.Type.STRUCT, 7);
    this.relation.write(output);
    output.writeFieldEnd();
  }
  if (this.selector !== null && this.selector !== undefined) {
    output.writeFieldBegin('selector', Thrift.Type.STRUCT, 8);
    this.selector.write(output);
    output.writeFieldEnd();
  }
  if (this.datastatus !== null && this.datastatus !== undefined) {
    output.writeFieldBegin('datastatus', Thrift.Type.STRUCT, 9);
    this.datastatus.write(output);
    output.writeFieldEnd();
  }
  if (this.analyticsAggregateSet !== null && this.analyticsAggregateSet !== undefined) {
    output.writeFieldBegin('analyticsAggregateSet', Thrift.Type.SET, 10);
    output.writeSetBegin(Thrift.Type.STRUCT, this.analyticsAggregateSet.length);
    for (var iter331 in this.analyticsAggregateSet)
    {
      if (this.analyticsAggregateSet.hasOwnProperty(iter331))
      {
        iter331 = this.analyticsAggregateSet[iter331];
        iter331.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.notificationSet !== null && this.notificationSet !== undefined) {
    output.writeFieldBegin('notificationSet', Thrift.Type.SET, 11);
    output.writeSetBegin(Thrift.Type.STRUCT, this.notificationSet.length);
    for (var iter332 in this.notificationSet)
    {
      if (this.notificationSet.hasOwnProperty(iter332))
      {
        iter332 = this.notificationSet[iter332];
        iter332.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.contestSet !== null && this.contestSet !== undefined) {
    output.writeFieldBegin('contestSet', Thrift.Type.SET, 12);
    output.writeSetBegin(Thrift.Type.STRUCT, this.contestSet.length);
    for (var iter333 in this.contestSet)
    {
      if (this.contestSet.hasOwnProperty(iter333))
      {
        iter333 = this.contestSet[iter333];
        iter333.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Marker = module.exports.Marker = function(args) {
  this.id = null;
  this.version = null;
  this.markerType = null;
  this.zlfo = null;
  this.name = null;
  this.description = null;
  this.iconFileName = null;
  this.late6 = null;
  this.lone6 = null;
  this.eleme2 = null;
  this.tags = null;
  this.mileages = null;
  this.showZoomMin = null;
  this.showZoomMax = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.markerType !== undefined && args.markerType !== null) {
      this.markerType = args.markerType;
    }
    if (args.zlfo !== undefined && args.zlfo !== null) {
      this.zlfo = args.zlfo;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.iconFileName !== undefined && args.iconFileName !== null) {
      this.iconFileName = args.iconFileName;
    }
    if (args.late6 !== undefined && args.late6 !== null) {
      this.late6 = args.late6;
    }
    if (args.lone6 !== undefined && args.lone6 !== null) {
      this.lone6 = args.lone6;
    }
    if (args.eleme2 !== undefined && args.eleme2 !== null) {
      this.eleme2 = args.eleme2;
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [ttypes.Tag]);
    }
    if (args.mileages !== undefined && args.mileages !== null) {
      this.mileages = Thrift.copyList(args.mileages, [ttypes.Mileage]);
    }
    if (args.showZoomMin !== undefined && args.showZoomMin !== null) {
      this.showZoomMin = args.showZoomMin;
    }
    if (args.showZoomMax !== undefined && args.showZoomMax !== null) {
      this.showZoomMax = args.showZoomMax;
    }
  }
};
Marker.prototype = {};
Marker.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.markerType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.zlfo = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.iconFileName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.late6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.lone6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.eleme2 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.SET) {
        var _size334 = 0;
        var _rtmp3338;
        this.tags = [];
        var _etype337 = 0;
        _rtmp3338 = input.readSetBegin();
        _etype337 = _rtmp3338.etype;
        _size334 = _rtmp3338.size;
        for (var _i339 = 0; _i339 < _size334; ++_i339)
        {
          var elem340 = null;
          elem340 = new ttypes.Tag();
          elem340.read(input);
          this.tags.push(elem340);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.SET) {
        var _size341 = 0;
        var _rtmp3345;
        this.mileages = [];
        var _etype344 = 0;
        _rtmp3345 = input.readSetBegin();
        _etype344 = _rtmp3345.etype;
        _size341 = _rtmp3345.size;
        for (var _i346 = 0; _i346 < _size341; ++_i346)
        {
          var elem347 = null;
          elem347 = new ttypes.Mileage();
          elem347.read(input);
          this.mileages.push(elem347);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.showZoomMin = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.showZoomMax = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Marker.prototype.write = function(output) {
  output.writeStructBegin('Marker');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 2);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.markerType !== null && this.markerType !== undefined) {
    output.writeFieldBegin('markerType', Thrift.Type.I32, 3);
    output.writeI32(this.markerType);
    output.writeFieldEnd();
  }
  if (this.zlfo !== null && this.zlfo !== undefined) {
    output.writeFieldBegin('zlfo', Thrift.Type.I32, 4);
    output.writeI32(this.zlfo);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 5);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 6);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.iconFileName !== null && this.iconFileName !== undefined) {
    output.writeFieldBegin('iconFileName', Thrift.Type.STRING, 7);
    output.writeString(this.iconFileName);
    output.writeFieldEnd();
  }
  if (this.late6 !== null && this.late6 !== undefined) {
    output.writeFieldBegin('late6', Thrift.Type.I32, 8);
    output.writeI32(this.late6);
    output.writeFieldEnd();
  }
  if (this.lone6 !== null && this.lone6 !== undefined) {
    output.writeFieldBegin('lone6', Thrift.Type.I32, 9);
    output.writeI32(this.lone6);
    output.writeFieldEnd();
  }
  if (this.eleme2 !== null && this.eleme2 !== undefined) {
    output.writeFieldBegin('eleme2', Thrift.Type.I32, 10);
    output.writeI32(this.eleme2);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.SET, 11);
    output.writeSetBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter348 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter348))
      {
        iter348 = this.tags[iter348];
        iter348.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.mileages !== null && this.mileages !== undefined) {
    output.writeFieldBegin('mileages', Thrift.Type.SET, 12);
    output.writeSetBegin(Thrift.Type.STRUCT, this.mileages.length);
    for (var iter349 in this.mileages)
    {
      if (this.mileages.hasOwnProperty(iter349))
      {
        iter349 = this.mileages[iter349];
        iter349.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.showZoomMin !== null && this.showZoomMin !== undefined) {
    output.writeFieldBegin('showZoomMin', Thrift.Type.I32, 13);
    output.writeI32(this.showZoomMin);
    output.writeFieldEnd();
  }
  if (this.showZoomMax !== null && this.showZoomMax !== undefined) {
    output.writeFieldBegin('showZoomMax', Thrift.Type.I32, 14);
    output.writeI32(this.showZoomMax);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LatLng = module.exports.LatLng = function(args) {
  this.late6 = null;
  this.lone6 = null;
  if (args) {
    if (args.late6 !== undefined && args.late6 !== null) {
      this.late6 = args.late6;
    }
    if (args.lone6 !== undefined && args.lone6 !== null) {
      this.lone6 = args.lone6;
    }
  }
};
LatLng.prototype = {};
LatLng.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.late6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.lone6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LatLng.prototype.write = function(output) {
  output.writeStructBegin('LatLng');
  if (this.late6 !== null && this.late6 !== undefined) {
    output.writeFieldBegin('late6', Thrift.Type.I32, 1);
    output.writeI32(this.late6);
    output.writeFieldEnd();
  }
  if (this.lone6 !== null && this.lone6 !== undefined) {
    output.writeFieldBegin('lone6', Thrift.Type.I32, 2);
    output.writeI32(this.lone6);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Line = module.exports.Line = function(args) {
  this.id = null;
  this.version = null;
  this.name = null;
  this.description = null;
  this.color = null;
  this.latlngs = null;
  this.tags = null;
  this.resources = null;
  this.selector_ids = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.color !== undefined && args.color !== null) {
      this.color = args.color;
    }
    if (args.latlngs !== undefined && args.latlngs !== null) {
      this.latlngs = Thrift.copyList(args.latlngs, [ttypes.LatLng]);
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [ttypes.Tag]);
    }
    if (args.resources !== undefined && args.resources !== null) {
      this.resources = Thrift.copyList(args.resources, [ttypes.Resource]);
    }
    if (args.selector_ids !== undefined && args.selector_ids !== null) {
      this.selector_ids = Thrift.copyList(args.selector_ids, [null]);
    }
  }
};
Line.prototype = {};
Line.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.color = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size350 = 0;
        var _rtmp3354;
        this.latlngs = [];
        var _etype353 = 0;
        _rtmp3354 = input.readListBegin();
        _etype353 = _rtmp3354.etype;
        _size350 = _rtmp3354.size;
        for (var _i355 = 0; _i355 < _size350; ++_i355)
        {
          var elem356 = null;
          elem356 = new ttypes.LatLng();
          elem356.read(input);
          this.latlngs.push(elem356);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.SET) {
        var _size357 = 0;
        var _rtmp3361;
        this.tags = [];
        var _etype360 = 0;
        _rtmp3361 = input.readSetBegin();
        _etype360 = _rtmp3361.etype;
        _size357 = _rtmp3361.size;
        for (var _i362 = 0; _i362 < _size357; ++_i362)
        {
          var elem363 = null;
          elem363 = new ttypes.Tag();
          elem363.read(input);
          this.tags.push(elem363);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.SET) {
        var _size364 = 0;
        var _rtmp3368;
        this.resources = [];
        var _etype367 = 0;
        _rtmp3368 = input.readSetBegin();
        _etype367 = _rtmp3368.etype;
        _size364 = _rtmp3368.size;
        for (var _i369 = 0; _i369 < _size364; ++_i369)
        {
          var elem370 = null;
          elem370 = new ttypes.Resource();
          elem370.read(input);
          this.resources.push(elem370);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.SET) {
        var _size371 = 0;
        var _rtmp3375;
        this.selector_ids = [];
        var _etype374 = 0;
        _rtmp3375 = input.readSetBegin();
        _etype374 = _rtmp3375.etype;
        _size371 = _rtmp3375.size;
        for (var _i376 = 0; _i376 < _size371; ++_i376)
        {
          var elem377 = null;
          elem377 = input.readI64();
          this.selector_ids.push(elem377);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Line.prototype.write = function(output) {
  output.writeStructBegin('Line');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 2);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 4);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.color !== null && this.color !== undefined) {
    output.writeFieldBegin('color', Thrift.Type.STRING, 5);
    output.writeString(this.color);
    output.writeFieldEnd();
  }
  if (this.latlngs !== null && this.latlngs !== undefined) {
    output.writeFieldBegin('latlngs', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.latlngs.length);
    for (var iter378 in this.latlngs)
    {
      if (this.latlngs.hasOwnProperty(iter378))
      {
        iter378 = this.latlngs[iter378];
        iter378.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.SET, 7);
    output.writeSetBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter379 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter379))
      {
        iter379 = this.tags[iter379];
        iter379.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.resources !== null && this.resources !== undefined) {
    output.writeFieldBegin('resources', Thrift.Type.SET, 8);
    output.writeSetBegin(Thrift.Type.STRUCT, this.resources.length);
    for (var iter380 in this.resources)
    {
      if (this.resources.hasOwnProperty(iter380))
      {
        iter380 = this.resources[iter380];
        iter380.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.selector_ids !== null && this.selector_ids !== undefined) {
    output.writeFieldBegin('selector_ids', Thrift.Type.SET, 9);
    output.writeSetBegin(Thrift.Type.I64, this.selector_ids.length);
    for (var iter381 in this.selector_ids)
    {
      if (this.selector_ids.hasOwnProperty(iter381))
      {
        iter381 = this.selector_ids[iter381];
        output.writeI64(iter381);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WebMapObject = module.exports.WebMapObject = function(args) {
  this.marker = null;
  this.line = null;
  if (args) {
    if (args.marker !== undefined && args.marker !== null) {
      this.marker = new ttypes.Marker(args.marker);
    }
    if (args.line !== undefined && args.line !== null) {
      this.line = new ttypes.Line(args.line);
    }
  }
};
WebMapObject.prototype = {};
WebMapObject.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.marker = new ttypes.Marker();
        this.marker.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.line = new ttypes.Line();
        this.line.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebMapObject.prototype.write = function(output) {
  output.writeStructBegin('WebMapObject');
  if (this.marker !== null && this.marker !== undefined) {
    output.writeFieldBegin('marker', Thrift.Type.STRUCT, 1);
    this.marker.write(output);
    output.writeFieldEnd();
  }
  if (this.line !== null && this.line !== undefined) {
    output.writeFieldBegin('line', Thrift.Type.STRUCT, 2);
    this.line.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WebMapResponse = module.exports.WebMapResponse = function(args) {
  this.markers = null;
  this.lines = null;
  if (args) {
    if (args.markers !== undefined && args.markers !== null) {
      this.markers = Thrift.copyList(args.markers, [ttypes.Marker]);
    }
    if (args.lines !== undefined && args.lines !== null) {
      this.lines = Thrift.copyList(args.lines, [ttypes.Line]);
    }
  }
};
WebMapResponse.prototype = {};
WebMapResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size382 = 0;
        var _rtmp3386;
        this.markers = [];
        var _etype385 = 0;
        _rtmp3386 = input.readListBegin();
        _etype385 = _rtmp3386.etype;
        _size382 = _rtmp3386.size;
        for (var _i387 = 0; _i387 < _size382; ++_i387)
        {
          var elem388 = null;
          elem388 = new ttypes.Marker();
          elem388.read(input);
          this.markers.push(elem388);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size389 = 0;
        var _rtmp3393;
        this.lines = [];
        var _etype392 = 0;
        _rtmp3393 = input.readListBegin();
        _etype392 = _rtmp3393.etype;
        _size389 = _rtmp3393.size;
        for (var _i394 = 0; _i394 < _size389; ++_i394)
        {
          var elem395 = null;
          elem395 = new ttypes.Line();
          elem395.read(input);
          this.lines.push(elem395);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebMapResponse.prototype.write = function(output) {
  output.writeStructBegin('WebMapResponse');
  if (this.markers !== null && this.markers !== undefined) {
    output.writeFieldBegin('markers', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.markers.length);
    for (var iter396 in this.markers)
    {
      if (this.markers.hasOwnProperty(iter396))
      {
        iter396 = this.markers[iter396];
        iter396.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.lines !== null && this.lines !== undefined) {
    output.writeFieldBegin('lines', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.lines.length);
    for (var iter397 in this.lines)
    {
      if (this.lines.hasOwnProperty(iter397))
      {
        iter397 = this.lines[iter397];
        iter397.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PickableOption = module.exports.PickableOption = function(args) {
  this.title = null;
  this.description = null;
  this.icon = null;
  this.order = null;
  this.k = null;
  if (args) {
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.icon !== undefined && args.icon !== null) {
      this.icon = args.icon;
    }
    if (args.order !== undefined && args.order !== null) {
      this.order = args.order;
    }
    if (args.k !== undefined && args.k !== null) {
      this.k = args.k;
    }
  }
};
PickableOption.prototype = {};
PickableOption.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.icon = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.order = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.k = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PickableOption.prototype.write = function(output) {
  output.writeStructBegin('PickableOption');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.icon !== null && this.icon !== undefined) {
    output.writeFieldBegin('icon', Thrift.Type.I32, 3);
    output.writeI32(this.icon);
    output.writeFieldEnd();
  }
  if (this.order !== null && this.order !== undefined) {
    output.writeFieldBegin('order', Thrift.Type.I32, 4);
    output.writeI32(this.order);
    output.writeFieldEnd();
  }
  if (this.k !== null && this.k !== undefined) {
    output.writeFieldBegin('k', Thrift.Type.STRING, 5);
    output.writeString(this.k);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ReportableAttribute = module.exports.ReportableAttribute = function(args) {
  this.title = null;
  this.description = null;
  this.icon = null;
  this.reportInputType = null;
  this.pickableOptions = null;
  this.k = null;
  this.applicableTags = null;
  if (args) {
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.icon !== undefined && args.icon !== null) {
      this.icon = args.icon;
    }
    if (args.reportInputType !== undefined && args.reportInputType !== null) {
      this.reportInputType = args.reportInputType;
    }
    if (args.pickableOptions !== undefined && args.pickableOptions !== null) {
      this.pickableOptions = Thrift.copyList(args.pickableOptions, [ttypes.PickableOption]);
    }
    if (args.k !== undefined && args.k !== null) {
      this.k = args.k;
    }
    if (args.applicableTags !== undefined && args.applicableTags !== null) {
      this.applicableTags = Thrift.copyList(args.applicableTags, [ttypes.Tag]);
    }
  }
};
ReportableAttribute.prototype = {};
ReportableAttribute.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.icon = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.reportInputType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size398 = 0;
        var _rtmp3402;
        this.pickableOptions = [];
        var _etype401 = 0;
        _rtmp3402 = input.readListBegin();
        _etype401 = _rtmp3402.etype;
        _size398 = _rtmp3402.size;
        for (var _i403 = 0; _i403 < _size398; ++_i403)
        {
          var elem404 = null;
          elem404 = new ttypes.PickableOption();
          elem404.read(input);
          this.pickableOptions.push(elem404);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.k = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size405 = 0;
        var _rtmp3409;
        this.applicableTags = [];
        var _etype408 = 0;
        _rtmp3409 = input.readListBegin();
        _etype408 = _rtmp3409.etype;
        _size405 = _rtmp3409.size;
        for (var _i410 = 0; _i410 < _size405; ++_i410)
        {
          var elem411 = null;
          elem411 = new ttypes.Tag();
          elem411.read(input);
          this.applicableTags.push(elem411);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReportableAttribute.prototype.write = function(output) {
  output.writeStructBegin('ReportableAttribute');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.icon !== null && this.icon !== undefined) {
    output.writeFieldBegin('icon', Thrift.Type.I32, 3);
    output.writeI32(this.icon);
    output.writeFieldEnd();
  }
  if (this.reportInputType !== null && this.reportInputType !== undefined) {
    output.writeFieldBegin('reportInputType', Thrift.Type.I32, 4);
    output.writeI32(this.reportInputType);
    output.writeFieldEnd();
  }
  if (this.pickableOptions !== null && this.pickableOptions !== undefined) {
    output.writeFieldBegin('pickableOptions', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.pickableOptions.length);
    for (var iter412 in this.pickableOptions)
    {
      if (this.pickableOptions.hasOwnProperty(iter412))
      {
        iter412 = this.pickableOptions[iter412];
        iter412.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.k !== null && this.k !== undefined) {
    output.writeFieldBegin('k', Thrift.Type.STRING, 6);
    output.writeString(this.k);
    output.writeFieldEnd();
  }
  if (this.applicableTags !== null && this.applicableTags !== undefined) {
    output.writeFieldBegin('applicableTags', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.applicableTags.length);
    for (var iter413 in this.applicableTags)
    {
      if (this.applicableTags.hasOwnProperty(iter413))
      {
        iter413 = this.applicableTags[iter413];
        iter413.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.DEFAULT_PRIVILEGES = {
  101 : true,
  102 : false,
  103 : true,
  104 : true,
  105 : true,
  106 : true,
  107 : true,
  110 : false,
  111 : false,
  201 : false,
  202 : false,
  203 : false,
  204 : true,
  205 : false,
  206 : false,
  207 : false,
  208 : true,
  209 : false,
  210 : false,
  301 : false,
  302 : false,
  303 : false,
  304 : true,
  305 : false,
  306 : false,
  307 : false,
  308 : false,
  401 : true,
  402 : false,
  403 : false,
  404 : false,
  405 : true,
  406 : true,
  501 : true,
  502 : false,
  503 : false,
  504 : true,
  601 : false,
  602 : false,
  603 : false,
  604 : true,
  605 : false,
  606 : false,
  701 : false
};
ttypes.PRIVILEGE_TYPE_TO_SHORT_STRING = {
  101 : 'add points',
  102 : 'delete points',
  103 : 'edit point attributes',
  104 : 'edit point names',
  105 : 'edit point descriptions',
  106 : 'edit coordinates',
  107 : 'edit point information',
  110 : 'add points to other trails',
  111 : 'delete points from other trails',
  201 : 'add towns',
  202 : 'delete towns',
  203 : 'edit town names',
  204 : 'edit town descriptions',
  205 : 'edit town coordinates',
  206 : 'edit town size',
  207 : 'edit town priority',
  208 : 'edit town information',
  209 : 'add towns to other trails',
  210 : 'delete towns from other trails',
  301 : 'add tracks',
  302 : 'delete tracks',
  303 : 'edit track names',
  304 : 'edit track descriptions',
  305 : 'edit track tags',
  306 : 'edit trackpoints',
  307 : 'add track to other trails',
  308 : 'delete track from other trails',
  401 : 'add photos',
  402 : 'delete photos',
  403 : 'edit photo contents',
  404 : 'edit photo descriptions',
  405 : 'star photos',
  406 : 'flag photos',
  501 : 'add comments',
  502 : 'edit comments',
  503 : 'delete comments',
  504 : 'flag comments',
  601 : 'add trails',
  602 : 'delete trails',
  603 : 'edit trail names',
  604 : 'edit wikis',
  605 : 'edit trail tags',
  606 : 'edit trail previews'
};
