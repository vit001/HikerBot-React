//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Limits_ttypes = require('./Limits_types')


var ttypes = module.exports = {};
ttypes.PrivilegeLevel = {
  'NORMAL' : 1,
  'ELEVATED' : 3,
  'ADMIN' : 5,
  'FULL' : 7
};
ttypes.EntitySortOrder = {
  'CREATED' : 1,
  'VERSION' : 2,
  'RELEVANCE' : 3,
  'TITLE' : 4
};
ttypes.VoteType = {
  'VOTE_ACCURATE' : 1,
  'VOTE_INACCURATE' : 2,
  'VOTE_HELPFUL' : 3,
  'VOTE_REDUNDANT' : 4,
  'VOTE_SPAM' : 5,
  'VOTE_STARS' : 6
};
ttypes.Datatype = {
  'USER' : 1,
  'POINT' : 2,
  'TRACK' : 3,
  'RELATION' : 4,
  'MAP' : 5,
  'ANALYTICS' : 6
};
ttypes.AnalyticsType = {
  'ANALYTICS_SCREENVIEW' : 1
};
Data = module.exports.Data = function(args) {
  this.bodyHash = null;
  this.size = null;
  this.body = null;
  if (args) {
    if (args.bodyHash !== undefined && args.bodyHash !== null) {
      this.bodyHash = args.bodyHash;
    }
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    }
    if (args.body !== undefined && args.body !== null) {
      this.body = args.body;
    }
  }
};
Data.prototype = {};
Data.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.bodyHash = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.size = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.body = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Data.prototype.write = function(output) {
  output.writeStructBegin('Data');
  if (this.bodyHash !== null && this.bodyHash !== undefined) {
    output.writeFieldBegin('bodyHash', Thrift.Type.STRING, 1);
    output.writeBinary(this.bodyHash);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I64, 2);
    output.writeI64(this.size);
    output.writeFieldEnd();
  }
  if (this.body !== null && this.body !== undefined) {
    output.writeFieldBegin('body', Thrift.Type.STRING, 3);
    output.writeBinary(this.body);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tag = module.exports.Tag = function(args) {
  this.k = null;
  this.v = null;
  this.deleted = null;
  if (args) {
    if (args.k !== undefined && args.k !== null) {
      this.k = args.k;
    }
    if (args.v !== undefined && args.v !== null) {
      this.v = args.v;
    }
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
  }
};
Tag.prototype = {};
Tag.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.k = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.v = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tag.prototype.write = function(output) {
  output.writeStructBegin('Tag');
  if (this.k !== null && this.k !== undefined) {
    output.writeFieldBegin('k', Thrift.Type.STRING, 1);
    output.writeString(this.k);
    output.writeFieldEnd();
  }
  if (this.v !== null && this.v !== undefined) {
    output.writeFieldBegin('v', Thrift.Type.STRING, 2);
    output.writeString(this.v);
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 3);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Resource = module.exports.Resource = function(args) {
  this.id = null;
  this.version = null;
  this.changeset_id = null;
  this.owner_id = null;
  this.tags = null;
  this.mime = null;
  this.width_px = null;
  this.height_px = null;
  this.sizebytes = null;
  this.preview = null;
  this.full = null;
  this.deleted = null;
  this.resources = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.changeset_id !== undefined && args.changeset_id !== null) {
      this.changeset_id = args.changeset_id;
    }
    if (args.owner_id !== undefined && args.owner_id !== null) {
      this.owner_id = args.owner_id;
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [ttypes.Tag]);
    }
    if (args.mime !== undefined && args.mime !== null) {
      this.mime = args.mime;
    }
    if (args.width_px !== undefined && args.width_px !== null) {
      this.width_px = args.width_px;
    }
    if (args.height_px !== undefined && args.height_px !== null) {
      this.height_px = args.height_px;
    }
    if (args.sizebytes !== undefined && args.sizebytes !== null) {
      this.sizebytes = args.sizebytes;
    }
    if (args.preview !== undefined && args.preview !== null) {
      this.preview = new ttypes.Data(args.preview);
    }
    if (args.full !== undefined && args.full !== null) {
      this.full = new ttypes.Data(args.full);
    }
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
    if (args.resources !== undefined && args.resources !== null) {
      this.resources = Thrift.copyList(args.resources, [null]);
    }
  }
};
Resource.prototype = {};
Resource.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.changeset_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.owner_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.tags = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Tag();
          elem6.read(input);
          this.tags.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.mime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.width_px = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.height_px = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.sizebytes = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.preview = new ttypes.Data();
        this.preview.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.full = new ttypes.Data();
        this.full.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.resources = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = new ttypes.Resource();
          elem13.read(input);
          this.resources.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Resource.prototype.write = function(output) {
  output.writeStructBegin('Resource');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 2);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.changeset_id !== null && this.changeset_id !== undefined) {
    output.writeFieldBegin('changeset_id', Thrift.Type.I64, 3);
    output.writeI64(this.changeset_id);
    output.writeFieldEnd();
  }
  if (this.owner_id !== null && this.owner_id !== undefined) {
    output.writeFieldBegin('owner_id', Thrift.Type.I64, 4);
    output.writeI64(this.owner_id);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter14 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter14))
      {
        iter14 = this.tags[iter14];
        iter14.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.mime !== null && this.mime !== undefined) {
    output.writeFieldBegin('mime', Thrift.Type.STRING, 6);
    output.writeString(this.mime);
    output.writeFieldEnd();
  }
  if (this.width_px !== null && this.width_px !== undefined) {
    output.writeFieldBegin('width_px', Thrift.Type.I32, 7);
    output.writeI32(this.width_px);
    output.writeFieldEnd();
  }
  if (this.height_px !== null && this.height_px !== undefined) {
    output.writeFieldBegin('height_px', Thrift.Type.I32, 8);
    output.writeI32(this.height_px);
    output.writeFieldEnd();
  }
  if (this.sizebytes !== null && this.sizebytes !== undefined) {
    output.writeFieldBegin('sizebytes', Thrift.Type.I64, 9);
    output.writeI64(this.sizebytes);
    output.writeFieldEnd();
  }
  if (this.preview !== null && this.preview !== undefined) {
    output.writeFieldBegin('preview', Thrift.Type.STRUCT, 10);
    this.preview.write(output);
    output.writeFieldEnd();
  }
  if (this.full !== null && this.full !== undefined) {
    output.writeFieldBegin('full', Thrift.Type.STRUCT, 11);
    this.full.write(output);
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 12);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  if (this.resources !== null && this.resources !== undefined) {
    output.writeFieldBegin('resources', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRUCT, this.resources.length);
    for (var iter15 in this.resources)
    {
      if (this.resources.hasOwnProperty(iter15))
      {
        iter15 = this.resources[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Mileage = module.exports.Mileage = function(args) {
  this.selector_id = null;
  this.isextratrack = null;
  this.track_id = null;
  this.track_name = null;
  this.mileagee5 = null;
  this.milesfromtraile5 = null;
  this.bearingfromtraile6 = null;
  this.elevme2attrail = null;
  this.elevgainme2attrail = null;
  this.elevlossme2attrail = null;
  if (args) {
    if (args.selector_id !== undefined && args.selector_id !== null) {
      this.selector_id = args.selector_id;
    }
    if (args.isextratrack !== undefined && args.isextratrack !== null) {
      this.isextratrack = args.isextratrack;
    }
    if (args.track_id !== undefined && args.track_id !== null) {
      this.track_id = args.track_id;
    }
    if (args.track_name !== undefined && args.track_name !== null) {
      this.track_name = args.track_name;
    }
    if (args.mileagee5 !== undefined && args.mileagee5 !== null) {
      this.mileagee5 = args.mileagee5;
    }
    if (args.milesfromtraile5 !== undefined && args.milesfromtraile5 !== null) {
      this.milesfromtraile5 = args.milesfromtraile5;
    }
    if (args.bearingfromtraile6 !== undefined && args.bearingfromtraile6 !== null) {
      this.bearingfromtraile6 = args.bearingfromtraile6;
    }
    if (args.elevme2attrail !== undefined && args.elevme2attrail !== null) {
      this.elevme2attrail = args.elevme2attrail;
    }
    if (args.elevgainme2attrail !== undefined && args.elevgainme2attrail !== null) {
      this.elevgainme2attrail = args.elevgainme2attrail;
    }
    if (args.elevlossme2attrail !== undefined && args.elevlossme2attrail !== null) {
      this.elevlossme2attrail = args.elevlossme2attrail;
    }
  }
};
Mileage.prototype = {};
Mileage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.selector_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.isextratrack = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.track_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.track_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.mileagee5 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.milesfromtraile5 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.bearingfromtraile6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.elevme2attrail = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.elevgainme2attrail = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.elevlossme2attrail = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Mileage.prototype.write = function(output) {
  output.writeStructBegin('Mileage');
  if (this.selector_id !== null && this.selector_id !== undefined) {
    output.writeFieldBegin('selector_id', Thrift.Type.I64, 1);
    output.writeI64(this.selector_id);
    output.writeFieldEnd();
  }
  if (this.isextratrack !== null && this.isextratrack !== undefined) {
    output.writeFieldBegin('isextratrack', Thrift.Type.BOOL, 2);
    output.writeBool(this.isextratrack);
    output.writeFieldEnd();
  }
  if (this.track_id !== null && this.track_id !== undefined) {
    output.writeFieldBegin('track_id', Thrift.Type.I64, 3);
    output.writeI64(this.track_id);
    output.writeFieldEnd();
  }
  if (this.track_name !== null && this.track_name !== undefined) {
    output.writeFieldBegin('track_name', Thrift.Type.STRING, 4);
    output.writeString(this.track_name);
    output.writeFieldEnd();
  }
  if (this.mileagee5 !== null && this.mileagee5 !== undefined) {
    output.writeFieldBegin('mileagee5', Thrift.Type.I32, 5);
    output.writeI32(this.mileagee5);
    output.writeFieldEnd();
  }
  if (this.milesfromtraile5 !== null && this.milesfromtraile5 !== undefined) {
    output.writeFieldBegin('milesfromtraile5', Thrift.Type.I32, 6);
    output.writeI32(this.milesfromtraile5);
    output.writeFieldEnd();
  }
  if (this.bearingfromtraile6 !== null && this.bearingfromtraile6 !== undefined) {
    output.writeFieldBegin('bearingfromtraile6', Thrift.Type.I32, 7);
    output.writeI32(this.bearingfromtraile6);
    output.writeFieldEnd();
  }
  if (this.elevme2attrail !== null && this.elevme2attrail !== undefined) {
    output.writeFieldBegin('elevme2attrail', Thrift.Type.I32, 8);
    output.writeI32(this.elevme2attrail);
    output.writeFieldEnd();
  }
  if (this.elevgainme2attrail !== null && this.elevgainme2attrail !== undefined) {
    output.writeFieldBegin('elevgainme2attrail', Thrift.Type.I32, 9);
    output.writeI32(this.elevgainme2attrail);
    output.writeFieldEnd();
  }
  if (this.elevlossme2attrail !== null && this.elevlossme2attrail !== undefined) {
    output.writeFieldBegin('elevlossme2attrail', Thrift.Type.I32, 10);
    output.writeI32(this.elevlossme2attrail);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Crumb = module.exports.Crumb = function(args) {
  this.id = null;
  this.version = null;
  this.late6 = null;
  this.lone6 = null;
  this.eleme2 = null;
  this.mainlinemileagee5 = null;
  this.time = null;
  this.speed = null;
  this.bearing = null;
  this.accuracym = null;
  this.satellites = null;
  this.provider = null;
  this.zlfo = null;
  this.mileages = null;
  this.deleted = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.late6 !== undefined && args.late6 !== null) {
      this.late6 = args.late6;
    }
    if (args.lone6 !== undefined && args.lone6 !== null) {
      this.lone6 = args.lone6;
    }
    if (args.eleme2 !== undefined && args.eleme2 !== null) {
      this.eleme2 = args.eleme2;
    }
    if (args.mainlinemileagee5 !== undefined && args.mainlinemileagee5 !== null) {
      this.mainlinemileagee5 = args.mainlinemileagee5;
    }
    if (args.time !== undefined && args.time !== null) {
      this.time = args.time;
    }
    if (args.speed !== undefined && args.speed !== null) {
      this.speed = args.speed;
    }
    if (args.bearing !== undefined && args.bearing !== null) {
      this.bearing = args.bearing;
    }
    if (args.accuracym !== undefined && args.accuracym !== null) {
      this.accuracym = args.accuracym;
    }
    if (args.satellites !== undefined && args.satellites !== null) {
      this.satellites = args.satellites;
    }
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = args.provider;
    }
    if (args.zlfo !== undefined && args.zlfo !== null) {
      this.zlfo = args.zlfo;
    }
    if (args.mileages !== undefined && args.mileages !== null) {
      this.mileages = Thrift.copyList(args.mileages, [ttypes.Mileage]);
    }
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
  }
};
Crumb.prototype = {};
Crumb.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.late6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.lone6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.eleme2 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.mainlinemileagee5 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.DOUBLE) {
        this.speed = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.DOUBLE) {
        this.bearing = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.DOUBLE) {
        this.accuracym = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.satellites = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.provider = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.zlfo = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.mileages = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.Mileage();
          elem22.read(input);
          this.mileages.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Crumb.prototype.write = function(output) {
  output.writeStructBegin('Crumb');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 2);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.late6 !== null && this.late6 !== undefined) {
    output.writeFieldBegin('late6', Thrift.Type.I32, 3);
    output.writeI32(this.late6);
    output.writeFieldEnd();
  }
  if (this.lone6 !== null && this.lone6 !== undefined) {
    output.writeFieldBegin('lone6', Thrift.Type.I32, 4);
    output.writeI32(this.lone6);
    output.writeFieldEnd();
  }
  if (this.eleme2 !== null && this.eleme2 !== undefined) {
    output.writeFieldBegin('eleme2', Thrift.Type.I32, 5);
    output.writeI32(this.eleme2);
    output.writeFieldEnd();
  }
  if (this.mainlinemileagee5 !== null && this.mainlinemileagee5 !== undefined) {
    output.writeFieldBegin('mainlinemileagee5', Thrift.Type.I32, 6);
    output.writeI32(this.mainlinemileagee5);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I64, 7);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  if (this.speed !== null && this.speed !== undefined) {
    output.writeFieldBegin('speed', Thrift.Type.DOUBLE, 8);
    output.writeDouble(this.speed);
    output.writeFieldEnd();
  }
  if (this.bearing !== null && this.bearing !== undefined) {
    output.writeFieldBegin('bearing', Thrift.Type.DOUBLE, 9);
    output.writeDouble(this.bearing);
    output.writeFieldEnd();
  }
  if (this.accuracym !== null && this.accuracym !== undefined) {
    output.writeFieldBegin('accuracym', Thrift.Type.DOUBLE, 10);
    output.writeDouble(this.accuracym);
    output.writeFieldEnd();
  }
  if (this.satellites !== null && this.satellites !== undefined) {
    output.writeFieldBegin('satellites', Thrift.Type.I32, 11);
    output.writeI32(this.satellites);
    output.writeFieldEnd();
  }
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.STRING, 12);
    output.writeString(this.provider);
    output.writeFieldEnd();
  }
  if (this.zlfo !== null && this.zlfo !== undefined) {
    output.writeFieldBegin('zlfo', Thrift.Type.I32, 13);
    output.writeI32(this.zlfo);
    output.writeFieldEnd();
  }
  if (this.mileages !== null && this.mileages !== undefined) {
    output.writeFieldBegin('mileages', Thrift.Type.LIST, 15);
    output.writeListBegin(Thrift.Type.STRUCT, this.mileages.length);
    for (var iter23 in this.mileages)
    {
      if (this.mileages.hasOwnProperty(iter23))
      {
        iter23 = this.mileages[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 16);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

User = module.exports.User = function(args) {
  this.id = null;
  this.version = null;
  this.changeset_id = null;
  this.privilege = null;
  this.displayname = null;
  this.gender = null;
  this.selected_selector = null;
  this.images = null;
  this.tags = null;
  this.location_tracks = null;
  this.votes = null;
  this.deleted = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.changeset_id !== undefined && args.changeset_id !== null) {
      this.changeset_id = args.changeset_id;
    }
    if (args.privilege !== undefined && args.privilege !== null) {
      this.privilege = args.privilege;
    }
    if (args.displayname !== undefined && args.displayname !== null) {
      this.displayname = args.displayname;
    }
    if (args.gender !== undefined && args.gender !== null) {
      this.gender = args.gender;
    }
    if (args.selected_selector !== undefined && args.selected_selector !== null) {
      this.selected_selector = args.selected_selector;
    }
    if (args.images !== undefined && args.images !== null) {
      this.images = Thrift.copyList(args.images, [ttypes.Resource]);
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [ttypes.Tag]);
    }
    if (args.location_tracks !== undefined && args.location_tracks !== null) {
      this.location_tracks = Thrift.copyList(args.location_tracks, [null]);
    }
    if (args.votes !== undefined && args.votes !== null) {
      this.votes = Thrift.copyList(args.votes, [null]);
    }
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
  }
};
User.prototype = {};
User.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.changeset_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.privilege = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.displayname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.gender = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.selected_selector = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.images = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.Resource();
          elem30.read(input);
          this.images.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size31 = 0;
        var _rtmp335;
        this.tags = [];
        var _etype34 = 0;
        _rtmp335 = input.readListBegin();
        _etype34 = _rtmp335.etype;
        _size31 = _rtmp335.size;
        for (var _i36 = 0; _i36 < _size31; ++_i36)
        {
          var elem37 = null;
          elem37 = new ttypes.Tag();
          elem37.read(input);
          this.tags.push(elem37);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size38 = 0;
        var _rtmp342;
        this.location_tracks = [];
        var _etype41 = 0;
        _rtmp342 = input.readListBegin();
        _etype41 = _rtmp342.etype;
        _size38 = _rtmp342.size;
        for (var _i43 = 0; _i43 < _size38; ++_i43)
        {
          var elem44 = null;
          elem44 = new ttypes.Track();
          elem44.read(input);
          this.location_tracks.push(elem44);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size45 = 0;
        var _rtmp349;
        this.votes = [];
        var _etype48 = 0;
        _rtmp349 = input.readListBegin();
        _etype48 = _rtmp349.etype;
        _size45 = _rtmp349.size;
        for (var _i50 = 0; _i50 < _size45; ++_i50)
        {
          var elem51 = null;
          elem51 = new ttypes.Vote();
          elem51.read(input);
          this.votes.push(elem51);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

User.prototype.write = function(output) {
  output.writeStructBegin('User');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 2);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.changeset_id !== null && this.changeset_id !== undefined) {
    output.writeFieldBegin('changeset_id', Thrift.Type.I64, 3);
    output.writeI64(this.changeset_id);
    output.writeFieldEnd();
  }
  if (this.privilege !== null && this.privilege !== undefined) {
    output.writeFieldBegin('privilege', Thrift.Type.I32, 4);
    output.writeI32(this.privilege);
    output.writeFieldEnd();
  }
  if (this.displayname !== null && this.displayname !== undefined) {
    output.writeFieldBegin('displayname', Thrift.Type.STRING, 5);
    output.writeString(this.displayname);
    output.writeFieldEnd();
  }
  if (this.gender !== null && this.gender !== undefined) {
    output.writeFieldBegin('gender', Thrift.Type.STRING, 6);
    output.writeString(this.gender);
    output.writeFieldEnd();
  }
  if (this.selected_selector !== null && this.selected_selector !== undefined) {
    output.writeFieldBegin('selected_selector', Thrift.Type.I64, 7);
    output.writeI64(this.selected_selector);
    output.writeFieldEnd();
  }
  if (this.images !== null && this.images !== undefined) {
    output.writeFieldBegin('images', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.images.length);
    for (var iter52 in this.images)
    {
      if (this.images.hasOwnProperty(iter52))
      {
        iter52 = this.images[iter52];
        iter52.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter53 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter53))
      {
        iter53 = this.tags[iter53];
        iter53.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.location_tracks !== null && this.location_tracks !== undefined) {
    output.writeFieldBegin('location_tracks', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.location_tracks.length);
    for (var iter54 in this.location_tracks)
    {
      if (this.location_tracks.hasOwnProperty(iter54))
      {
        iter54 = this.location_tracks[iter54];
        iter54.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.votes !== null && this.votes !== undefined) {
    output.writeFieldBegin('votes', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRUCT, this.votes.length);
    for (var iter55 in this.votes)
    {
      if (this.votes.hasOwnProperty(iter55))
      {
        iter55 = this.votes[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 12);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Point = module.exports.Point = function(args) {
  this.id = null;
  this.version = null;
  this.changeset_id = null;
  this.owner_id = null;
  this.name = null;
  this.description = null;
  this.late6 = null;
  this.lone6 = null;
  this.eleme2 = null;
  this.zlfo = null;
  this.resources = null;
  this.tags = null;
  this.selector_ids = null;
  this.mileages = null;
  this.deleted = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.changeset_id !== undefined && args.changeset_id !== null) {
      this.changeset_id = args.changeset_id;
    }
    if (args.owner_id !== undefined && args.owner_id !== null) {
      this.owner_id = args.owner_id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.late6 !== undefined && args.late6 !== null) {
      this.late6 = args.late6;
    }
    if (args.lone6 !== undefined && args.lone6 !== null) {
      this.lone6 = args.lone6;
    }
    if (args.eleme2 !== undefined && args.eleme2 !== null) {
      this.eleme2 = args.eleme2;
    }
    if (args.zlfo !== undefined && args.zlfo !== null) {
      this.zlfo = args.zlfo;
    }
    if (args.resources !== undefined && args.resources !== null) {
      this.resources = Thrift.copyList(args.resources, [ttypes.Resource]);
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [ttypes.Tag]);
    }
    if (args.selector_ids !== undefined && args.selector_ids !== null) {
      this.selector_ids = Thrift.copyList(args.selector_ids, [null]);
    }
    if (args.mileages !== undefined && args.mileages !== null) {
      this.mileages = Thrift.copyList(args.mileages, [ttypes.Mileage]);
    }
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
  }
};
Point.prototype = {};
Point.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.changeset_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.owner_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.late6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.lone6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.eleme2 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.zlfo = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.resources = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new ttypes.Resource();
          elem62.read(input);
          this.resources.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size63 = 0;
        var _rtmp367;
        this.tags = [];
        var _etype66 = 0;
        _rtmp367 = input.readListBegin();
        _etype66 = _rtmp367.etype;
        _size63 = _rtmp367.size;
        for (var _i68 = 0; _i68 < _size63; ++_i68)
        {
          var elem69 = null;
          elem69 = new ttypes.Tag();
          elem69.read(input);
          this.tags.push(elem69);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size70 = 0;
        var _rtmp374;
        this.selector_ids = [];
        var _etype73 = 0;
        _rtmp374 = input.readListBegin();
        _etype73 = _rtmp374.etype;
        _size70 = _rtmp374.size;
        for (var _i75 = 0; _i75 < _size70; ++_i75)
        {
          var elem76 = null;
          elem76 = input.readI64();
          this.selector_ids.push(elem76);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.LIST) {
        var _size77 = 0;
        var _rtmp381;
        this.mileages = [];
        var _etype80 = 0;
        _rtmp381 = input.readListBegin();
        _etype80 = _rtmp381.etype;
        _size77 = _rtmp381.size;
        for (var _i82 = 0; _i82 < _size77; ++_i82)
        {
          var elem83 = null;
          elem83 = new ttypes.Mileage();
          elem83.read(input);
          this.mileages.push(elem83);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Point.prototype.write = function(output) {
  output.writeStructBegin('Point');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 2);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.changeset_id !== null && this.changeset_id !== undefined) {
    output.writeFieldBegin('changeset_id', Thrift.Type.I64, 3);
    output.writeI64(this.changeset_id);
    output.writeFieldEnd();
  }
  if (this.owner_id !== null && this.owner_id !== undefined) {
    output.writeFieldBegin('owner_id', Thrift.Type.I64, 4);
    output.writeI64(this.owner_id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 5);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 6);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.late6 !== null && this.late6 !== undefined) {
    output.writeFieldBegin('late6', Thrift.Type.I32, 7);
    output.writeI32(this.late6);
    output.writeFieldEnd();
  }
  if (this.lone6 !== null && this.lone6 !== undefined) {
    output.writeFieldBegin('lone6', Thrift.Type.I32, 8);
    output.writeI32(this.lone6);
    output.writeFieldEnd();
  }
  if (this.eleme2 !== null && this.eleme2 !== undefined) {
    output.writeFieldBegin('eleme2', Thrift.Type.I32, 9);
    output.writeI32(this.eleme2);
    output.writeFieldEnd();
  }
  if (this.zlfo !== null && this.zlfo !== undefined) {
    output.writeFieldBegin('zlfo', Thrift.Type.I32, 10);
    output.writeI32(this.zlfo);
    output.writeFieldEnd();
  }
  if (this.resources !== null && this.resources !== undefined) {
    output.writeFieldBegin('resources', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRUCT, this.resources.length);
    for (var iter84 in this.resources)
    {
      if (this.resources.hasOwnProperty(iter84))
      {
        iter84 = this.resources[iter84];
        iter84.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter85 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter85))
      {
        iter85 = this.tags[iter85];
        iter85.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.selector_ids !== null && this.selector_ids !== undefined) {
    output.writeFieldBegin('selector_ids', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.I64, this.selector_ids.length);
    for (var iter86 in this.selector_ids)
    {
      if (this.selector_ids.hasOwnProperty(iter86))
      {
        iter86 = this.selector_ids[iter86];
        output.writeI64(iter86);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.mileages !== null && this.mileages !== undefined) {
    output.writeFieldBegin('mileages', Thrift.Type.LIST, 14);
    output.writeListBegin(Thrift.Type.STRUCT, this.mileages.length);
    for (var iter87 in this.mileages)
    {
      if (this.mileages.hasOwnProperty(iter87))
      {
        iter87 = this.mileages[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 15);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Track = module.exports.Track = function(args) {
  this.id = null;
  this.version = null;
  this.changeset_id = null;
  this.owner_id = null;
  this.name = null;
  this.description = null;
  this.swlate6 = null;
  this.swlone6 = null;
  this.nelate6 = null;
  this.nelone6 = null;
  this.path = null;
  this.resources = null;
  this.tags = null;
  this.selector_ids = null;
  this.deleted = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.changeset_id !== undefined && args.changeset_id !== null) {
      this.changeset_id = args.changeset_id;
    }
    if (args.owner_id !== undefined && args.owner_id !== null) {
      this.owner_id = args.owner_id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.swlate6 !== undefined && args.swlate6 !== null) {
      this.swlate6 = args.swlate6;
    }
    if (args.swlone6 !== undefined && args.swlone6 !== null) {
      this.swlone6 = args.swlone6;
    }
    if (args.nelate6 !== undefined && args.nelate6 !== null) {
      this.nelate6 = args.nelate6;
    }
    if (args.nelone6 !== undefined && args.nelone6 !== null) {
      this.nelone6 = args.nelone6;
    }
    if (args.path !== undefined && args.path !== null) {
      this.path = new ttypes.Path(args.path);
    }
    if (args.resources !== undefined && args.resources !== null) {
      this.resources = Thrift.copyList(args.resources, [ttypes.Resource]);
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [ttypes.Tag]);
    }
    if (args.selector_ids !== undefined && args.selector_ids !== null) {
      this.selector_ids = Thrift.copyList(args.selector_ids, [null]);
    }
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
  }
};
Track.prototype = {};
Track.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.changeset_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.owner_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.swlate6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.swlone6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.nelate6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.nelone6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.path = new ttypes.Path();
        this.path.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.resources = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = new ttypes.Resource();
          elem94.read(input);
          this.resources.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size95 = 0;
        var _rtmp399;
        this.tags = [];
        var _etype98 = 0;
        _rtmp399 = input.readListBegin();
        _etype98 = _rtmp399.etype;
        _size95 = _rtmp399.size;
        for (var _i100 = 0; _i100 < _size95; ++_i100)
        {
          var elem101 = null;
          elem101 = new ttypes.Tag();
          elem101.read(input);
          this.tags.push(elem101);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.LIST) {
        var _size102 = 0;
        var _rtmp3106;
        this.selector_ids = [];
        var _etype105 = 0;
        _rtmp3106 = input.readListBegin();
        _etype105 = _rtmp3106.etype;
        _size102 = _rtmp3106.size;
        for (var _i107 = 0; _i107 < _size102; ++_i107)
        {
          var elem108 = null;
          elem108 = input.readI64();
          this.selector_ids.push(elem108);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Track.prototype.write = function(output) {
  output.writeStructBegin('Track');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 2);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.changeset_id !== null && this.changeset_id !== undefined) {
    output.writeFieldBegin('changeset_id', Thrift.Type.I64, 3);
    output.writeI64(this.changeset_id);
    output.writeFieldEnd();
  }
  if (this.owner_id !== null && this.owner_id !== undefined) {
    output.writeFieldBegin('owner_id', Thrift.Type.I64, 4);
    output.writeI64(this.owner_id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 5);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 6);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.swlate6 !== null && this.swlate6 !== undefined) {
    output.writeFieldBegin('swlate6', Thrift.Type.I32, 7);
    output.writeI32(this.swlate6);
    output.writeFieldEnd();
  }
  if (this.swlone6 !== null && this.swlone6 !== undefined) {
    output.writeFieldBegin('swlone6', Thrift.Type.I32, 8);
    output.writeI32(this.swlone6);
    output.writeFieldEnd();
  }
  if (this.nelate6 !== null && this.nelate6 !== undefined) {
    output.writeFieldBegin('nelate6', Thrift.Type.I32, 9);
    output.writeI32(this.nelate6);
    output.writeFieldEnd();
  }
  if (this.nelone6 !== null && this.nelone6 !== undefined) {
    output.writeFieldBegin('nelone6', Thrift.Type.I32, 10);
    output.writeI32(this.nelone6);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRUCT, 11);
    this.path.write(output);
    output.writeFieldEnd();
  }
  if (this.resources !== null && this.resources !== undefined) {
    output.writeFieldBegin('resources', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRUCT, this.resources.length);
    for (var iter109 in this.resources)
    {
      if (this.resources.hasOwnProperty(iter109))
      {
        iter109 = this.resources[iter109];
        iter109.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter110 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter110))
      {
        iter110 = this.tags[iter110];
        iter110.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.selector_ids !== null && this.selector_ids !== undefined) {
    output.writeFieldBegin('selector_ids', Thrift.Type.LIST, 14);
    output.writeListBegin(Thrift.Type.I64, this.selector_ids.length);
    for (var iter111 in this.selector_ids)
    {
      if (this.selector_ids.hasOwnProperty(iter111))
      {
        iter111 = this.selector_ids[iter111];
        output.writeI64(iter111);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 15);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Path = module.exports.Path = function(args) {
  this.id = null;
  this.version = null;
  this.changeset_id = null;
  this.owner_id = null;
  this.crumbs = null;
  this.deleted = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.changeset_id !== undefined && args.changeset_id !== null) {
      this.changeset_id = args.changeset_id;
    }
    if (args.owner_id !== undefined && args.owner_id !== null) {
      this.owner_id = args.owner_id;
    }
    if (args.crumbs !== undefined && args.crumbs !== null) {
      this.crumbs = Thrift.copyList(args.crumbs, [ttypes.Crumb]);
    }
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
  }
};
Path.prototype = {};
Path.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.changeset_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.owner_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.crumbs = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = new ttypes.Crumb();
          elem118.read(input);
          this.crumbs.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Path.prototype.write = function(output) {
  output.writeStructBegin('Path');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 2);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.changeset_id !== null && this.changeset_id !== undefined) {
    output.writeFieldBegin('changeset_id', Thrift.Type.I64, 3);
    output.writeI64(this.changeset_id);
    output.writeFieldEnd();
  }
  if (this.owner_id !== null && this.owner_id !== undefined) {
    output.writeFieldBegin('owner_id', Thrift.Type.I64, 4);
    output.writeI64(this.owner_id);
    output.writeFieldEnd();
  }
  if (this.crumbs !== null && this.crumbs !== undefined) {
    output.writeFieldBegin('crumbs', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.crumbs.length);
    for (var iter119 in this.crumbs)
    {
      if (this.crumbs.hasOwnProperty(iter119))
      {
        iter119 = this.crumbs[iter119];
        iter119.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 6);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RelationMember = module.exports.RelationMember = function(args) {
  this.node_id = null;
  this.member_role = null;
  this.member_type = null;
  this.deleted = null;
  if (args) {
    if (args.node_id !== undefined && args.node_id !== null) {
      this.node_id = args.node_id;
    }
    if (args.member_role !== undefined && args.member_role !== null) {
      this.member_role = args.member_role;
    }
    if (args.member_type !== undefined && args.member_type !== null) {
      this.member_type = args.member_type;
    }
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
  }
};
RelationMember.prototype = {};
RelationMember.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.node_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.member_role = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.member_type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RelationMember.prototype.write = function(output) {
  output.writeStructBegin('RelationMember');
  if (this.node_id !== null && this.node_id !== undefined) {
    output.writeFieldBegin('node_id', Thrift.Type.I64, 1);
    output.writeI64(this.node_id);
    output.writeFieldEnd();
  }
  if (this.member_role !== null && this.member_role !== undefined) {
    output.writeFieldBegin('member_role', Thrift.Type.STRING, 2);
    output.writeString(this.member_role);
    output.writeFieldEnd();
  }
  if (this.member_type !== null && this.member_type !== undefined) {
    output.writeFieldBegin('member_type', Thrift.Type.STRING, 3);
    output.writeString(this.member_type);
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 4);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Relation = module.exports.Relation = function(args) {
  this.id = null;
  this.version = null;
  this.changeset_id = null;
  this.owner_id = null;
  this.tags = null;
  this.members = null;
  this.selector_ids = null;
  this.mileages = null;
  this.deleted = null;
  this.resources = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.changeset_id !== undefined && args.changeset_id !== null) {
      this.changeset_id = args.changeset_id;
    }
    if (args.owner_id !== undefined && args.owner_id !== null) {
      this.owner_id = args.owner_id;
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [ttypes.Tag]);
    }
    if (args.members !== undefined && args.members !== null) {
      this.members = Thrift.copyList(args.members, [ttypes.RelationMember]);
    }
    if (args.selector_ids !== undefined && args.selector_ids !== null) {
      this.selector_ids = Thrift.copyList(args.selector_ids, [null]);
    }
    if (args.mileages !== undefined && args.mileages !== null) {
      this.mileages = Thrift.copyList(args.mileages, [ttypes.Mileage]);
    }
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
    if (args.resources !== undefined && args.resources !== null) {
      this.resources = Thrift.copyList(args.resources, [ttypes.Resource]);
    }
  }
};
Relation.prototype = {};
Relation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.changeset_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.owner_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.tags = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = new ttypes.Tag();
          elem126.read(input);
          this.tags.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size127 = 0;
        var _rtmp3131;
        this.members = [];
        var _etype130 = 0;
        _rtmp3131 = input.readListBegin();
        _etype130 = _rtmp3131.etype;
        _size127 = _rtmp3131.size;
        for (var _i132 = 0; _i132 < _size127; ++_i132)
        {
          var elem133 = null;
          elem133 = new ttypes.RelationMember();
          elem133.read(input);
          this.members.push(elem133);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size134 = 0;
        var _rtmp3138;
        this.selector_ids = [];
        var _etype137 = 0;
        _rtmp3138 = input.readListBegin();
        _etype137 = _rtmp3138.etype;
        _size134 = _rtmp3138.size;
        for (var _i139 = 0; _i139 < _size134; ++_i139)
        {
          var elem140 = null;
          elem140 = input.readI64();
          this.selector_ids.push(elem140);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size141 = 0;
        var _rtmp3145;
        this.mileages = [];
        var _etype144 = 0;
        _rtmp3145 = input.readListBegin();
        _etype144 = _rtmp3145.etype;
        _size141 = _rtmp3145.size;
        for (var _i146 = 0; _i146 < _size141; ++_i146)
        {
          var elem147 = null;
          elem147 = new ttypes.Mileage();
          elem147.read(input);
          this.mileages.push(elem147);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size148 = 0;
        var _rtmp3152;
        this.resources = [];
        var _etype151 = 0;
        _rtmp3152 = input.readListBegin();
        _etype151 = _rtmp3152.etype;
        _size148 = _rtmp3152.size;
        for (var _i153 = 0; _i153 < _size148; ++_i153)
        {
          var elem154 = null;
          elem154 = new ttypes.Resource();
          elem154.read(input);
          this.resources.push(elem154);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Relation.prototype.write = function(output) {
  output.writeStructBegin('Relation');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 2);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.changeset_id !== null && this.changeset_id !== undefined) {
    output.writeFieldBegin('changeset_id', Thrift.Type.I64, 3);
    output.writeI64(this.changeset_id);
    output.writeFieldEnd();
  }
  if (this.owner_id !== null && this.owner_id !== undefined) {
    output.writeFieldBegin('owner_id', Thrift.Type.I64, 4);
    output.writeI64(this.owner_id);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter155 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter155))
      {
        iter155 = this.tags[iter155];
        iter155.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.members !== null && this.members !== undefined) {
    output.writeFieldBegin('members', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.members.length);
    for (var iter156 in this.members)
    {
      if (this.members.hasOwnProperty(iter156))
      {
        iter156 = this.members[iter156];
        iter156.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.selector_ids !== null && this.selector_ids !== undefined) {
    output.writeFieldBegin('selector_ids', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.I64, this.selector_ids.length);
    for (var iter157 in this.selector_ids)
    {
      if (this.selector_ids.hasOwnProperty(iter157))
      {
        iter157 = this.selector_ids[iter157];
        output.writeI64(iter157);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.mileages !== null && this.mileages !== undefined) {
    output.writeFieldBegin('mileages', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.mileages.length);
    for (var iter158 in this.mileages)
    {
      if (this.mileages.hasOwnProperty(iter158))
      {
        iter158 = this.mileages[iter158];
        iter158.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 9);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  if (this.resources !== null && this.resources !== undefined) {
    output.writeFieldBegin('resources', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.resources.length);
    for (var iter159 in this.resources)
    {
      if (this.resources.hasOwnProperty(iter159))
      {
        iter159 = this.resources[iter159];
        iter159.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Changeset = module.exports.Changeset = function(args) {
  this.id = null;
  this.user_id = null;
  this.createtime = null;
  this.closetime = null;
  this.committime = null;
  this.minlate6 = null;
  this.maxlate6 = null;
  this.minlone6 = null;
  this.maxlone6 = null;
  this.numchanges = null;
  this.tags = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.user_id !== undefined && args.user_id !== null) {
      this.user_id = args.user_id;
    }
    if (args.createtime !== undefined && args.createtime !== null) {
      this.createtime = args.createtime;
    }
    if (args.closetime !== undefined && args.closetime !== null) {
      this.closetime = args.closetime;
    }
    if (args.committime !== undefined && args.committime !== null) {
      this.committime = args.committime;
    }
    if (args.minlate6 !== undefined && args.minlate6 !== null) {
      this.minlate6 = args.minlate6;
    }
    if (args.maxlate6 !== undefined && args.maxlate6 !== null) {
      this.maxlate6 = args.maxlate6;
    }
    if (args.minlone6 !== undefined && args.minlone6 !== null) {
      this.minlone6 = args.minlone6;
    }
    if (args.maxlone6 !== undefined && args.maxlone6 !== null) {
      this.maxlone6 = args.maxlone6;
    }
    if (args.numchanges !== undefined && args.numchanges !== null) {
      this.numchanges = args.numchanges;
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [ttypes.Tag]);
    }
  }
};
Changeset.prototype = {};
Changeset.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.user_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.createtime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.closetime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.committime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.minlate6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.maxlate6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.minlone6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.maxlone6 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.numchanges = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size160 = 0;
        var _rtmp3164;
        this.tags = [];
        var _etype163 = 0;
        _rtmp3164 = input.readListBegin();
        _etype163 = _rtmp3164.etype;
        _size160 = _rtmp3164.size;
        for (var _i165 = 0; _i165 < _size160; ++_i165)
        {
          var elem166 = null;
          elem166 = new ttypes.Tag();
          elem166.read(input);
          this.tags.push(elem166);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Changeset.prototype.write = function(output) {
  output.writeStructBegin('Changeset');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.user_id !== null && this.user_id !== undefined) {
    output.writeFieldBegin('user_id', Thrift.Type.I64, 2);
    output.writeI64(this.user_id);
    output.writeFieldEnd();
  }
  if (this.createtime !== null && this.createtime !== undefined) {
    output.writeFieldBegin('createtime', Thrift.Type.I64, 3);
    output.writeI64(this.createtime);
    output.writeFieldEnd();
  }
  if (this.closetime !== null && this.closetime !== undefined) {
    output.writeFieldBegin('closetime', Thrift.Type.I64, 4);
    output.writeI64(this.closetime);
    output.writeFieldEnd();
  }
  if (this.committime !== null && this.committime !== undefined) {
    output.writeFieldBegin('committime', Thrift.Type.I64, 5);
    output.writeI64(this.committime);
    output.writeFieldEnd();
  }
  if (this.minlate6 !== null && this.minlate6 !== undefined) {
    output.writeFieldBegin('minlate6', Thrift.Type.I32, 6);
    output.writeI32(this.minlate6);
    output.writeFieldEnd();
  }
  if (this.maxlate6 !== null && this.maxlate6 !== undefined) {
    output.writeFieldBegin('maxlate6', Thrift.Type.I32, 7);
    output.writeI32(this.maxlate6);
    output.writeFieldEnd();
  }
  if (this.minlone6 !== null && this.minlone6 !== undefined) {
    output.writeFieldBegin('minlone6', Thrift.Type.I32, 8);
    output.writeI32(this.minlone6);
    output.writeFieldEnd();
  }
  if (this.maxlone6 !== null && this.maxlone6 !== undefined) {
    output.writeFieldBegin('maxlone6', Thrift.Type.I32, 9);
    output.writeI32(this.maxlone6);
    output.writeFieldEnd();
  }
  if (this.numchanges !== null && this.numchanges !== undefined) {
    output.writeFieldBegin('numchanges', Thrift.Type.I32, 10);
    output.writeI32(this.numchanges);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter167 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter167))
      {
        iter167 = this.tags[iter167];
        iter167.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Selector = module.exports.Selector = function(args) {
  this.id = null;
  this.version = null;
  this.changeset_id = null;
  this.shortname = null;
  this.longname = null;
  this.icons = null;
  this.tags = null;
  this.deleted = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.changeset_id !== undefined && args.changeset_id !== null) {
      this.changeset_id = args.changeset_id;
    }
    if (args.shortname !== undefined && args.shortname !== null) {
      this.shortname = args.shortname;
    }
    if (args.longname !== undefined && args.longname !== null) {
      this.longname = args.longname;
    }
    if (args.icons !== undefined && args.icons !== null) {
      this.icons = Thrift.copyList(args.icons, [ttypes.Resource]);
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [ttypes.Tag]);
    }
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
  }
};
Selector.prototype = {};
Selector.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.changeset_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.shortname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.longname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size168 = 0;
        var _rtmp3172;
        this.icons = [];
        var _etype171 = 0;
        _rtmp3172 = input.readListBegin();
        _etype171 = _rtmp3172.etype;
        _size168 = _rtmp3172.size;
        for (var _i173 = 0; _i173 < _size168; ++_i173)
        {
          var elem174 = null;
          elem174 = new ttypes.Resource();
          elem174.read(input);
          this.icons.push(elem174);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size175 = 0;
        var _rtmp3179;
        this.tags = [];
        var _etype178 = 0;
        _rtmp3179 = input.readListBegin();
        _etype178 = _rtmp3179.etype;
        _size175 = _rtmp3179.size;
        for (var _i180 = 0; _i180 < _size175; ++_i180)
        {
          var elem181 = null;
          elem181 = new ttypes.Tag();
          elem181.read(input);
          this.tags.push(elem181);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Selector.prototype.write = function(output) {
  output.writeStructBegin('Selector');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 2);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.changeset_id !== null && this.changeset_id !== undefined) {
    output.writeFieldBegin('changeset_id', Thrift.Type.I64, 3);
    output.writeI64(this.changeset_id);
    output.writeFieldEnd();
  }
  if (this.shortname !== null && this.shortname !== undefined) {
    output.writeFieldBegin('shortname', Thrift.Type.STRING, 4);
    output.writeString(this.shortname);
    output.writeFieldEnd();
  }
  if (this.longname !== null && this.longname !== undefined) {
    output.writeFieldBegin('longname', Thrift.Type.STRING, 5);
    output.writeString(this.longname);
    output.writeFieldEnd();
  }
  if (this.icons !== null && this.icons !== undefined) {
    output.writeFieldBegin('icons', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.icons.length);
    for (var iter182 in this.icons)
    {
      if (this.icons.hasOwnProperty(iter182))
      {
        iter182 = this.icons[iter182];
        iter182.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter183 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter183))
      {
        iter183 = this.tags[iter183];
        iter183.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 8);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Datastatus = module.exports.Datastatus = function(args) {
  this.id = null;
  this.version = null;
  this.changeset_id = null;
  this.datatype = null;
  this.selector = null;
  this.filename = null;
  this.shortname = null;
  this.longname = null;
  this.icons = null;
  this.tags = null;
  this.recordsavailable = null;
  this.bytesavailable = null;
  this.max_changeset_id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.changeset_id !== undefined && args.changeset_id !== null) {
      this.changeset_id = args.changeset_id;
    }
    if (args.datatype !== undefined && args.datatype !== null) {
      this.datatype = args.datatype;
    }
    if (args.selector !== undefined && args.selector !== null) {
      this.selector = new ttypes.Selector(args.selector);
    }
    if (args.filename !== undefined && args.filename !== null) {
      this.filename = args.filename;
    }
    if (args.shortname !== undefined && args.shortname !== null) {
      this.shortname = args.shortname;
    }
    if (args.longname !== undefined && args.longname !== null) {
      this.longname = args.longname;
    }
    if (args.icons !== undefined && args.icons !== null) {
      this.icons = Thrift.copyList(args.icons, [ttypes.Resource]);
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [ttypes.Tag]);
    }
    if (args.recordsavailable !== undefined && args.recordsavailable !== null) {
      this.recordsavailable = args.recordsavailable;
    }
    if (args.bytesavailable !== undefined && args.bytesavailable !== null) {
      this.bytesavailable = args.bytesavailable;
    }
    if (args.max_changeset_id !== undefined && args.max_changeset_id !== null) {
      this.max_changeset_id = args.max_changeset_id;
    }
  }
};
Datastatus.prototype = {};
Datastatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.changeset_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.datatype = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.selector = new ttypes.Selector();
        this.selector.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.filename = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.shortname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.longname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size184 = 0;
        var _rtmp3188;
        this.icons = [];
        var _etype187 = 0;
        _rtmp3188 = input.readListBegin();
        _etype187 = _rtmp3188.etype;
        _size184 = _rtmp3188.size;
        for (var _i189 = 0; _i189 < _size184; ++_i189)
        {
          var elem190 = null;
          elem190 = new ttypes.Resource();
          elem190.read(input);
          this.icons.push(elem190);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size191 = 0;
        var _rtmp3195;
        this.tags = [];
        var _etype194 = 0;
        _rtmp3195 = input.readListBegin();
        _etype194 = _rtmp3195.etype;
        _size191 = _rtmp3195.size;
        for (var _i196 = 0; _i196 < _size191; ++_i196)
        {
          var elem197 = null;
          elem197 = new ttypes.Tag();
          elem197.read(input);
          this.tags.push(elem197);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.recordsavailable = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.bytesavailable = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.max_changeset_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Datastatus.prototype.write = function(output) {
  output.writeStructBegin('Datastatus');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I64, 2);
    output.writeI64(this.version);
    output.writeFieldEnd();
  }
  if (this.changeset_id !== null && this.changeset_id !== undefined) {
    output.writeFieldBegin('changeset_id', Thrift.Type.I64, 3);
    output.writeI64(this.changeset_id);
    output.writeFieldEnd();
  }
  if (this.datatype !== null && this.datatype !== undefined) {
    output.writeFieldBegin('datatype', Thrift.Type.I32, 4);
    output.writeI32(this.datatype);
    output.writeFieldEnd();
  }
  if (this.selector !== null && this.selector !== undefined) {
    output.writeFieldBegin('selector', Thrift.Type.STRUCT, 5);
    this.selector.write(output);
    output.writeFieldEnd();
  }
  if (this.filename !== null && this.filename !== undefined) {
    output.writeFieldBegin('filename', Thrift.Type.STRING, 6);
    output.writeString(this.filename);
    output.writeFieldEnd();
  }
  if (this.shortname !== null && this.shortname !== undefined) {
    output.writeFieldBegin('shortname', Thrift.Type.STRING, 7);
    output.writeString(this.shortname);
    output.writeFieldEnd();
  }
  if (this.longname !== null && this.longname !== undefined) {
    output.writeFieldBegin('longname', Thrift.Type.STRING, 8);
    output.writeString(this.longname);
    output.writeFieldEnd();
  }
  if (this.icons !== null && this.icons !== undefined) {
    output.writeFieldBegin('icons', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRUCT, this.icons.length);
    for (var iter198 in this.icons)
    {
      if (this.icons.hasOwnProperty(iter198))
      {
        iter198 = this.icons[iter198];
        iter198.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter199 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter199))
      {
        iter199 = this.tags[iter199];
        iter199.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.recordsavailable !== null && this.recordsavailable !== undefined) {
    output.writeFieldBegin('recordsavailable', Thrift.Type.I64, 11);
    output.writeI64(this.recordsavailable);
    output.writeFieldEnd();
  }
  if (this.bytesavailable !== null && this.bytesavailable !== undefined) {
    output.writeFieldBegin('bytesavailable', Thrift.Type.I64, 12);
    output.writeI64(this.bytesavailable);
    output.writeFieldEnd();
  }
  if (this.max_changeset_id !== null && this.max_changeset_id !== undefined) {
    output.writeFieldBegin('max_changeset_id', Thrift.Type.I64, 13);
    output.writeI64(this.max_changeset_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthenticationResult = module.exports.AuthenticationResult = function(args) {
  this.id = null;
  this.currentTime = null;
  this.authenticationToken = null;
  this.expiration = null;
  this.response = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.currentTime !== undefined && args.currentTime !== null) {
      this.currentTime = args.currentTime;
    }
    if (args.authenticationToken !== undefined && args.authenticationToken !== null) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.expiration !== undefined && args.expiration !== null) {
      this.expiration = args.expiration;
    }
    if (args.response !== undefined && args.response !== null) {
      this.response = new ttypes.Response(args.response);
    }
  }
};
AuthenticationResult.prototype = {};
AuthenticationResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.currentTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.expiration = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.response = new ttypes.Response();
        this.response.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthenticationResult.prototype.write = function(output) {
  output.writeStructBegin('AuthenticationResult');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.currentTime !== null && this.currentTime !== undefined) {
    output.writeFieldBegin('currentTime', Thrift.Type.I64, 2);
    output.writeI64(this.currentTime);
    output.writeFieldEnd();
  }
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 3);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.expiration !== null && this.expiration !== undefined) {
    output.writeFieldBegin('expiration', Thrift.Type.I64, 4);
    output.writeI64(this.expiration);
    output.writeFieldEnd();
  }
  if (this.response !== null && this.response !== undefined) {
    output.writeFieldBegin('response', Thrift.Type.STRUCT, 5);
    this.response.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Vote = module.exports.Vote = function(args) {
  this.target_id = null;
  this.target_version = null;
  this.vote_type = null;
  this.value = null;
  this.timestamp = null;
  if (args) {
    if (args.target_id !== undefined && args.target_id !== null) {
      this.target_id = args.target_id;
    }
    if (args.target_version !== undefined && args.target_version !== null) {
      this.target_version = args.target_version;
    }
    if (args.vote_type !== undefined && args.vote_type !== null) {
      this.vote_type = args.vote_type;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
  }
};
Vote.prototype = {};
Vote.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.target_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.target_version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.vote_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.value = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Vote.prototype.write = function(output) {
  output.writeStructBegin('Vote');
  if (this.target_id !== null && this.target_id !== undefined) {
    output.writeFieldBegin('target_id', Thrift.Type.I64, 1);
    output.writeI64(this.target_id);
    output.writeFieldEnd();
  }
  if (this.target_version !== null && this.target_version !== undefined) {
    output.writeFieldBegin('target_version', Thrift.Type.I64, 2);
    output.writeI64(this.target_version);
    output.writeFieldEnd();
  }
  if (this.vote_type !== null && this.vote_type !== undefined) {
    output.writeFieldBegin('vote_type', Thrift.Type.I32, 3);
    output.writeI32(this.vote_type);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.I32, 4);
    output.writeI32(this.value);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 5);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnalyticsSubmit = module.exports.AnalyticsSubmit = function(args) {
  this.user_id = null;
  this.target_id = null;
  this.target_version = null;
  this.event_type = null;
  this.value = null;
  this.timestamp = null;
  this.UUID = null;
  if (args) {
    if (args.user_id !== undefined && args.user_id !== null) {
      this.user_id = args.user_id;
    }
    if (args.target_id !== undefined && args.target_id !== null) {
      this.target_id = args.target_id;
    }
    if (args.target_version !== undefined && args.target_version !== null) {
      this.target_version = args.target_version;
    }
    if (args.event_type !== undefined && args.event_type !== null) {
      this.event_type = args.event_type;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.UUID !== undefined && args.UUID !== null) {
      this.UUID = args.UUID;
    }
  }
};
AnalyticsSubmit.prototype = {};
AnalyticsSubmit.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.user_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.target_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.target_version = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.event_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.value = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.UUID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnalyticsSubmit.prototype.write = function(output) {
  output.writeStructBegin('AnalyticsSubmit');
  if (this.user_id !== null && this.user_id !== undefined) {
    output.writeFieldBegin('user_id', Thrift.Type.I64, 1);
    output.writeI64(this.user_id);
    output.writeFieldEnd();
  }
  if (this.target_id !== null && this.target_id !== undefined) {
    output.writeFieldBegin('target_id', Thrift.Type.I64, 2);
    output.writeI64(this.target_id);
    output.writeFieldEnd();
  }
  if (this.target_version !== null && this.target_version !== undefined) {
    output.writeFieldBegin('target_version', Thrift.Type.I64, 3);
    output.writeI64(this.target_version);
    output.writeFieldEnd();
  }
  if (this.event_type !== null && this.event_type !== undefined) {
    output.writeFieldBegin('event_type', Thrift.Type.I32, 4);
    output.writeI32(this.event_type);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.I32, 5);
    output.writeI32(this.value);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 6);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.UUID !== null && this.UUID !== undefined) {
    output.writeFieldBegin('UUID', Thrift.Type.STRING, 7);
    output.writeString(this.UUID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnalyticsAggregate = module.exports.AnalyticsAggregate = function(args) {
  this.changeset_id = null;
  this.target_id = null;
  this.event_type = null;
  this.value = null;
  this.timestamp = null;
  if (args) {
    if (args.changeset_id !== undefined && args.changeset_id !== null) {
      this.changeset_id = args.changeset_id;
    }
    if (args.target_id !== undefined && args.target_id !== null) {
      this.target_id = args.target_id;
    }
    if (args.event_type !== undefined && args.event_type !== null) {
      this.event_type = args.event_type;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
  }
};
AnalyticsAggregate.prototype = {};
AnalyticsAggregate.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.changeset_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.target_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.event_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.value = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnalyticsAggregate.prototype.write = function(output) {
  output.writeStructBegin('AnalyticsAggregate');
  if (this.changeset_id !== null && this.changeset_id !== undefined) {
    output.writeFieldBegin('changeset_id', Thrift.Type.I64, 1);
    output.writeI64(this.changeset_id);
    output.writeFieldEnd();
  }
  if (this.target_id !== null && this.target_id !== undefined) {
    output.writeFieldBegin('target_id', Thrift.Type.I64, 2);
    output.writeI64(this.target_id);
    output.writeFieldEnd();
  }
  if (this.event_type !== null && this.event_type !== undefined) {
    output.writeFieldBegin('event_type', Thrift.Type.I32, 3);
    output.writeI32(this.event_type);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.I32, 4);
    output.writeI32(this.value);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 5);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Response = module.exports.Response = function(args) {
  this.deleted = null;
  this.changeset = null;
  this.proxyidmap = null;
  this.user = null;
  this.point = null;
  this.track = null;
  this.relation = null;
  this.selector = null;
  this.datastatus = null;
  this.analyticsAggregateList = null;
  if (args) {
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
    if (args.changeset !== undefined && args.changeset !== null) {
      this.changeset = new ttypes.Changeset(args.changeset);
    }
    if (args.proxyidmap !== undefined && args.proxyidmap !== null) {
      this.proxyidmap = Thrift.copyMap(args.proxyidmap, [null]);
    }
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.User(args.user);
    }
    if (args.point !== undefined && args.point !== null) {
      this.point = new ttypes.Point(args.point);
    }
    if (args.track !== undefined && args.track !== null) {
      this.track = new ttypes.Track(args.track);
    }
    if (args.relation !== undefined && args.relation !== null) {
      this.relation = new ttypes.Relation(args.relation);
    }
    if (args.selector !== undefined && args.selector !== null) {
      this.selector = new ttypes.Selector(args.selector);
    }
    if (args.datastatus !== undefined && args.datastatus !== null) {
      this.datastatus = new ttypes.Datastatus(args.datastatus);
    }
    if (args.analyticsAggregateList !== undefined && args.analyticsAggregateList !== null) {
      this.analyticsAggregateList = Thrift.copyList(args.analyticsAggregateList, [ttypes.AnalyticsAggregate]);
    }
  }
};
Response.prototype = {};
Response.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.deleted = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.changeset = new ttypes.Changeset();
        this.changeset.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size200 = 0;
        var _rtmp3204;
        this.proxyidmap = {};
        var _ktype201 = 0;
        var _vtype202 = 0;
        _rtmp3204 = input.readMapBegin();
        _ktype201 = _rtmp3204.ktype;
        _vtype202 = _rtmp3204.vtype;
        _size200 = _rtmp3204.size;
        for (var _i205 = 0; _i205 < _size200; ++_i205)
        {
          var key206 = null;
          var val207 = null;
          key206 = input.readI64();
          val207 = input.readI64();
          this.proxyidmap[key206] = val207;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.User();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.point = new ttypes.Point();
        this.point.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.track = new ttypes.Track();
        this.track.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.relation = new ttypes.Relation();
        this.relation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.selector = new ttypes.Selector();
        this.selector.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.datastatus = new ttypes.Datastatus();
        this.datastatus.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size208 = 0;
        var _rtmp3212;
        this.analyticsAggregateList = [];
        var _etype211 = 0;
        _rtmp3212 = input.readListBegin();
        _etype211 = _rtmp3212.etype;
        _size208 = _rtmp3212.size;
        for (var _i213 = 0; _i213 < _size208; ++_i213)
        {
          var elem214 = null;
          elem214 = new ttypes.AnalyticsAggregate();
          elem214.read(input);
          this.analyticsAggregateList.push(elem214);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Response.prototype.write = function(output) {
  output.writeStructBegin('Response');
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.I64, 1);
    output.writeI64(this.deleted);
    output.writeFieldEnd();
  }
  if (this.changeset !== null && this.changeset !== undefined) {
    output.writeFieldBegin('changeset', Thrift.Type.STRUCT, 2);
    this.changeset.write(output);
    output.writeFieldEnd();
  }
  if (this.proxyidmap !== null && this.proxyidmap !== undefined) {
    output.writeFieldBegin('proxyidmap', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.I64, Thrift.Type.I64, Thrift.objectLength(this.proxyidmap));
    for (var kiter215 in this.proxyidmap)
    {
      if (this.proxyidmap.hasOwnProperty(kiter215))
      {
        var viter216 = this.proxyidmap[kiter215];
        output.writeI64(kiter215);
        output.writeI64(viter216);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 4);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.point !== null && this.point !== undefined) {
    output.writeFieldBegin('point', Thrift.Type.STRUCT, 5);
    this.point.write(output);
    output.writeFieldEnd();
  }
  if (this.track !== null && this.track !== undefined) {
    output.writeFieldBegin('track', Thrift.Type.STRUCT, 6);
    this.track.write(output);
    output.writeFieldEnd();
  }
  if (this.relation !== null && this.relation !== undefined) {
    output.writeFieldBegin('relation', Thrift.Type.STRUCT, 7);
    this.relation.write(output);
    output.writeFieldEnd();
  }
  if (this.selector !== null && this.selector !== undefined) {
    output.writeFieldBegin('selector', Thrift.Type.STRUCT, 8);
    this.selector.write(output);
    output.writeFieldEnd();
  }
  if (this.datastatus !== null && this.datastatus !== undefined) {
    output.writeFieldBegin('datastatus', Thrift.Type.STRUCT, 9);
    this.datastatus.write(output);
    output.writeFieldEnd();
  }
  if (this.analyticsAggregateList !== null && this.analyticsAggregateList !== undefined) {
    output.writeFieldBegin('analyticsAggregateList', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.analyticsAggregateList.length);
    for (var iter217 in this.analyticsAggregateList)
    {
      if (this.analyticsAggregateList.hasOwnProperty(iter217))
      {
        iter217 = this.analyticsAggregateList[iter217];
        iter217.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

