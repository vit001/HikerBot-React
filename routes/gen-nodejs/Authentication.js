//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Types_ttypes = require('./Types_types')
var Errors_ttypes = require('./Errors_types')


var ttypes = require('./Authentication_types');
//HELPER FUNCTIONS AND STRUCTURES

Authentication_createUser_args = function(args) {
  this.googleIdToken = null;
  this.user = null;
  if (args) {
    if (args.googleIdToken !== undefined && args.googleIdToken !== null) {
      this.googleIdToken = args.googleIdToken;
    }
    if (args.user !== undefined && args.user !== null) {
      this.user = new Types_ttypes.User(args.user);
    }
  }
};
Authentication_createUser_args.prototype = {};
Authentication_createUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.googleIdToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new Types_ttypes.User();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Authentication_createUser_args.prototype.write = function(output) {
  output.writeStructBegin('Authentication_createUser_args');
  if (this.googleIdToken !== null && this.googleIdToken !== undefined) {
    output.writeFieldBegin('googleIdToken', Thrift.Type.STRING, 1);
    output.writeString(this.googleIdToken);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 2);
    this.user.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Authentication_createUser_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.AuthenticationResult(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
Authentication_createUser_result.prototype = {};
Authentication_createUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.AuthenticationResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Authentication_createUser_result.prototype.write = function(output) {
  output.writeStructBegin('Authentication_createUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Authentication_authenticate_args = function(args) {
  this.googleIdToken = null;
  if (args) {
    if (args.googleIdToken !== undefined && args.googleIdToken !== null) {
      this.googleIdToken = args.googleIdToken;
    }
  }
};
Authentication_authenticate_args.prototype = {};
Authentication_authenticate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.googleIdToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Authentication_authenticate_args.prototype.write = function(output) {
  output.writeStructBegin('Authentication_authenticate_args');
  if (this.googleIdToken !== null && this.googleIdToken !== undefined) {
    output.writeFieldBegin('googleIdToken', Thrift.Type.STRING, 1);
    output.writeString(this.googleIdToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Authentication_authenticate_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Types_ttypes.AuthenticationResult(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
Authentication_authenticate_result.prototype = {};
Authentication_authenticate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Types_ttypes.AuthenticationResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Authentication_authenticate_result.prototype.write = function(output) {
  output.writeStructBegin('Authentication_authenticate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Authentication_submitNonLoggedInRegID_args = function(args) {
  this.registrationID = null;
  if (args) {
    if (args.registrationID !== undefined && args.registrationID !== null) {
      this.registrationID = args.registrationID;
    }
  }
};
Authentication_submitNonLoggedInRegID_args.prototype = {};
Authentication_submitNonLoggedInRegID_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.registrationID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Authentication_submitNonLoggedInRegID_args.prototype.write = function(output) {
  output.writeStructBegin('Authentication_submitNonLoggedInRegID_args');
  if (this.registrationID !== null && this.registrationID !== undefined) {
    output.writeFieldBegin('registrationID', Thrift.Type.STRING, 1);
    output.writeString(this.registrationID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Authentication_submitNonLoggedInRegID_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  this.notFoundException = null;
  if (args instanceof Errors_ttypes.HAMPUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPSystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.HAMPNotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
  }
};
Authentication_submitNonLoggedInRegID_result.prototype = {};
Authentication_submitNonLoggedInRegID_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.HAMPUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.HAMPSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new Errors_ttypes.HAMPNotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Authentication_submitNonLoggedInRegID_result.prototype.write = function(output) {
  output.writeStructBegin('Authentication_submitNonLoggedInRegID_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 3);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AuthenticationClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
AuthenticationClient.prototype = {};
AuthenticationClient.prototype.seqid = function() { return this._seqid; }
AuthenticationClient.prototype.new_seqid = function() { return this._seqid += 1; }
AuthenticationClient.prototype.createUser = function(googleIdToken, user, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createUser(googleIdToken, user);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createUser(googleIdToken, user);
  }
};

AuthenticationClient.prototype.send_createUser = function(googleIdToken, user) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createUser', Thrift.MessageType.CALL, this.seqid());
  var args = new Authentication_createUser_args();
  args.googleIdToken = googleIdToken;
  args.user = user;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AuthenticationClient.prototype.recv_createUser = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Authentication_createUser_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createUser failed: unknown result');
};
AuthenticationClient.prototype.authenticate = function(googleIdToken, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_authenticate(googleIdToken);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_authenticate(googleIdToken);
  }
};

AuthenticationClient.prototype.send_authenticate = function(googleIdToken) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('authenticate', Thrift.MessageType.CALL, this.seqid());
  var args = new Authentication_authenticate_args();
  args.googleIdToken = googleIdToken;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AuthenticationClient.prototype.recv_authenticate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Authentication_authenticate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('authenticate failed: unknown result');
};
AuthenticationClient.prototype.submitNonLoggedInRegID = function(registrationID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_submitNonLoggedInRegID(registrationID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_submitNonLoggedInRegID(registrationID);
  }
};

AuthenticationClient.prototype.send_submitNonLoggedInRegID = function(registrationID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('submitNonLoggedInRegID', Thrift.MessageType.CALL, this.seqid());
  var args = new Authentication_submitNonLoggedInRegID_args();
  args.registrationID = registrationID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AuthenticationClient.prototype.recv_submitNonLoggedInRegID = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Authentication_submitNonLoggedInRegID_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.notFoundException) {
    return callback(result.notFoundException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('submitNonLoggedInRegID failed: unknown result');
};
AuthenticationProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
AuthenticationProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

AuthenticationProcessor.prototype.process_createUser = function(seqid, input, output) {
  var args = new Authentication_createUser_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createUser.length === 2) {
    Q.fcall(this._handler.createUser, args.googleIdToken, args.user)
      .then(function(result) {
        var result = new Authentication_createUser_result({success: result});
        output.writeMessageBegin("createUser", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          var result = new Authentication_createUser_result(err);
          output.writeMessageBegin("createUser", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("createUser", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createUser(args.googleIdToken, args.user, function (err, result) {
      if (err == null || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        var result = new Authentication_createUser_result((err != null ? err : {success: result}));
        output.writeMessageBegin("createUser", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createUser", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AuthenticationProcessor.prototype.process_authenticate = function(seqid, input, output) {
  var args = new Authentication_authenticate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.authenticate.length === 1) {
    Q.fcall(this._handler.authenticate, args.googleIdToken)
      .then(function(result) {
        var result = new Authentication_authenticate_result({success: result});
        output.writeMessageBegin("authenticate", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException) {
          var result = new Authentication_authenticate_result(err);
          output.writeMessageBegin("authenticate", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("authenticate", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.authenticate(args.googleIdToken, function (err, result) {
      if (err == null || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException) {
        var result = new Authentication_authenticate_result((err != null ? err : {success: result}));
        output.writeMessageBegin("authenticate", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("authenticate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

AuthenticationProcessor.prototype.process_submitNonLoggedInRegID = function(seqid, input, output) {
  var args = new Authentication_submitNonLoggedInRegID_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.submitNonLoggedInRegID.length === 1) {
    Q.fcall(this._handler.submitNonLoggedInRegID, args.registrationID)
      .then(function(result) {
        var result = new Authentication_submitNonLoggedInRegID_result({success: result});
        output.writeMessageBegin("submitNonLoggedInRegID", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
          var result = new Authentication_submitNonLoggedInRegID_result(err);
          output.writeMessageBegin("submitNonLoggedInRegID", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("submitNonLoggedInRegID", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.submitNonLoggedInRegID(args.registrationID, function (err, result) {
      if (err == null || err instanceof Errors_ttypes.HAMPUserException || err instanceof Errors_ttypes.HAMPSystemException || err instanceof Errors_ttypes.HAMPNotFoundException) {
        var result = new Authentication_submitNonLoggedInRegID_result((err != null ? err : {success: result}));
        output.writeMessageBegin("submitNonLoggedInRegID", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("submitNonLoggedInRegID", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

